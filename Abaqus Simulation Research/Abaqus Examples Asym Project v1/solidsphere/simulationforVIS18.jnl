# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].rectangle(point1=(0.125, 0.125), 
    point2=(-0.125, -0.125))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0125)
mdb.models['Model-1'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), ))
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models.changeKey(fromName='Model-1', toName='squarePlate')
mdb.Model(modelType=STANDARD_EXPLICIT, name='rumbleStrip')
mdb.Model(modelType=STANDARD_EXPLICIT, name='castSeal')
mdb.Model(modelType=STANDARD_EXPLICIT, name='plunger')
mdb.models['plunger'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['plunger'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['plunger'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['plunger'].sketches['__profile__'].geometry[2])
mdb.models['plunger'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.125, 0.0))
mdb.models['plunger'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.366561412811279, -1.51516103744507), point1=(0.492956638336182, 
    -1.64152956008911))
mdb.models['plunger'].sketches['__profile__'].undo()
mdb.models['plunger'].sketches['__profile__'].Line(point1=(0.0, 0.125), point2=
    (0.0, -0.125))
mdb.models['plunger'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['plunger'].sketches['__profile__'].geometry[4])
mdb.models['plunger'].sketches['__profile__'].ParallelConstraint(addUndoState=
    False, entity1=mdb.models['plunger'].sketches['__profile__'].geometry[2], 
    entity2=mdb.models['plunger'].sketches['__profile__'].geometry[4])
mdb.models['plunger'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['plunger'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['plunger'].sketches['__profile__'].geometry[2])
mdb.models['plunger'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['plunger'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['plunger'].sketches['__profile__'].geometry[2])
mdb.models['plunger'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['plunger'].sketches['__profile__'].geometry[3], point1=(
    -0.101826936006546, 0.0800009518861771))
mdb.models['plunger'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    0.125, 0.0))
mdb.models['plunger'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['plunger'].sketches['__profile__'].geometry[7])
mdb.models['plunger'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['plunger'].sketches['__profile__'].geometry[6], point1=(
    0.0864894092082977, -0.0829843729734421))
mdb.models['plunger'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['plunger'].sketches['__profile__'].geometry[4], point1=(
    -0.00626340508460999, -0.0605036467313766))
mdb.models['plunger'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['plunger'].parts['Part-1'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['plunger'].sketches['__profile__'])
del mdb.models['plunger'].sketches['__profile__']
del mdb.models['plunger'].parts['Part-1']
mdb.models['plunger'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['plunger'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['plunger'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['plunger'].sketches['__profile__'].geometry[2])
mdb.models['plunger'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.125, 0.0))
mdb.models['plunger'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['plunger'].sketches['__profile__'].geometry[3], point1=(
    -0.118470370769501, 0.0453225076198578))
mdb.models['plunger'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['plunger'].sketches['__profile__'].geometry[5], point1=(
    0.0989218950271606, -0.074975922703743))
mdb.models['plunger'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['plunger'].parts['Part-1'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['plunger'].sketches['__profile__'])
del mdb.models['plunger'].sketches['__profile__']
mdb.models['rumbleStrip'].ConstrainedSketch(name='__profile__', sheetSize=
    200.0)
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(0.125, 0.0))
mdb.models['rumbleStrip'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[2])
del mdb.models['rumbleStrip'].sketches['__profile__']
mdb.models['rumbleStrip'].ConstrainedSketch(name='__profile__', sheetSize=10.0)
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(0.125, 0.0))
mdb.models['rumbleStrip'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[2])
del mdb.models['rumbleStrip'].sketches['__profile__']
mdb.models['rumbleStrip'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(0.125, 0.0))
mdb.models['rumbleStrip'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[2])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(-0.1, 0.01))
mdb.models['rumbleStrip'].sketches['__profile__'].delete(objectList=(
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[3], ))
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(-0.12, 0.005))
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.12, 0.005), 
    point2=(-0.1, 0.01))
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.1, 0.01), 
    point2=(-0.08, 0.015))
mdb.models['rumbleStrip'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[5], entity2=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[6])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.08, 0.015), 
    point2=(-0.06, 0.02))
mdb.models['rumbleStrip'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[6], entity2=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[7])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.06, 0.02), 
    point2=(0.06, 0.02))
mdb.models['rumbleStrip'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[8])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(0.06, 0.02), 
    point2=(0.08, 0.015))
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(0.08, 0.015), 
    point2=(0.1, 0.01))
mdb.models['rumbleStrip'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[9], entity2=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[10])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(0.1, 0.01), 
    point2=(0.119755631826138, 0.00506109204332006))
mdb.models['rumbleStrip'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[10], entity2=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[11])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(
    0.119755631826138, 0.00506109204332006), point2=(0.125, 0.0))
mdb.models['rumbleStrip'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['rumbleStrip'].parts['Part-1'].BaseShellExtrude(depth=1.0, sketch=
    mdb.models['rumbleStrip'].sketches['__profile__'])
del mdb.models['rumbleStrip'].sketches['__profile__']
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['rumbleStrip'].parts['Part-1']
mdb.models['rumbleStrip'].ConstrainedSketch(name='__profile__', sheetSize=
    200.0)
del mdb.models['rumbleStrip'].sketches['__profile__']
mdb.models['rumbleStrip'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.1, 0.0), 
    point2=(0.1, 0.0))
mdb.models['rumbleStrip'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[2])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(0.1, 0.0), 
    point2=(0.08, 0.01))
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(0.08, 0.01), 
    point2=(0.06, 0.02))
mdb.models['rumbleStrip'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[4])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(0.06, 0.02), 
    point2=(0.04, 0.025))
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(0.04, 0.025), 
    point2=(-0.04, 0.025))
mdb.models['rumbleStrip'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[6])
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.04, 0.025), 
    point2=(-0.06, 0.02))
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.06, 0.02), 
    point2=(-0.08, 0.01))
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.08, 0.01), 
    point2=(-0.1, 0.0))
mdb.models['rumbleStrip'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[9])
mdb.models['rumbleStrip'].sketches['__profile__'].undo()
mdb.models['rumbleStrip'].sketches['__profile__'].Line(point1=(-0.08, 0.01), 
    point2=(-0.1, 0.0))
mdb.models['rumbleStrip'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[8], entity2=
    mdb.models['rumbleStrip'].sketches['__profile__'].geometry[9])
mdb.models['rumbleStrip'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['rumbleStrip'].parts['Part-1'].BaseShellExtrude(depth=1.0, sketch=
    mdb.models['rumbleStrip'].sketches['__profile__'])
del mdb.models['rumbleStrip'].sketches['__profile__']
mdb.models['castSeal'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['castSeal'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -0.5), point2=(0.0, 0.5))
mdb.models['castSeal'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['castSeal'].sketches['__profile__'].geometry[2])
mdb.models['castSeal'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(-0.125, 0.25))
mdb.models['castSeal'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['castSeal'].sketches['__profile__'].geometry[3])
mdb.models['castSeal'].sketches['__profile__'].Line(point1=(-0.125, 0.25), 
    point2=(-0.2083333, 0.25))
mdb.models['castSeal'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['castSeal'].sketches['__profile__'].geometry[4])
mdb.models['castSeal'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['castSeal'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['castSeal'].sketches['__profile__'].geometry[4])
mdb.models['castSeal'].sketches['__profile__'].Line(point1=(-0.2083333, 0.25), 
    point2=(-0.22, 0.24))
mdb.models['castSeal'].sketches['__profile__'].Spot(point=(-0.1, 0.0))
mdb.models['castSeal'].sketches['__profile__'].Spot(point=(-0.08, 0.0))
mdb.models['castSeal'].sketches['__profile__'].undo()
mdb.models['castSeal'].sketches['__profile__'].undo()
mdb.models['castSeal'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(-0.135, 0.0))
mdb.models['castSeal'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['castSeal'].sketches['__profile__'].geometry[6])
mdb.models['castSeal'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['castSeal'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['castSeal'].sketches['__profile__'].geometry[6])
mdb.models['castSeal'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['castSeal'].parts['Part-1'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['castSeal'].sketches['__profile__'])
del mdb.models['castSeal'].sketches['__profile__']
del mdb.models['castSeal'].parts['Part-1']
mdb.models['castSeal'].ConstrainedSketch(name='__profile__', sheetSize=1.0)
mdb.models['castSeal'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -0.5), point2=(0.0, 0.5))
mdb.models['castSeal'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['castSeal'].sketches['__profile__'].geometry[2])
mdb.models['castSeal'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(-0.125, 0.25))
mdb.models['castSeal'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['castSeal'].sketches['__profile__'].geometry[3])
mdb.models['castSeal'].sketches['__profile__'].Line(point1=(-0.125, 0.25), 
    point2=(-0.2083333, 0.25))
mdb.models['castSeal'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['castSeal'].sketches['__profile__'].geometry[4])
mdb.models['castSeal'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['castSeal'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['castSeal'].sketches['__profile__'].geometry[4])
mdb.models['castSeal'].sketches['__profile__'].Line(point1=(-0.2083333, 0.25), 
    point2=(-0.22, 0.24))
mdb.models['castSeal'].sketches['__profile__'].Line(point1=(-0.125, 0.0), 
    point2=(-0.14, 0.0))
mdb.models['castSeal'].sketches['__profile__'].HorizontalConstraint(
    addUndoState=False, entity=
    mdb.models['castSeal'].sketches['__profile__'].geometry[6])
mdb.models['castSeal'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['castSeal'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['castSeal'].sketches['__profile__'].geometry[6])
mdb.models['castSeal'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['castSeal'].parts['Part-1'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['castSeal'].sketches['__profile__'])
del mdb.models['castSeal'].sketches['__profile__']
mdb.models['castSeal'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask((
    '[#f ]', ), ), ))
mdb.models['castSeal'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.031)
mdb.models['castSeal'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.01)
mdb.models['castSeal'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0125)
mdb.models['castSeal'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0155)
mdb.models['castSeal'].parts['Part-1'].generateMesh()
mdb.models['castSeal'].parts['Part-1'].deleteMesh(regions=
    mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['castSeal'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['castSeal'].parts['Part-1'].generateMesh()
mdb.models['castSeal'].Material(name='Neo-Hookean')
mdb.models['castSeal'].materials['Neo-Hookean'].Hyperelastic(materialType=
    ISOTROPIC, table=((344828000.0, 3e-10), ), testData=OFF, type=NEO_HOOKE, 
    volumetricResponse=VOLUMETRIC_DATA)
mdb.models['plunger'].Material(name='Neo-Hookean')
mdb.models['plunger'].materials['Neo-Hookean'].Hyperelastic(materialType=
    ISOTROPIC, table=((344828000.0, 3e-10), ), testData=OFF, type=NEO_HOOKE, 
    volumetricResponse=VOLUMETRIC_DATA)
mdb.models['rumbleStrip'].Material(name='Material-1')
mdb.models['rumbleStrip'].materials['Material-1'].Hyperelastic(materialType=
    ISOTROPIC, table=((344828000.0, 3e-10), ), testData=OFF, type=NEO_HOOKE, 
    volumetricResponse=VOLUMETRIC_DATA)
mdb.models['castSeal'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Neo-Hookean', name='Section-1', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.1, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['plunger'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Neo-Hookean', name='Section-1', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.1, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['rumbleStrip'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Material-1', name='Section-1', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.1, thicknessField='', 
    thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['squarePlate'].Material(name='Neo-Hookean')
mdb.models['squarePlate'].materials['Neo-Hookean'].Hyperelastic(materialType=
    ISOTROPIC, table=((344828000.0, 3e-10), ), testData=OFF, type=NEO_HOOKE, 
    volumetricResponse=VOLUMETRIC_DATA)
mdb.models['squarePlate'].HomogeneousSolidSection(material='Neo-Hookean', name=
    'Section-1', thickness=None)
mdb.models['castSeal'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['castSeal'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['castSeal'].parts['Part-1'])
mdb.models['plunger'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['plunger'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['plunger'].parts['Part-1'])
mdb.models['rumbleStrip'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['rumbleStrip'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['rumbleStrip'].parts['Part-1'])
mdb.models['squarePlate'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['squarePlate'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['squarePlate'].parts['Part-1'])
mdb.models['castSeal'].StaticStep(name='Step-1', nlgeom=ON, previous='Initial')
mdb.models['plunger'].StaticStep(name='Step-1', nlgeom=ON, previous='Initial')
mdb.models['rumbleStrip'].StaticStep(name='Step-1', nlgeom=ON, previous=
    'Initial')
mdb.models['squarePlate'].StaticStep(name='Step-1', nlgeom=ON, previous=
    'Initial')
mdb.models['squarePlate'].EncastreBC(createStepName='Step-1', localCsys=None, 
    name='BC-1', region=Region(
    edges=mdb.models['squarePlate'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#2 ]', ), )))
mdb.models['squarePlate'].boundaryConditions['BC-1'].resume()
mdb.models['squarePlate'].boundaryConditions.changeKey(fromName='BC-1', toName=
    'Fix left')
mdb.models['squarePlate'].ExpressionField(description='', expression=
    'Y*Y + 0.125', localCsys=None, name='parabola')
mdb.models['squarePlate'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='parabola', fixed=OFF, 
    localCsys=None, name='pull right corners', region=Region(
    edges=mdb.models['squarePlate'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#8 ]', ), )), u1=1.0, u2=0.0, ur3=0.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='squarePlate_right-parabola', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.models['squarePlate'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['squarePlate'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['squarePlate'].rootAssembly.regenerate()
mdb.jobs['squarePlate_right-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 21 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlate_right-parabola.odb', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 175088, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlate_right-parabola', 
    'memory': 24.0})
mdb.jobs['squarePlate_right-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlate_right-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 19:49:42 2019', 
    'jobName': 'squarePlate_right-parabola'})
mdb.models['squarePlate'].analyticalFields['parabola'].setValues(expression=
    'Y*Y ')
mdb.jobs['squarePlate_right-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 21 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlate_right-parabola.odb', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 179416, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlate_right-parabola', 
    'memory': 24.0})
mdb.jobs['squarePlate_right-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlate_right-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 19:51:26 2019', 
    'jobName': 'squarePlate_right-parabola'})
mdb.models['squarePlate'].analyticalFields['parabola'].setValues(expression=
    'Y*Y - 0.125')
mdb.jobs['squarePlate_right-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 21 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlate_right-parabola.odb', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 179540, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlate_right-parabola', 
    'memory': 24.0})
mdb.jobs['squarePlate_right-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': 1, 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 0.875, 
    'attempts': 1, 'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.125, 'increment': 4, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlate_right-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 19:53:48 2019', 
    'jobName': 'squarePlate_right-parabola'})
mdb.models['squarePlate'].analyticalFields['parabola'].setValues(expression=
    '2*Y*Y ')
mdb.jobs['squarePlate_right-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 21 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlate_right-parabola.odb', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 179396, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlate_right-parabola', 
    'memory': 24.0})
mdb.jobs['squarePlate_right-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlate_right-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 19:55:15 2019', 
    'jobName': 'squarePlate_right-parabola'})
mdb.models['squarePlate'].analyticalFields['parabola'].setValues(expression=
    '1*Y*Y ')
mdb.jobs['squarePlate_right-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 21 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlate_right-parabola.odb', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 166352, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlate_right-parabola', 
    'memory': 24.0})
mdb.jobs['squarePlate_right-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlate_right-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 19:56:17 2019', 
    'jobName': 'squarePlate_right-parabola'})
mdb.models['castSeal'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#f ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['castSeal'].rootAssembly.regenerate()
mdb.models['castSeal'].EncastreBC(createStepName='Step-1', localCsys=None, 
    name='fix part', region=Region(
    faces=mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3 ]', ), )))
mdb.models['castSeal'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'pull-out', region=Region(
    faces=mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#8 ]', ), )), u1=0.0, u2=0.0, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=
    UNSET)
mdb.models['castSeal'].boundaryConditions['pull-out'].setValues(u2=-0.01)
mdb.models['castSeal'].boundaryConditions.changeKey(fromName='pull-out', 
    toName='pull-down')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal-pull-down', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['castSeal-pull-down'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down.odb', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 180264, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down', 'memory': 43.0})
mdb.jobs['castSeal-pull-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal-pull-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 20:00:30 2019', 'jobName': 'castSeal-pull-down'})
mdb.models['castSeal'].fieldOutputRequests['F-Output-1'].setValues(directions=
    OFF, variables=('S', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'RF', 'CF', 'STH'))
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(35, 
    '\n*Element Output, directions=NO\nLE, PE, PEEQ, PEMAG, S, STH\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.models['plunger'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['plunger'].keywordBlock.replace(19, 
    '\n*Output, field, variable=PRESELECT\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.models['rumbleStrip'].keywordBlock.synchVersions(storeNodesAndElements=
    False)
mdb.models['rumbleStrip'].keywordBlock.replace(19, 
    '\n*Output, field, variable=PRESELECT\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.models['squarePlate'].keywordBlock.synchVersions(storeNodesAndElements=
    False)
mdb.models['squarePlate'].keywordBlock.replace(33, 
    '\n*Output, field, variable=PRESELECT\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.models['plunger'].fieldOutputRequests['F-Output-1'].setValues(directions=
    OFF, variables=('S', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'UR', 'RF', 'CF', 
    'STH'))
mdb.models['castSeal'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'S', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'UR', 'RF', 'CF', 'STH'))
mdb.models['rumbleStrip'].fieldOutputRequests['F-Output-1'].setValues(
    directions=OFF, variables=('S', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'UR', 
    'RF', 'CF', 'STH'))
mdb.models['squarePlate'].fieldOutputRequests['F-Output-1'].setValues(
    directions=OFF, variables=('S', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'UR', 
    'RF', 'CF', 'STH'))
mdb.jobs['castSeal-pull-down'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down.odb', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 152148, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down', 'memory': 43.0})
mdb.jobs['castSeal-pull-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal-pull-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 20:04:05 2019', 'jobName': 'castSeal-pull-down'})
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, poisson=0.0, poissonDefinition=VALUE, 
    preIntegrate=OFF, thickness=0.1, thicknessField='', thicknessType=UNIFORM)
mdb.jobs['castSeal-pull-down'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down.odb', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 182132, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down', 'memory': 43.0})
mdb.jobs['castSeal-pull-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal-pull-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 20:17:30 2019', 'jobName': 'castSeal-pull-down'})
mdb.models['castSeal'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'fix radius', region=Region(
    faces=mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#4 ]', ), )), u1=UNSET, u2=0.0, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=
    UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal-pull-down-fix-radius', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['castSeal-pull-down-fix-radius'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ERROR, {
    'phase': BATCHPRE_PHASE, 
    'message': '51 nodes have dof on which velocity/displacement/acceleration/base motion etc. constraints are specified simultaneously. The nodes have been identified in node set ErrNodeBCRedundantDof.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down-fix-radius.odb', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ABORTED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.models['castSeal'].parts['Part-1'].Set(name='Set-middle', nodes=
    mdb.models['castSeal'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#14 #0:4 #3e0000 #0 #ffe #0 #1f00', 
    ' #e0000000 #3 #fff00 #ffff0000 #7f #1fffffc #fff00000', 
    ' #7ff #1fffffc0 #ff000000 #7fff #fffffe00 #f8000001 #fffff', 
    ' #ffffe000 #80000003 #7ffff ]', ), ))
del mdb.models['castSeal'].parts['Part-1'].sets['Set-middle']
mdb.models['castSeal'].parts['Part-1'].Set(faces=
    mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(('[#4 ]', 
    ), ), name='Set-middle', xEdges=
    mdb.models['castSeal'].parts['Part-1'].edges.getSequenceFromMask(('[#50 ]', 
    ), ))
mdb.models['castSeal'].rootAssembly.regenerate()
mdb.models['castSeal'].boundaryConditions['fix radius'].setValues(region=
    mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].sets['Set-middle'])
mdb.jobs['castSeal-pull-down-fix-radius'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down-fix-radius.odb', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 183668, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down-fix-radius', 
    'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down-fix-radius', 'severe': 0, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 20:33:15 2019', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.models['castSeal'].boundaryConditions['fix radius'].setValues(u1=0.0, u2=
    UNSET)
mdb.jobs['castSeal-pull-down-fix-radius'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down-fix-radius.odb', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 183888, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down-fix-radius', 
    'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down-fix-radius', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 20:35:24 2019', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, thickness=0.1, thicknessField='', thicknessType=UNIFORM)
mdb.jobs['castSeal-pull-down-fix-radius'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down-fix-radius.odb', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 184056, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down-fix-radius', 
    'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down-fix-radius', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 20:41:33 2019', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.models['plunger'].EncastreBC(createStepName='Step-1', localCsys=None, name=
    'Fix bottom', region=Region(
    edges=mdb.models['plunger'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#2 ]', ), )))
mdb.models['plunger'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(mdb.models['plunger'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['plunger'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0125)
mdb.models['plunger'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['plunger'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ))
mdb.models['plunger'].parts['Part-1'].generateMesh()
mdb.models['plunger'].parts['Part-1'].Set(name='Set-top-handle', nodes=
    mdb.models['plunger'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#401 #0 #c000 #0:8 #30000 #200 ]', ), ))
mdb.models['plunger'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['plunger'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['plunger'].rootAssembly.regenerate()
mdb.models['plunger'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'pull from top', region=
    mdb.models['plunger'].rootAssembly.instances['Part-1-1'].sets['Set-top-handle']
    , u1=UNSET, u2=-0.01, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='plunger', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='plunger_push-down', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['plunger_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_push-down.odb', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 178660, 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_push-down', 'memory': 32.0})
mdb.jobs['plunger_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['plunger_push-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 20:48:49 2019', 'jobName': 'plunger_push-down'})
mdb.models['plunger'].boundaryConditions['pull from top'].setValues(u2=-0.05)
mdb.jobs['plunger_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_push-down.odb', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 152448, 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_push-down', 'memory': 32.0})
mdb.jobs['plunger_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 21 POINTS', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': 1, 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 3, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': ' 2U', 'timeIncrement': 0.0625, 'increment': 3, 
    'stepTime': 0.5, 'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': ' 3U', 'timeIncrement': 0.015625, 'increment': 3, 
    'stepTime': 0.5, 'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': ' 4U', 'timeIncrement': 0.00390625, 'increment': 3, 
    'stepTime': 0.5, 'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': ' 5U', 'timeIncrement': 0.0009765625, 'increment': 3, 
    'stepTime': 0.5, 'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 
    'iterations': 16, 'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['plunger_push-down']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': 6, 'timeIncrement': 1e-35, 'increment': 3, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 'iterations': 16, 
    'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['plunger_push-down']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'plunger_push-down'})
mdb.models['plunger'].boundaryConditions['pull from top'].setValues(u2=-0.02)
mdb.jobs['plunger_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_push-down.odb', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 186752, 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_push-down', 'memory': 32.0})
mdb.jobs['plunger_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['plunger_push-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 20:59:58 2019', 'jobName': 'plunger_push-down'})
mdb.models['rumbleStrip'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='BC-1', region=Region(
    faces=mdb.models['rumbleStrip'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#8 ]', ), )), u1=UNSET, u2=-0.01, u3=UNSET, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['rumbleStrip'].boundaryConditions.changeKey(fromName='BC-1', toName=
    'push down top')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='rumbleStrip', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='rumbleStrip_push-down', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['rumbleStrip_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *BOUNDARY, file "rumbleStrip_push-down.inp", line 37: Unknown assembly node set _PICKEDSET4', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THIS MODEL HAS EITHER INCORRECT OR NO ELEMENT DEFINITIONS.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.models['rumbleStrip'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['rumbleStrip'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#3f ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['rumbleStrip'].rootAssembly.regenerate()
mdb.models['rumbleStrip'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['rumbleStrip'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3f ]', ), ), ))
mdb.models['rumbleStrip'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0125)
mdb.models['rumbleStrip'].parts['Part-1'].setMeshControls(elemShape=QUAD, 
    regions=
    mdb.models['rumbleStrip'].parts['Part-1'].faces.getSequenceFromMask((
    '[#3f ]', ), ))
mdb.models['rumbleStrip'].parts['Part-1'].generateMesh()
mdb.models['rumbleStrip'].rootAssembly.regenerate()
mdb.jobs['rumbleStrip_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\rumbleStrip_push-down.odb', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 188152, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'rumbleStrip_push-down', 
    'memory': 68.0})
mdb.jobs['rumbleStrip_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 22.0, 'phase': STANDARD_PHASE, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'rumbleStrip_push-down', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['rumbleStrip_push-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 21:11:41 2019', 'jobName': 'rumbleStrip_push-down'})
mdb.models['rumbleStrip'].boundaryConditions['push down top'].setValues(u1=0.0, 
    u3=0.0)
mdb.jobs['rumbleStrip_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\rumbleStrip_push-down.odb', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 187684, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'rumbleStrip_push-down', 
    'memory': 68.0})
mdb.jobs['rumbleStrip_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 22.0, 'phase': STANDARD_PHASE, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'rumbleStrip_push-down', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['rumbleStrip_push-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 21:12:45 2019', 'jobName': 'rumbleStrip_push-down'})
mdb.models['rumbleStrip'].EncastreBC(createStepName='Step-1', localCsys=None, 
    name='Fix bottom', region=Region(
    faces=mdb.models['rumbleStrip'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )))
mdb.jobs['rumbleStrip_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\rumbleStrip_push-down.odb', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 187968, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'rumbleStrip_push-down', 
    'memory': 68.0})
mdb.jobs['rumbleStrip_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 22.0, 'phase': STANDARD_PHASE, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'rumbleStrip_push-down', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['rumbleStrip_push-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 21:14:35 2019', 'jobName': 'rumbleStrip_push-down'})
mdb.models['rumbleStrip'].boundaryConditions['push down top'].setValues(u1=
    UNSET, u3=UNSET)
mdb.jobs['rumbleStrip_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\rumbleStrip_push-down.odb', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 188252, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'rumbleStrip_push-down', 
    'memory': 68.0})
mdb.jobs['rumbleStrip_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 22.0, 'phase': STANDARD_PHASE, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'rumbleStrip_push-down', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['rumbleStrip_push-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 21:16:29 2019', 'jobName': 'rumbleStrip_push-down'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['castSeal-pull-down-fix-radius'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-pull-down-fix-radius.odb', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 186756, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down-fix-radius', 
    'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down-fix-radius', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 21:24:29 2019', 
    'jobName': 'castSeal-pull-down-fix-radius'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(39, 
    '\n*Element Output, directions=NO, POSITION=AVERAGED AT NODES\nLE, PE, PEEQ, PEMAG, S, STH')
mdb.jobs['castSeal-pull-down-fix-radius'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down-fix-radius.odb', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 200684, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down-fix-radius', 
    'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down-fix-radius', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 22:58:19 2019', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-pull-down-fix-radius.odb', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'AN OUTPUT DATABASE REQUEST THAT REQUIRES THE CALCULATOR HAS BEEN FOUND.  IF VIEWING THE RESULTS BEFORE THE ANALYSIS IS COMPLETE, PLEASE RUN THE CALCULATOR MANUALLY USING THE CONVERT=ODB AND OLDJOB= OPTIONS.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 199200, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down-fix-radius', 
    'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down-fix-radius', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 22:59:20 2019', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(39, 
    '\n*Element Output, directions=NO\nLE, PE, PEEQ, PEMAG, S, STH')
mdb.jobs['castSeal-pull-down-fix-radius'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-pull-down-fix-radius.odb', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 202112, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down-fix-radius', 
    'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down-fix-radius', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.jobs['castSeal-pull-down-fix-radius']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 23:08:17 2019', 
    'jobName': 'castSeal-pull-down-fix-radius'})
mdb.models['castSeal'].boundaryConditions['fix radius'].suppress()
mdb.jobs['castSeal-pull-down'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-pull-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-pull-down.odb', 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 204088, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-pull-down', 'memory': 43.0})
mdb.jobs['castSeal-pull-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-pull-down', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal-pull-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-pull-down'})
mdb.jobs['castSeal-pull-down']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 05 23:32:33 2019', 'jobName': 'castSeal-pull-down'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['castSeal'].boundaryConditions['fix part'].suppress()
mdb.models['castSeal'].rootAssembly.Set(edges=
    mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#12 ]', ), ), name='Set-3')
mdb.models['castSeal'].EncastreBC(createStepName='Step-1', localCsys=None, 
    name='fix part two lines', region=
    mdb.models['castSeal'].rootAssembly.sets['Set-3'])
mdb.models['castSeal'].boundaryConditions['fix radius'].resume()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal-pull-down-fix-radius-n-lines', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['castSeal-pull-down-fix-radius-n-lines'].submit(consistencyChecking=
    OFF)
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down-fix-radius-n-lines.odb', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 29088, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines', 'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 19:17:00 2019', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.models['castSeal'].boundaryConditions['fix part two lines'].setValues(
    region=Region(
    edges=mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#2 ]', ), )))
mdb.models['castSeal'].boundaryConditions['pull-down'].setValues(region=Region(
    edges=mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#40 ]', ), )))
mdb.jobs['castSeal-pull-down-fix-radius-n-lines'].submit(consistencyChecking=
    OFF)
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-pull-down-fix-radius-n-lines.odb', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 5224, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines', 'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 19:20:16 2019', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines'].submit(consistencyChecking=
    OFF)
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-pull-down-fix-radius-n-lines.odb', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 27408, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines', 'memory': 43.0})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['castSeal-pull-down-fix-radius-n-lines']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 19:23:14 2019', 
    'jobName': 'castSeal-pull-down-fix-radius-n-lines'})
mdb.jobs['plunger_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_push-down.odb', 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 34516, 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_push-down', 'memory': 32.0})
mdb.jobs['plunger_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_push-down', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['plunger_push-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_push-down'})
mdb.jobs['plunger_push-down']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 20:13:59 2019', 'jobName': 'plunger_push-down'})
mdb.jobs['rumbleStrip_push-down'].submit(consistencyChecking=OFF)
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\rumbleStrip_push-down.odb', 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 36352, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'rumbleStrip_push-down', 
    'memory': 68.0})
mdb.jobs['rumbleStrip_push-down']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 22.0, 'phase': STANDARD_PHASE, 
    'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'rumbleStrip_push-down', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['rumbleStrip_push-down']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['rumbleStrip_push-down']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 20:17:15 2019', 'jobName': 'rumbleStrip_push-down'})
mdb.jobs['squarePlate_right-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 21 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlate_right-parabola.odb', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 36392, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlate_right-parabola', 
    'memory': 24.0})
mdb.jobs['squarePlate_right-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlate_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlate_right-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlate_right-parabola'})
mdb.jobs['squarePlate_right-parabola']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 20:21:38 2019', 
    'jobName': 'squarePlate_right-parabola'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['squarePlate'].parts['Part-1'].deleteMesh()
mdb.models['squarePlate'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.00625)
mdb.models['squarePlate'].parts['Part-1'].generateMesh()
mdb.models['squarePlate'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='squarePlateFine_right-parabola', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['squarePlateFine_right-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateFine_right-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 41 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateFine_right-parabola.odb', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 2672, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateFine_right-parabola', 
    'memory': 27.0})
mdb.jobs['squarePlateFine_right-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlateFine_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateFine_right-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 23:38:50 2019', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.models['squarePlate'].ExpressionField(description='', expression='0.5*Y*Y '
    , localCsys=None, name='parabole  half')
mdb.models['squarePlate'].boundaryConditions['pull right corners'].setValues(
    fieldName='parabole  half')
mdb.jobs['squarePlateFine_right-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateFine_right-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 41 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateFine_right-parabola.odb', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 52904, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateFine_right-parabola', 
    'memory': 27.0})
mdb.jobs['squarePlateFine_right-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlateFine_right-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateFine_right-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs['squarePlateFine_right-parabola']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 23:40:12 2019', 
    'jobName': 'squarePlateFine_right-parabola'})
mdb.jobs.changeKey(fromName='squarePlateFine_right-parabola', toName=
    'squarePlateFine_right-unit-parabola')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='squarePlateFine_right-half-parabola', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['squarePlateFine_right-half-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateFine_right-half-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 41 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateFine_right-half-parabola.odb', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 56944, 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateFine_right-half-parabola', 
    'memory': 27.0})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateFine_right-half-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.jobs['squarePlateFine_right-half-parabola']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 23:48:37 2019', 
    'jobName': 'squarePlateFine_right-half-parabola'})
mdb.models['squarePlate'].boundaryConditions['pull right corners'].setValues(
    fieldName='parabola')
mdb.jobs['squarePlateFine_right-unit-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 41 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateFine_right-unit-parabola.odb', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 38216, 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateFine_right-unit-parabola', 
    'memory': 27.0})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 17.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateFine_right-unit-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
mdb.jobs['squarePlateFine_right-unit-parabola']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 06 23:48:58 2019', 
    'jobName': 'squarePlateFine_right-unit-parabola'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['castSeal'].ExpressionField(description='', expression='0.5 * Y', 
    localCsys=None, name='shear in X')
mdb.models['castSeal'].boundaryConditions['fix part two lines'].suppress()
mdb.models['castSeal'].boundaryConditions['fix radius'].suppress()
mdb.models['castSeal'].boundaryConditions['pull-down'].suppress()
mdb.models['castSeal'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=FIELD, fieldName='shear in X', fixed=OFF, localCsys=None, 
    name='shera in X', region=Region(
    faces=mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#f ]', ), ), 
    edges=mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#1ff ]', ), ), 
    vertices=mdb.models['castSeal'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#1f ]', ), )), u1=1.0, u2=0.0, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=
    UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal-shear-in-X', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['castSeal-shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-shear-in-X.odb', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 50424, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-shear-in-X', 'memory': 43.0})
mdb.jobs['castSeal-shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-shear-in-X', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['castSeal-shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Fri Feb 08 17:00:41 2019', 'jobName': 'castSeal-shear-in-X'})
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(42, 
    '\n*EL PRINT, POSITION=CENTROID\nDG')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal-shear-in-X-cen', 
    nodalOutputPrecision=FULL, numCpus=1, numGPUs=0, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['castSeal-shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-shear-in-X-cen.odb', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 73444, 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-shear-in-X-cen', 
    'memory': 43.0})
mdb.jobs['castSeal-shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-shear-in-X-cen', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['castSeal-shear-in-X-cen']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal-shear-in-X-cen'})
mdb.jobs['castSeal-shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Fri Feb 08 17:28:27 2019', 'jobName': 'castSeal-shear-in-X-cen'})
del mdb.models['castSeal'].rootAssembly.features['Datum csys-1']
mdb.jobs['castSeal-shear-in-X'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['castSeal-shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-11', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-11'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-11'].submit(consistencyChecking=OFF)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-12', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-12'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-13', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-13'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['Job-13'].submit(consistencyChecking=OFF)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-14', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-14'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-15', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-15'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.jobs['Job-15']
del mdb.jobs['Job-14']
del mdb.jobs['Job-13']
del mdb.jobs['Job-12']
del mdb.jobs['Job-11']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-11', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-11'].submit(consistencyChecking=OFF)
mdb.jobs['Job-11']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 41 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\Job-11.odb', 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 259744, 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-11', 'memory': 27.0})
mdb.jobs['Job-11']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-11', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-11']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-11'})
mdb.jobs['Job-11']._Message(JOB_COMPLETED, {'time': 'Sun Feb 10 16:26:10 2019', 
    'jobName': 'Job-11'})
del mdb.jobs['Job-11']
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(42, 
    '\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.jobs['castSeal-shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-shear-in-X.odb', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 258976, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-shear-in-X', 'memory': 43.0})
mdb.jobs['castSeal-shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-shear-in-X', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['castSeal-shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 16:27:37 2019', 'jobName': 'castSeal-shear-in-X'})
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, poisson=0.0, poissonDefinition=VALUE, 
    preIntegrate=OFF, thickness=0.1, thicknessField='', thicknessType=UNIFORM)
mdb.jobs['castSeal-shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal-shear-in-X.odb', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 259720, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-shear-in-X', 'memory': 43.0})
mdb.jobs['castSeal-shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-shear-in-X', 'severe': 0, 'iterations': 13, 
    'phase': STANDARD_PHASE, 'equilibrium': 13})
mdb.jobs['castSeal-shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 16:33:04 2019', 'jobName': 'castSeal-shear-in-X'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['rumbleStrip'].ExpressionField(description='', expression='0.5*Y', 
    localCsys=None, name='AnalyticalField-X')
mdb.models['rumbleStrip'].boundaryConditions['Fix bottom'].suppress()
mdb.models['rumbleStrip'].boundaryConditions['push down top'].suppress()
mdb.models['rumbleStrip'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='AnalyticalField-X', fixed=OFF, 
    localCsys=None, name='shear in X', region=Region(
    faces=mdb.models['rumbleStrip'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#3f ]', ), ), 
    edges=mdb.models['rumbleStrip'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#3fffff ]', ), ), 
    vertices=mdb.models['rumbleStrip'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#ffff ]', ), )), u1=1.0, u2=0.0, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=
    UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='rumbleStrip', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='rumbleStrip_shear-in-X', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['rumbleStrip_shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['rumbleStrip_shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\rumbleStrip_shear-in-X.odb', 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 265688, 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'rumbleStrip_shear-in-X', 
    'memory': 68.0})
mdb.jobs['rumbleStrip_shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 22.0, 'phase': STANDARD_PHASE, 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'rumbleStrip_shear-in-X', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['rumbleStrip_shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['rumbleStrip_shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:07:14 2019', 'jobName': 'rumbleStrip_shear-in-X'})
mdb.jobs['castSeal-shear-in-X'].setValues(nodalOutputPrecision=SINGLE)
mdb.jobs['castSeal-shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal-shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\castSeal-shear-in-X.odb', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 265432, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal-shear-in-X', 'memory': 43.0})
mdb.jobs['castSeal-shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal-shear-in-X', 'severe': 0, 'iterations': 13, 
    'phase': STANDARD_PHASE, 'equilibrium': 13})
mdb.jobs['castSeal-shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'castSeal-shear-in-X'})
mdb.jobs['castSeal-shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:10:44 2019', 'jobName': 'castSeal-shear-in-X'})
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['castSeal'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=ON, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask((
    '[#f ]', ), ), ))
mdb.models['castSeal'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=ON, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask((
    '[#f ]', ), ), ))
mdb.models['castSeal'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal_shear-in-X-high-order', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['castSeal_shear-in-X-high-order'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-high-order']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-high-order.odb', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 266268, 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-high-order', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-high-order', 'severe': 0, 
    'iterations': 13, 'phase': STANDARD_PHASE, 'equilibrium': 13})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.jobs['castSeal_shear-in-X-high-order']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:20:17 2019', 
    'jobName': 'castSeal_shear-in-X-high-order'})
mdb.models['castSeal'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF)), regions=(
    mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(('[#f ]', 
    ), ), ))
mdb.models['castSeal'].parts['Part-1'].deleteMesh(regions=
    mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['castSeal'].parts['Part-1'].setMeshControls(elemShape=TRI, regions=
    mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['castSeal'].parts['Part-1'].generateMesh()
mdb.models['castSeal'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSealTet_shear-in-X', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['castSealTet_shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['castSealTet_shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S3R', 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S3R', 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S3R', 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSealTet_shear-in-X.odb', 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 267528, 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSealTet_shear-in-X', 
    'memory': 45.0})
mdb.jobs['castSealTet_shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 22.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSealTet_shear-in-X', 'severe': 0, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['castSealTet_shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSealTet_shear-in-X'})
mdb.jobs['castSealTet_shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:24:49 2019', 'jobName': 'castSealTet_shear-in-X'})
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(41, 
    '\n*Element Output, directions=YES\nLE, PE, PEEQ, PEMAG, S, STH')
mdb.models['castSeal'].keywordBlock.replace(42, 
    '\n*EL PRINT, POSITION=INTEGRATION POINTS\nDG')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSealTet_shear-in-X-integration', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['castSealTet_shear-in-X-integration'].submit(consistencyChecking=OFF)
mdb.jobs['castSealTet_shear-in-X-integration']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S3R', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S3R', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S3R', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSealTet_shear-in-X-integration.odb', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 267408, 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSealTet_shear-in-X-integration', 
    'memory': 45.0})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 22.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'castSealTet_shear-in-X-integration', 'severe': 0, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.jobs['castSealTet_shear-in-X-integration']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:33:02 2019', 
    'jobName': 'castSealTet_shear-in-X-integration'})
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].parts['Part-1'].deleteMesh(regions=
    mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['castSeal'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['castSeal'].parts['Part-1'].faces.getSequenceFromMask(('[#f ]', 
    ), ))
mdb.models['castSeal'].parts['Part-1'].generateMesh()
mdb.models['castSeal'].rootAssembly.regenerate()
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.01, 
    thicknessField='', thicknessType=UNIFORM)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal_shear-in-X-integration-thin', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['castSeal_shear-in-X-integration-thin'].submit(consistencyChecking=
    OFF)
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-integration-thin.odb', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 268732, 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-integration-thin', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-integration-thin', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.jobs['castSeal_shear-in-X-integration-thin']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:38:24 2019', 
    'jobName': 'castSeal_shear-in-X-integration-thin'})
mdb.models['castSeal'].steps['Step-1'].setValues(initialInc=0.1)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal_shear-in-X-inte-thin-inc', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['castSeal_shear-in-X-inte-thin-inc'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-inte-thin-inc.odb', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 265228, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-inte-thin-inc', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.1, 'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 
    'stepTime': 0.1, 'step': 1, 'jobName': 'castSeal_shear-in-X-inte-thin-inc', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.2, 'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 
    'stepTime': 0.2, 'step': 1, 'jobName': 'castSeal_shear-in-X-inte-thin-inc', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.35, 'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 
    'stepTime': 0.35, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.575, 'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 
    'stepTime': 0.575, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.9125, 'attempts': 1, 'timeIncrement': 0.3375, 
    'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 0.0874999999999999, 
    'increment': 6, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:41:10 2019', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.models['castSeal'].steps['Step-1'].setValues(maxInc=3.0, minInc=3e-05, 
    timePeriod=3.0)
mdb.jobs['castSeal_shear-in-X-inte-thin-inc'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-inte-thin-inc.odb', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 265736, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-inte-thin-inc', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.1, 'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 
    'stepTime': 0.1, 'step': 1, 'jobName': 'castSeal_shear-in-X-inte-thin-inc', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.2, 'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 
    'stepTime': 0.2, 'step': 1, 'jobName': 'castSeal_shear-in-X-inte-thin-inc', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.35, 'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 
    'stepTime': 0.35, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.575, 'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 
    'stepTime': 0.575, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 0.9125, 'attempts': 1, 'timeIncrement': 0.3375, 
    'increment': 5, 'stepTime': 0.9125, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 1.41875, 'attempts': 1, 'timeIncrement': 0.50625, 
    'increment': 6, 'stepTime': 1.41875, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 2.178125, 'attempts': 1, 'timeIncrement': 0.759375, 
    'increment': 7, 'stepTime': 2.178125, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(STATUS, {
    'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 0.821874999999999, 
    'increment': 8, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.jobs['castSeal_shear-in-X-inte-thin-inc']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:43:34 2019', 
    'jobName': 'castSeal_shear-in-X-inte-thin-inc'})
mdb.models['castSeal'].analyticalFields['shear in X'].setValues(expression=
    '0.1 * Y')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='castSeal_shear-in-X-less', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['castSeal_shear-in-X-less'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-less.odb', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 238884, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-less', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-less']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.1, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.2, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 1.41875, 
    'attempts': 1, 'timeIncrement': 0.50625, 'increment': 6, 
    'stepTime': 1.41875, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 2.178125, 
    'attempts': 1, 'timeIncrement': 0.759375, 'increment': 7, 
    'stepTime': 2.178125, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 3.0, 
    'attempts': 1, 'timeIncrement': 0.821874999999999, 'increment': 8, 
    'stepTime': 3.0, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 17:48:35 2019', 'jobName': 'castSeal_shear-in-X-less'})
mdb.models['castSeal'].analyticalFields['shear in X'].setValues(expression=
    '0.05 * Y')
mdb.jobs['castSeal_shear-in-X-less'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-less.odb', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 278276, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-less', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-less']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.1, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.2, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 1.41875, 
    'attempts': 1, 'timeIncrement': 0.50625, 'increment': 6, 
    'stepTime': 1.41875, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 2.178125, 
    'attempts': 1, 'timeIncrement': 0.759375, 'increment': 7, 
    'stepTime': 2.178125, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 3.0, 
    'attempts': 1, 'timeIncrement': 0.821874999999999, 'increment': 8, 
    'stepTime': 3.0, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 19:02:26 2019', 'jobName': 'castSeal_shear-in-X-less'})
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(42, 
    '\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.jobs['castSeal_shear-in-X-less'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-less.odb', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 279292, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-less', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-less']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.1, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.2, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 1.41875, 
    'attempts': 1, 'timeIncrement': 0.50625, 'increment': 6, 
    'stepTime': 1.41875, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 2.178125, 
    'attempts': 1, 'timeIncrement': 0.759375, 'increment': 7, 
    'stepTime': 2.178125, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 3.0, 
    'attempts': 1, 'timeIncrement': 0.821874999999999, 'increment': 8, 
    'stepTime': 3.0, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 19:03:07 2019', 'jobName': 'castSeal_shear-in-X-less'})
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.001, 
    thicknessField='', thicknessType=UNIFORM)
mdb.jobs['castSeal_shear-in-X-less'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-less.odb', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 284012, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-less', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-less']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.1, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 1, 'stepTime': 0.1, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.2, 
    'attempts': 1, 'timeIncrement': 0.1, 'increment': 2, 'stepTime': 0.2, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.35, 
    'attempts': 1, 'timeIncrement': 0.15, 'increment': 3, 'stepTime': 0.35, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.575, 
    'attempts': 1, 'timeIncrement': 0.225, 'increment': 4, 'stepTime': 0.575, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.9125, 
    'attempts': 1, 'timeIncrement': 0.3375, 'increment': 5, 'stepTime': 0.9125, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 1.41875, 
    'attempts': 1, 'timeIncrement': 0.50625, 'increment': 6, 
    'stepTime': 1.41875, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 2.178125, 
    'attempts': 1, 'timeIncrement': 0.759375, 'increment': 7, 
    'stepTime': 2.178125, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 3.0, 
    'attempts': 1, 'timeIncrement': 0.821874999999999, 'increment': 8, 
    'stepTime': 3.0, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 19:37:35 2019', 'jobName': 'castSeal_shear-in-X-less'})
mdb.models['castSeal'].steps['Step-1'].setValues(initialInc=1.0, maxInc=1.0, 
    minInc=1e-05, timePeriod=1.0)
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.0005, 
    thicknessField='', thicknessType=UNIFORM)
mdb.jobs['castSeal_shear-in-X-less'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-less.odb', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 278708, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-less', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-less']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-less']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 19:39:36 2019', 'jobName': 'castSeal_shear-in-X-less'})
mdb.models['castSeal'].analyticalFields['shear in X'].setValues(expression=
    '0.5 * Y')
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.0001, 
    thicknessField='', thicknessType=UNIFORM)
mdb.jobs['castSeal_shear-in-X-less'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-less.odb', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 286372, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-less', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-less']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.46875, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 4, 
    'stepTime': 0.46875, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.5625, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 5, 
    'stepTime': 0.5625, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.65625, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 6, 
    'stepTime': 0.65625, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.75, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 7, 'stepTime': 0.75, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.75, 
    'attempts': ' 1U', 'timeIncrement': 0.09375, 'increment': 8, 
    'stepTime': 0.75, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.7734375, 
    'attempts': 2, 'timeIncrement': 0.0234375, 'increment': 8, 
    'stepTime': 0.7734375, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.796875, 
    'attempts': 1, 'timeIncrement': 0.0234375, 'increment': 9, 
    'stepTime': 0.796875, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.83203125, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 10, 
    'stepTime': 0.83203125, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {
    'totalTime': 0.884765625, 'attempts': 1, 'timeIncrement': 0.052734375, 
    'increment': 11, 'stepTime': 0.884765625, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {
    'totalTime': 0.9638671875, 'attempts': 1, 'timeIncrement': 0.0791015625, 
    'increment': 12, 'stepTime': 0.9638671875, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0361328125, 'increment': 13, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-less']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(JOB_COMPLETED, {
    'time': 'Sun Feb 10 22:05:18 2019', 'jobName': 'castSeal_shear-in-X-less'})
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(42, 
    '\n*EL PRINT, POSITION=AVERAGED AT NODES, GLOBAL=YES\nDG')
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(41, 
    '\n*Element Output, directions=NO\nLE, PE, PEEQ, PEMAG, S, STH')
mdb.jobs['castSeal_shear-in-X-less'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'in keyword *ELPRINT, file "castSeal_shear-in-X-less.inp", line 7510: Unknown parameter: global. The parameter may be misspelled, obsolete, or invalid.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'UNKNOWN PARAMETER GLOBAL', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-less.odb', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ABORTED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['castSeal'].keywordBlock.replace(42, 
    '\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.jobs['castSeal_shear-in-X-less'].submit(consistencyChecking=OFF)
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\castSeal_shear-in-X-less.odb', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 301004, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'castSeal_shear-in-X-less', 
    'memory': 43.0})
mdb.jobs['castSeal_shear-in-X-less']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.46875, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 4, 
    'stepTime': 0.46875, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.5625, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 5, 
    'stepTime': 0.5625, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.65625, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 6, 
    'stepTime': 0.65625, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.75, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 7, 'stepTime': 0.75, 
    'step': 1, 'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.75, 
    'attempts': ' 1U', 'timeIncrement': 0.09375, 'increment': 8, 
    'stepTime': 0.75, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.7734375, 
    'attempts': 2, 'timeIncrement': 0.0234375, 'increment': 8, 
    'stepTime': 0.7734375, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.796875, 
    'attempts': 1, 'timeIncrement': 0.0234375, 'increment': 9, 
    'stepTime': 0.796875, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 0.83203125, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 10, 
    'stepTime': 0.83203125, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {
    'totalTime': 0.884765625, 'attempts': 1, 'timeIncrement': 0.052734375, 
    'increment': 11, 'stepTime': 0.884765625, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {
    'totalTime': 0.9638671875, 'attempts': 1, 'timeIncrement': 0.0791015625, 
    'increment': 12, 'stepTime': 0.9638671875, 'step': 1, 
    'jobName': 'castSeal_shear-in-X-less', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['castSeal_shear-in-X-less']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0361328125, 'increment': 13, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'castSeal_shear-in-X-less', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['castSeal_shear-in-X-less']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'castSeal_shear-in-X-less'})
mdb.jobs['castSeal_shear-in-X-less']._Message(JOB_COMPLETED, {
    'time': 'Mon Feb 11 00:11:18 2019', 'jobName': 'castSeal_shear-in-X-less'})
mdb.models['plunger'].boundaryConditions['Fix bottom'].suppress()
mdb.models['plunger'].boundaryConditions['pull from top'].suppress()
mdb.models['plunger'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'shear in X', region=Region(
    faces=mdb.models['plunger'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), ), 
    edges=mdb.models['plunger'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    mask=('[#3 ]', ), ), 
    vertices=mdb.models['plunger'].rootAssembly.instances['Part-1-1'].vertices.getSequenceFromMask(
    mask=('[#3 ]', ), )), u1=1.0, u2=0.0, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=
    UNSET)
mdb.models['plunger'].ExpressionField(description='', expression='0.5*Y', 
    localCsys=None, name='AnalyticalField-X')
mdb.models['plunger'].boundaryConditions['shear in X'].setValues(
    distributionType=FIELD, fieldName='AnalyticalField-X')
mdb.models['plunger'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.0001, 
    thicknessField='', thicknessType=UNIFORM)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='plunger', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='plunger_shear-in-X', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['plunger_shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_shear-in-X.odb', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 316344, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X', 'memory': 32.0})
mdb.jobs['plunger_shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'plunger_shear-in-X', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'plunger_shear-in-X', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'plunger_shear-in-X', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.40625, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 3, 
    'stepTime': 0.40625, 'step': 1, 'jobName': 'plunger_shear-in-X', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.546875, 
    'attempts': 1, 'timeIncrement': 0.140625, 'increment': 4, 
    'stepTime': 0.546875, 'step': 1, 'jobName': 'plunger_shear-in-X', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.546875, 
    'attempts': ' 1U', 'timeIncrement': 0.2109375, 'increment': 5, 
    'stepTime': 0.546875, 'step': 1, 'jobName': 'plunger_shear-in-X', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.599609375, 
    'attempts': 2, 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.599609375, 'step': 1, 'jobName': 'plunger_shear-in-X', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.6787109375, 
    'attempts': 1, 'timeIncrement': 0.0791015625, 'increment': 6, 
    'stepTime': 0.6787109375, 'step': 1, 'jobName': 'plunger_shear-in-X', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.7578125, 
    'attempts': 1, 'timeIncrement': 0.0791015625, 'increment': 7, 
    'stepTime': 0.7578125, 'step': 1, 'jobName': 'plunger_shear-in-X', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.8369140625, 
    'attempts': 1, 'timeIncrement': 0.0791015625, 'increment': 8, 
    'stepTime': 0.8369140625, 'step': 1, 'jobName': 'plunger_shear-in-X', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 0.95556640625, 
    'attempts': 1, 'timeIncrement': 0.11865234375, 'increment': 9, 
    'stepTime': 0.95556640625, 'step': 1, 'jobName': 'plunger_shear-in-X', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.04443359375, 'increment': 10, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'plunger_shear-in-X', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['plunger_shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Mon Feb 11 16:56:57 2019', 'jobName': 'plunger_shear-in-X'})
mdb.models['plunger'].analyticalFields['AnalyticalField-X'].setValues(
    expression='0.005*Y')
mdb.jobs['plunger_shear-in-X'].submit(consistencyChecking=OFF)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['plunger_shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X.odb', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 351020, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X', 'memory': 32.0})
mdb.jobs['plunger_shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Mon Feb 11 23:58:12 2019', 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_shear-in-X.odb', 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 263416, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X', 'memory': 32.0})
mdb.jobs['plunger_shear-in-X']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'plunger_shear-in-X'})
mdb.jobs['plunger_shear-in-X']._Message(JOB_COMPLETED, {
    'time': 'Mon Feb 11 23:59:11 2019', 'jobName': 'plunger_shear-in-X'})
mdb.models['plunger'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['plunger'].keywordBlock.replace(34, 
    '\n*Element Output, directions=YES\nLE, PE, PEEQ, PEMAG, S, STH')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='plunger_shear-in-X-cen', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['plunger'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['plunger'].keywordBlock.replace(35, 
    '\n*EL PRINT, POSITION=CENTROID\nDG')
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 370804, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen', 
    'memory': 43.0})
mdb.jobs['plunger_shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 21.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.46875, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 4, 
    'stepTime': 0.46875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.5625, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 5, 
    'stepTime': 0.5625, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.65625, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 6, 
    'stepTime': 0.65625, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.75, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 7, 'stepTime': 0.75, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.75, 
    'attempts': ' 1U', 'timeIncrement': 0.09375, 'increment': 8, 
    'stepTime': 0.75, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.7734375, 
    'attempts': 2, 'timeIncrement': 0.0234375, 'increment': 8, 
    'stepTime': 0.7734375, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.796875, 
    'attempts': 1, 'timeIncrement': 0.0234375, 'increment': 9, 
    'stepTime': 0.796875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.83203125, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 10, 
    'stepTime': 0.83203125, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.884765625, 
    'attempts': 1, 'timeIncrement': 0.052734375, 'increment': 11, 
    'stepTime': 0.884765625, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.9638671875, 
    'attempts': 1, 'timeIncrement': 0.0791015625, 'increment': 12, 
    'stepTime': 0.9638671875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0361328125, 'increment': 13, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['plunger_shear-in-X-cen']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 12 02:38:35 2019', 'jobName': 'plunger_shear-in-X-cen'})
mdb.models['plunger'].analyticalFields['AnalyticalField-X'].setValues(
    expression='0.05*Y')
mdb.models['plunger'].keywordBlock.synchVersions(storeNodesAndElements=False)
del mdb.jobs['plunger_shear-in-X-cen']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='plunger', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='plunger_shear-in-X-cen', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 372812, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 12 02:41:37 2019', 'jobName': 'plunger_shear-in-X-cen'})
mdb.models['plunger'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['plunger'].keywordBlock.replace(35, 
    '\n*EL PRINT, POSITION=CENTROID\nDG\n*EL FILE, DIRECTIONS=YES')
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 368744, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 12 02:44:50 2019', 'jobName': 'plunger_shear-in-X-cen'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['plunger'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, poisson=0.0, poissonDefinition=VALUE, 
    preIntegrate=OFF, thickness=0.0001, thicknessField='', thicknessType=
    UNIFORM)
mdb.models['plunger'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['plunger'].keywordBlock.replace(35, 
    '\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.models['plunger'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['plunger'].keywordBlock.replace(35, 
    '\n*EL PRINT, POSITION=CENTROID\nDG')
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 448764, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 12 16:36:08 2019', 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(ERROR, {
    'message': 'Error checking out Abaqus license.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_ABORTED, {
    'message': 'Error checking out Abaqus license.', 
    'jobName': 'plunger_shear-in-X-cen'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 483348, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 12 21:53:50 2019', 'jobName': 'plunger_shear-in-X-cen'})
mdb.models['plunger'].steps['Step-1'].setValues(initialInc=0.0001, maxInc=3.0, 
    minInc=3e-05, timePeriod=3.0)
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 478748, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 1, 'stepTime': 0.0001, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0002, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 2, 'stepTime': 0.0002, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.00035, 
    'attempts': 1, 'timeIncrement': 0.00015, 'increment': 3, 
    'stepTime': 0.00035, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.000575, 
    'attempts': 1, 'timeIncrement': 0.000225, 'increment': 4, 
    'stepTime': 0.000575, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0009125, 
    'attempts': 1, 'timeIncrement': 0.0003375, 'increment': 5, 
    'stepTime': 0.0009125, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.00141875, 
    'attempts': 1, 'timeIncrement': 0.00050625, 'increment': 6, 
    'stepTime': 0.00141875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.002178125, 
    'attempts': 1, 'timeIncrement': 0.000759375, 'increment': 7, 
    'stepTime': 0.002178125, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0033171875, 
    'attempts': 1, 'timeIncrement': 0.0011390625, 'increment': 8, 
    'stepTime': 0.0033171875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.00502578125, 'attempts': 1, 'timeIncrement': 0.00170859375, 
    'increment': 9, 'stepTime': 0.00502578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.007588671875, 'attempts': 1, 
    'timeIncrement': 0.002562890625, 'increment': 10, 
    'stepTime': 0.007588671875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0114330078125, 'attempts': 1, 
    'timeIncrement': 0.0038443359375, 'increment': 11, 
    'stepTime': 0.0114330078125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.01719951171875, 'attempts': 1, 
    'timeIncrement': 0.00576650390625, 'increment': 12, 
    'stepTime': 0.01719951171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.025849267578125, 'attempts': 1, 
    'timeIncrement': 0.008649755859375, 'increment': 13, 
    'stepTime': 0.025849267578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0388239013671875, 'attempts': 1, 
    'timeIncrement': 0.0129746337890625, 'increment': 14, 
    'stepTime': 0.0388239013671875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0582858520507812, 'attempts': 1, 
    'timeIncrement': 0.0194619506835938, 'increment': 15, 
    'stepTime': 0.0582858520507812, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0874787780761719, 'attempts': 1, 
    'timeIncrement': 0.0291929260253906, 'increment': 16, 
    'stepTime': 0.0874787780761719, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.131268167114258, 'attempts': 1, 
    'timeIncrement': 0.0437893890380859, 'increment': 17, 
    'stepTime': 0.131268167114258, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.196952250671387, 'attempts': 1, 
    'timeIncrement': 0.0656840835571289, 'increment': 18, 
    'stepTime': 0.196952250671387, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.29547837600708, 'attempts': 1, 
    'timeIncrement': 0.0985261253356934, 'increment': 19, 
    'stepTime': 0.29547837600708, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.44326756401062, 'attempts': 1, 
    'timeIncrement': 0.14778918800354, 'increment': 20, 
    'stepTime': 0.44326756401062, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.66495134601593, 'attempts': 1, 
    'timeIncrement': 0.22168378200531, 'increment': 21, 
    'stepTime': 0.66495134601593, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.997477019023895, 'attempts': 1, 
    'timeIncrement': 0.332525673007965, 'increment': 22, 
    'stepTime': 0.997477019023895, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 23, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 1.49626552853584, 'attempts': 1, 
    'timeIncrement': 0.498788509511948, 'increment': 23, 
    'stepTime': 1.49626552853584, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 24, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 2.24444829280376, 'attempts': 1, 
    'timeIncrement': 0.748182764267921, 'increment': 24, 
    'stepTime': 2.24444829280376, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 25, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 3.0, 
    'attempts': 1, 'timeIncrement': 0.755551707196236, 'increment': 25, 
    'stepTime': 3.0, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 12 21:56:28 2019', 'jobName': 'plunger_shear-in-X-cen'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='test', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='C:\\AbaqusTemp\\stress_DG.for', waitHours=0, 
    waitMinutes=0)
mdb.models['plunger'].Material(name='Material-2')
mdb.models['plunger'].materials['Material-2'].UserMaterial(mechanicalConstants=
    (344828000.0, 3e-10))
mdb.models['plunger'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Material-2', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.0001, 
    thicknessField='', thicknessType=UNIFORM)
mdb.jobs['test'].submit(consistencyChecking=OFF)
mdb.jobs['test']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'test'})
mdb.jobs['test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'test'})
mdb.jobs['test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'test'})
mdb.jobs['test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'test'})
mdb.jobs['test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'test'})
mdb.jobs['test']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'test'})
mdb.jobs['test']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\test.odb', 'jobName': 'test'})
mdb.jobs['test']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'test'})
mdb.jobs['test']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 480780, 'jobName': 'test'})
mdb.jobs['test']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'test'})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'test'})
mdb.jobs['test']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'test', 'memory': 43.0})
mdb.jobs['test']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'test'})
mdb.jobs['test']._Message(MINIMUM_MEMORY, {'minimum_memory': 21.0, 
    'phase': STANDARD_PHASE, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.25, 'attempts': 2, 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.25, 'attempts': ' 1U', 
    'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.3125, 'attempts': 2, 
    'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'equilibrium': 4})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.375, 'attempts': 1, 
    'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.375, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.46875, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 4, 'stepTime': 0.46875, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.5625, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 5, 'stepTime': 0.5625, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 7, 'phase': STANDARD_PHASE, 
    'equilibrium': 7})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.65625, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 6, 'stepTime': 0.65625, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'equilibrium': 5})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.75, 'attempts': 1, 
    'timeIncrement': 0.09375, 'increment': 7, 'stepTime': 0.75, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'equilibrium': 6})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.75, 'attempts': ' 1U', 
    'timeIncrement': 0.09375, 'increment': 8, 'stepTime': 0.75, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 
    'equilibrium': 8})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.7734375, 'attempts': 2, 
    'timeIncrement': 0.0234375, 'increment': 8, 'stepTime': 0.7734375, 
    'step': 1, 'jobName': 'test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.796875, 'attempts': 1, 
    'timeIncrement': 0.0234375, 'increment': 9, 'stepTime': 0.796875, 
    'step': 1, 'jobName': 'test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.83203125, 'attempts': 1, 
    'timeIncrement': 0.03515625, 'increment': 10, 'stepTime': 0.83203125, 
    'step': 1, 'jobName': 'test', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.884765625, 'attempts': 1, 
    'timeIncrement': 0.052734375, 'increment': 11, 'stepTime': 0.884765625, 
    'step': 1, 'jobName': 'test', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 0.9638671875, 'attempts': 1, 
    'timeIncrement': 0.0791015625, 'increment': 12, 'stepTime': 0.9638671875, 
    'step': 1, 'jobName': 'test', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['test']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'test'})
mdb.jobs['test']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 0.0361328125, 'increment': 13, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'test', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['test']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'test'})
mdb.jobs['test']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'test'})
mdb.jobs['test']._Message(JOB_COMPLETED, {'time': 'Tue Feb 12 21:58:50 2019', 
    'jobName': 'test'})
del mdb.jobs['test']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='plunger', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-20', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='C:\\AbaqusTemp\\stress_DG.for', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-20'].submit(consistencyChecking=OFF)
mdb.jobs['Job-20']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '728 elements have zero transvere shear stiffness. The elements have been identified in element set ErrElemZeroTransShearStiff.', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\Job-20.odb', 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-20'})
mdb.models['plunger'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Material-2', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.0001, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['plunger'].sections['Section-1'].TransverseShearShell(k11=57471300.0
    , k12=0.0, k22=57471300.0)
mdb.jobs['Job-20'].submit(consistencyChecking=OFF)
mdb.jobs['Job-20']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\Job-20.odb', 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 482828, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-20', 'memory': 32.0})
mdb.jobs['Job-20']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(STATUS, {'totalTime': 0.0001, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 1, 'stepTime': 0.0001, 'step': 1, 
    'jobName': 'Job-20', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 485888, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'USER SUBROUTINE UMAT IS MISSING', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-21', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-21'].submit(consistencyChecking=OFF)
mdb.jobs['Job-20']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(STATUS, {'totalTime': 0.0002, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 2, 'stepTime': 0.0002, 'step': 1, 
    'jobName': 'Job-20', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-21']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 41 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\Job-21.odb', 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 485864, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-21', 'memory': 27.0})
mdb.jobs['Job-21']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-21', 'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'equilibrium': 3})
mdb.jobs['Job-21']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(JOB_COMPLETED, {'time': 'Tue Feb 12 22:02:20 2019', 
    'jobName': 'Job-21'})
del mdb.jobs['Job-21']
mdb.jobs['Job-20']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(STATUS, {'totalTime': 0.00035, 'attempts': 1, 
    'timeIncrement': 0.00015, 'increment': 3, 'stepTime': 0.00035, 'step': 1, 
    'jobName': 'Job-20', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='plunger', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-21', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='C:\\AbaqusTemp\\stress_DG.for', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-21'].submit(consistencyChecking=OFF)
mdb.jobs['Job-21']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\Job-21.odb', 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 473204, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-21'})
mdb.jobs['Job-20']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-20'})
mdb.jobs['Job-20']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-20'})
mdb.jobs['Job-21']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-21', 'memory': 32.0})
mdb.jobs['Job-21']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.0001, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 1, 'stepTime': 0.0001, 'step': 1, 
    'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.0002, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 2, 'stepTime': 0.0002, 'step': 1, 
    'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.models['castSeal'].Material(name='Material-2')
mdb.models['castSeal'].materials['Material-2'].UserMaterial(
    mechanicalConstants=(344828000.0, 3e-10))
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Material-2', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.0001, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['castSeal'].sections['Section-1'].TransverseShearShell(k11=
    57471300.0, k12=0.0, k22=57471300.0)
del mdb.jobs['Job-20']
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.00035, 'attempts': 1, 
    'timeIncrement': 0.00015, 'increment': 3, 'stepTime': 0.00035, 'step': 1, 
    'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='castSeal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-22', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='C:\\AbaqusTemp\\stress_DG.for', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-22'].submit(consistencyChecking=OFF)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\Job-22.odb', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 485816, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.000575, 'attempts': 1, 
    'timeIncrement': 0.000225, 'increment': 4, 'stepTime': 0.000575, 'step': 1, 
    'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.0009125, 'attempts': 1, 
    'timeIncrement': 0.0003375, 'increment': 5, 'stepTime': 0.0009125, 
    'step': 1, 'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22'].submit(consistencyChecking=OFF)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\Job-22.odb', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 463000, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22'].submit(consistencyChecking=OFF)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '3 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\Job-22.odb', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 483192, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.00141875, 'attempts': 1, 
    'timeIncrement': 0.00050625, 'increment': 6, 'stepTime': 0.00141875, 
    'step': 1, 'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.002178125, 'attempts': 1, 
    'timeIncrement': 0.000759375, 'increment': 7, 'stepTime': 0.002178125, 
    'step': 1, 'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.0033171875, 'attempts': 1, 
    'timeIncrement': 0.0011390625, 'increment': 8, 'stepTime': 0.0033171875, 
    'step': 1, 'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.00502578125, 'attempts': 1, 
    'timeIncrement': 0.00170859375, 'increment': 9, 'stepTime': 0.00502578125, 
    'step': 1, 'jobName': 'Job-21', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.007588671875, 
    'attempts': 1, 'timeIncrement': 0.002562890625, 'increment': 10, 
    'stepTime': 0.007588671875, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.0114330078125, 
    'attempts': 1, 'timeIncrement': 0.0038443359375, 'increment': 11, 
    'stepTime': 0.0114330078125, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.01719951171875, 
    'attempts': 1, 'timeIncrement': 0.00576650390625, 'increment': 12, 
    'stepTime': 0.01719951171875, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.025849267578125, 
    'attempts': 1, 'timeIncrement': 0.008649755859375, 'increment': 13, 
    'stepTime': 0.025849267578125, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.0388239013671875, 
    'attempts': 1, 'timeIncrement': 0.0129746337890625, 'increment': 14, 
    'stepTime': 0.0388239013671875, 'step': 1, 'jobName': 'Job-21', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.0582858520507812, 
    'attempts': 1, 'timeIncrement': 0.0194619506835938, 'increment': 15, 
    'stepTime': 0.0582858520507812, 'step': 1, 'jobName': 'Job-21', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.0874787780761719, 
    'attempts': 1, 'timeIncrement': 0.0291929260253906, 'increment': 16, 
    'stepTime': 0.0874787780761719, 'step': 1, 'jobName': 'Job-21', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.131268167114258, 
    'attempts': 1, 'timeIncrement': 0.0437893890380859, 'increment': 17, 
    'stepTime': 0.131268167114258, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.196952250671387, 
    'attempts': 1, 'timeIncrement': 0.0656840835571289, 'increment': 18, 
    'stepTime': 0.196952250671387, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.29547837600708, 
    'attempts': 1, 'timeIncrement': 0.0985261253356934, 'increment': 19, 
    'stepTime': 0.29547837600708, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.44326756401062, 
    'attempts': 1, 'timeIncrement': 0.14778918800354, 'increment': 20, 
    'stepTime': 0.44326756401062, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.66495134601593, 
    'attempts': 1, 'timeIncrement': 0.22168378200531, 'increment': 21, 
    'stepTime': 0.66495134601593, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 0.997477019023895, 
    'attempts': 1, 'timeIncrement': 0.332525673007965, 'increment': 22, 
    'stepTime': 0.997477019023895, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 1.49626552853584, 
    'attempts': 1, 'timeIncrement': 0.498788509511948, 'increment': 23, 
    'stepTime': 1.49626552853584, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 2.24444829280376, 
    'attempts': 1, 'timeIncrement': 0.748182764267921, 'increment': 24, 
    'stepTime': 2.24444829280376, 'step': 1, 'jobName': 'Job-21', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-21']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.755551707196236, 'increment': 25, 'stepTime': 3.0, 
    'step': 1, 'jobName': 'Job-21', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['Job-21']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-21'})
mdb.jobs['Job-21']._Message(JOB_COMPLETED, {'time': 'Tue Feb 12 22:23:47 2019', 
    'jobName': 'Job-21'})
del mdb.jobs['Job-22']
mdb.models['castSeal'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.0001, 
    thicknessField='', thicknessType=UNIFORM)
del mdb.models['castSeal'].sections['Section-1'].transverseShear
mdb.models['plunger'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.0001, 
    thicknessField='', thicknessType=UNIFORM)
del mdb.models['plunger'].sections['Section-1'].transverseShear
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 494132, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 1, 'stepTime': 0.0001, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0002, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 2, 'stepTime': 0.0002, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.00035, 
    'attempts': 1, 'timeIncrement': 0.00015, 'increment': 3, 
    'stepTime': 0.00035, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.000575, 
    'attempts': 1, 'timeIncrement': 0.000225, 'increment': 4, 
    'stepTime': 0.000575, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0009125, 
    'attempts': 1, 'timeIncrement': 0.0003375, 'increment': 5, 
    'stepTime': 0.0009125, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.00141875, 
    'attempts': 1, 'timeIncrement': 0.00050625, 'increment': 6, 
    'stepTime': 0.00141875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.002178125, 
    'attempts': 1, 'timeIncrement': 0.000759375, 'increment': 7, 
    'stepTime': 0.002178125, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0033171875, 
    'attempts': 1, 'timeIncrement': 0.0011390625, 'increment': 8, 
    'stepTime': 0.0033171875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.00502578125, 'attempts': 1, 'timeIncrement': 0.00170859375, 
    'increment': 9, 'stepTime': 0.00502578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.007588671875, 'attempts': 1, 
    'timeIncrement': 0.002562890625, 'increment': 10, 
    'stepTime': 0.007588671875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0114330078125, 'attempts': 1, 
    'timeIncrement': 0.0038443359375, 'increment': 11, 
    'stepTime': 0.0114330078125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.01719951171875, 'attempts': 1, 
    'timeIncrement': 0.00576650390625, 'increment': 12, 
    'stepTime': 0.01719951171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.025849267578125, 'attempts': 1, 
    'timeIncrement': 0.008649755859375, 'increment': 13, 
    'stepTime': 0.025849267578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0388239013671875, 'attempts': 1, 
    'timeIncrement': 0.0129746337890625, 'increment': 14, 
    'stepTime': 0.0388239013671875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0582858520507812, 'attempts': 1, 
    'timeIncrement': 0.0194619506835938, 'increment': 15, 
    'stepTime': 0.0582858520507812, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0874787780761719, 'attempts': 1, 
    'timeIncrement': 0.0291929260253906, 'increment': 16, 
    'stepTime': 0.0874787780761719, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.131268167114258, 'attempts': 1, 
    'timeIncrement': 0.0437893890380859, 'increment': 17, 
    'stepTime': 0.131268167114258, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.196952250671387, 'attempts': 1, 
    'timeIncrement': 0.0656840835571289, 'increment': 18, 
    'stepTime': 0.196952250671387, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.29547837600708, 'attempts': 1, 
    'timeIncrement': 0.0985261253356934, 'increment': 19, 
    'stepTime': 0.29547837600708, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.44326756401062, 'attempts': 1, 
    'timeIncrement': 0.14778918800354, 'increment': 20, 
    'stepTime': 0.44326756401062, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.66495134601593, 'attempts': 1, 
    'timeIncrement': 0.22168378200531, 'increment': 21, 
    'stepTime': 0.66495134601593, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.997477019023895, 'attempts': 1, 
    'timeIncrement': 0.332525673007965, 'increment': 22, 
    'stepTime': 0.997477019023895, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 23, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 1.49626552853584, 'attempts': 1, 
    'timeIncrement': 0.498788509511948, 'increment': 23, 
    'stepTime': 1.49626552853584, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 24, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 2.24444829280376, 'attempts': 1, 
    'timeIncrement': 0.748182764267921, 'increment': 24, 
    'stepTime': 2.24444829280376, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 25, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 3.0, 
    'attempts': 1, 'timeIncrement': 0.755551707196236, 'increment': 25, 
    'stepTime': 3.0, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 12 23:50:15 2019', 'jobName': 'plunger_shear-in-X-cen'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='plunger', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='plunger_shear-in-X-cen-thickness', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['plunger'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, thickness=0.0001, thicknessField='', thicknessType=
    UNIFORM)
mdb.jobs['plunger_shear-in-X-cen-thickness'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen-thickness.odb', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 475132, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen-thickness', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0001, 'attempts': 1, 'timeIncrement': 0.0001, 
    'increment': 1, 'stepTime': 0.0001, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0002, 'attempts': 1, 'timeIncrement': 0.0001, 
    'increment': 2, 'stepTime': 0.0002, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.00035, 'attempts': 1, 'timeIncrement': 0.00015, 
    'increment': 3, 'stepTime': 0.00035, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.000575, 'attempts': 1, 'timeIncrement': 0.000225, 
    'increment': 4, 'stepTime': 0.000575, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0009125, 'attempts': 1, 'timeIncrement': 0.0003375, 
    'increment': 5, 'stepTime': 0.0009125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.00141875, 'attempts': 1, 'timeIncrement': 0.00050625, 
    'increment': 6, 'stepTime': 0.00141875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.002178125, 'attempts': 1, 'timeIncrement': 0.000759375, 
    'increment': 7, 'stepTime': 0.002178125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0033171875, 'attempts': 1, 'timeIncrement': 0.0011390625, 
    'increment': 8, 'stepTime': 0.0033171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.00502578125, 'attempts': 1, 'timeIncrement': 0.00170859375, 
    'increment': 9, 'stepTime': 0.00502578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.007588671875, 'attempts': 1, 
    'timeIncrement': 0.002562890625, 'increment': 10, 
    'stepTime': 0.007588671875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0114330078125, 'attempts': 1, 
    'timeIncrement': 0.0038443359375, 'increment': 11, 
    'stepTime': 0.0114330078125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.01719951171875, 'attempts': 1, 
    'timeIncrement': 0.00576650390625, 'increment': 12, 
    'stepTime': 0.01719951171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.025849267578125, 'attempts': 1, 
    'timeIncrement': 0.008649755859375, 'increment': 13, 
    'stepTime': 0.025849267578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0388239013671875, 'attempts': 1, 
    'timeIncrement': 0.0129746337890625, 'increment': 14, 
    'stepTime': 0.0388239013671875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0582858520507812, 'attempts': 1, 
    'timeIncrement': 0.0194619506835938, 'increment': 15, 
    'stepTime': 0.0582858520507812, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0874787780761719, 'attempts': 1, 
    'timeIncrement': 0.0291929260253906, 'increment': 16, 
    'stepTime': 0.0874787780761719, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.131268167114258, 'attempts': 1, 
    'timeIncrement': 0.0437893890380859, 'increment': 17, 
    'stepTime': 0.131268167114258, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.196952250671387, 'attempts': 1, 
    'timeIncrement': 0.0656840835571289, 'increment': 18, 
    'stepTime': 0.196952250671387, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.29547837600708, 'attempts': 1, 
    'timeIncrement': 0.0985261253356934, 'increment': 19, 
    'stepTime': 0.29547837600708, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.44326756401062, 'attempts': 1, 
    'timeIncrement': 0.14778918800354, 'increment': 20, 
    'stepTime': 0.44326756401062, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.66495134601593, 'attempts': 1, 
    'timeIncrement': 0.22168378200531, 'increment': 21, 
    'stepTime': 0.66495134601593, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.997477019023895, 'attempts': 1, 
    'timeIncrement': 0.332525673007965, 'increment': 22, 
    'stepTime': 0.997477019023895, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 23, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 1.49626552853584, 'attempts': 1, 
    'timeIncrement': 0.498788509511948, 'increment': 23, 
    'stepTime': 1.49626552853584, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 24, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 2.24444829280376, 'attempts': 1, 
    'timeIncrement': 0.748182764267921, 'increment': 24, 
    'stepTime': 2.24444829280376, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 25, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 0.755551707196236, 
    'increment': 25, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(JOB_COMPLETED, {
    'time': 'Tue Feb 12 23:53:01 2019', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['plunger'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['plunger'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['plunger'].parts['Part-1'].sectionAssignments[0].suppress()
mdb.models['plunger'].rootAssembly.regenerate()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='plunger', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-22', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['Job-22'].submit(consistencyChecking=OFF)
mdb.jobs['Job-22']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\Job-22.odb', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 583444, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-22', 'memory': 32.0})
mdb.jobs['Job-22']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.0001, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 1, 'stepTime': 0.0001, 'step': 1, 
    'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-22']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 2, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.0002, 'attempts': 1, 
    'timeIncrement': 0.0001, 'increment': 2, 'stepTime': 0.0002, 'step': 1, 
    'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-22']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 3, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.00035, 'attempts': 1, 
    'timeIncrement': 0.00015, 'increment': 3, 'stepTime': 0.00035, 'step': 1, 
    'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 4, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.000575, 'attempts': 1, 
    'timeIncrement': 0.000225, 'increment': 4, 'stepTime': 0.000575, 'step': 1, 
    'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 5, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.0009125, 'attempts': 1, 
    'timeIncrement': 0.0003375, 'increment': 5, 'stepTime': 0.0009125, 
    'step': 1, 'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 6, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.00141875, 'attempts': 1, 
    'timeIncrement': 0.00050625, 'increment': 6, 'stepTime': 0.00141875, 
    'step': 1, 'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 7, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.002178125, 'attempts': 1, 
    'timeIncrement': 0.000759375, 'increment': 7, 'stepTime': 0.002178125, 
    'step': 1, 'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 8, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.0033171875, 'attempts': 1, 
    'timeIncrement': 0.0011390625, 'increment': 8, 'stepTime': 0.0033171875, 
    'step': 1, 'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 9, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.00502578125, 'attempts': 1, 
    'timeIncrement': 0.00170859375, 'increment': 9, 'stepTime': 0.00502578125, 
    'step': 1, 'jobName': 'Job-22', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 10, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.007588671875, 
    'attempts': 1, 'timeIncrement': 0.002562890625, 'increment': 10, 
    'stepTime': 0.007588671875, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 11, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.0114330078125, 
    'attempts': 1, 'timeIncrement': 0.0038443359375, 'increment': 11, 
    'stepTime': 0.0114330078125, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 12, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.01719951171875, 
    'attempts': 1, 'timeIncrement': 0.00576650390625, 'increment': 12, 
    'stepTime': 0.01719951171875, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 13, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.025849267578125, 
    'attempts': 1, 'timeIncrement': 0.008649755859375, 'increment': 13, 
    'stepTime': 0.025849267578125, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 14, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.0388239013671875, 
    'attempts': 1, 'timeIncrement': 0.0129746337890625, 'increment': 14, 
    'stepTime': 0.0388239013671875, 'step': 1, 'jobName': 'Job-22', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 15, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.0582858520507812, 
    'attempts': 1, 'timeIncrement': 0.0194619506835938, 'increment': 15, 
    'stepTime': 0.0582858520507812, 'step': 1, 'jobName': 'Job-22', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 16, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.0874787780761719, 
    'attempts': 1, 'timeIncrement': 0.0291929260253906, 'increment': 16, 
    'stepTime': 0.0874787780761719, 'step': 1, 'jobName': 'Job-22', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 17, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.131268167114258, 
    'attempts': 1, 'timeIncrement': 0.0437893890380859, 'increment': 17, 
    'stepTime': 0.131268167114258, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 18, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.196952250671387, 
    'attempts': 1, 'timeIncrement': 0.0656840835571289, 'increment': 18, 
    'stepTime': 0.196952250671387, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 19, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.29547837600708, 
    'attempts': 1, 'timeIncrement': 0.0985261253356934, 'increment': 19, 
    'stepTime': 0.29547837600708, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 20, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.44326756401062, 
    'attempts': 1, 'timeIncrement': 0.14778918800354, 'increment': 20, 
    'stepTime': 0.44326756401062, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 21, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.66495134601593, 
    'attempts': 1, 'timeIncrement': 0.22168378200531, 'increment': 21, 
    'stepTime': 0.66495134601593, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 22, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 0.997477019023895, 
    'attempts': 1, 'timeIncrement': 0.332525673007965, 'increment': 22, 
    'stepTime': 0.997477019023895, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 23, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 1.49626552853584, 
    'attempts': 1, 'timeIncrement': 0.498788509511948, 'increment': 23, 
    'stepTime': 1.49626552853584, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 24, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 2.24444829280376, 
    'attempts': 1, 'timeIncrement': 0.748182764267921, 'increment': 24, 
    'stepTime': 2.24444829280376, 'step': 1, 'jobName': 'Job-22', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-22']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 25, 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(STATUS, {'totalTime': 3.0, 'attempts': 1, 
    'timeIncrement': 0.755551707196236, 'increment': 25, 'stepTime': 3.0, 
    'step': 1, 'jobName': 'Job-22', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['Job-22']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-22'})
mdb.jobs['Job-22']._Message(JOB_COMPLETED, {'time': 'Wed Feb 13 15:26:17 2019', 
    'jobName': 'Job-22'})
mdb.models['plunger'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, poisson=0.0, poissonDefinition=VALUE, 
    preIntegrate=OFF, thickness=0.0001, thicknessField='', thicknessType=
    UNIFORM)
mdb.jobs['plunger_shear-in-X-cen'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen.odb', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 591752, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0001, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 1, 'stepTime': 0.0001, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0002, 
    'attempts': 1, 'timeIncrement': 0.0001, 'increment': 2, 'stepTime': 0.0002, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.00035, 
    'attempts': 1, 'timeIncrement': 0.00015, 'increment': 3, 
    'stepTime': 0.00035, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.000575, 
    'attempts': 1, 'timeIncrement': 0.000225, 'increment': 4, 
    'stepTime': 0.000575, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0009125, 
    'attempts': 1, 'timeIncrement': 0.0003375, 'increment': 5, 
    'stepTime': 0.0009125, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.00141875, 
    'attempts': 1, 'timeIncrement': 0.00050625, 'increment': 6, 
    'stepTime': 0.00141875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.002178125, 
    'attempts': 1, 'timeIncrement': 0.000759375, 'increment': 7, 
    'stepTime': 0.002178125, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 0.0033171875, 
    'attempts': 1, 'timeIncrement': 0.0011390625, 'increment': 8, 
    'stepTime': 0.0033171875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.00502578125, 'attempts': 1, 'timeIncrement': 0.00170859375, 
    'increment': 9, 'stepTime': 0.00502578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.007588671875, 'attempts': 1, 
    'timeIncrement': 0.002562890625, 'increment': 10, 
    'stepTime': 0.007588671875, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0114330078125, 'attempts': 1, 
    'timeIncrement': 0.0038443359375, 'increment': 11, 
    'stepTime': 0.0114330078125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.01719951171875, 'attempts': 1, 
    'timeIncrement': 0.00576650390625, 'increment': 12, 
    'stepTime': 0.01719951171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.025849267578125, 'attempts': 1, 
    'timeIncrement': 0.008649755859375, 'increment': 13, 
    'stepTime': 0.025849267578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0388239013671875, 'attempts': 1, 
    'timeIncrement': 0.0129746337890625, 'increment': 14, 
    'stepTime': 0.0388239013671875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0582858520507812, 'attempts': 1, 
    'timeIncrement': 0.0194619506835938, 'increment': 15, 
    'stepTime': 0.0582858520507812, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.0874787780761719, 'attempts': 1, 
    'timeIncrement': 0.0291929260253906, 'increment': 16, 
    'stepTime': 0.0874787780761719, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.131268167114258, 'attempts': 1, 
    'timeIncrement': 0.0437893890380859, 'increment': 17, 
    'stepTime': 0.131268167114258, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.196952250671387, 'attempts': 1, 
    'timeIncrement': 0.0656840835571289, 'increment': 18, 
    'stepTime': 0.196952250671387, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.29547837600708, 'attempts': 1, 
    'timeIncrement': 0.0985261253356934, 'increment': 19, 
    'stepTime': 0.29547837600708, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.44326756401062, 'attempts': 1, 
    'timeIncrement': 0.14778918800354, 'increment': 20, 
    'stepTime': 0.44326756401062, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.66495134601593, 'attempts': 1, 
    'timeIncrement': 0.22168378200531, 'increment': 21, 
    'stepTime': 0.66495134601593, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 0.997477019023895, 'attempts': 1, 
    'timeIncrement': 0.332525673007965, 'increment': 22, 
    'stepTime': 0.997477019023895, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 23, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 1.49626552853584, 'attempts': 1, 
    'timeIncrement': 0.498788509511948, 'increment': 23, 
    'stepTime': 1.49626552853584, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 24, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {
    'totalTime': 2.24444829280376, 'attempts': 1, 
    'timeIncrement': 0.748182764267921, 'increment': 24, 
    'stepTime': 2.24444829280376, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 25, 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(STATUS, {'totalTime': 3.0, 
    'attempts': 1, 'timeIncrement': 0.755551707196236, 'increment': 25, 
    'stepTime': 3.0, 'step': 1, 'jobName': 'plunger_shear-in-X-cen', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen'})
mdb.jobs['plunger_shear-in-X-cen']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 13 17:07:29 2019', 'jobName': 'plunger_shear-in-X-cen'})
mdb.models['plunger'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, thickness=0.0001, thicknessField='', thicknessType=
    UNIFORM)
mdb.jobs['plunger_shear-in-X-cen-thickness'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen-thickness.odb', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 594744, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen-thickness', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0001, 'attempts': 1, 'timeIncrement': 0.0001, 
    'increment': 1, 'stepTime': 0.0001, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0002, 'attempts': 1, 'timeIncrement': 0.0001, 
    'increment': 2, 'stepTime': 0.0002, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.00035, 'attempts': 1, 'timeIncrement': 0.00015, 
    'increment': 3, 'stepTime': 0.00035, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.000575, 'attempts': 1, 'timeIncrement': 0.000225, 
    'increment': 4, 'stepTime': 0.000575, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0009125, 'attempts': 1, 'timeIncrement': 0.0003375, 
    'increment': 5, 'stepTime': 0.0009125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.00141875, 'attempts': 1, 'timeIncrement': 0.00050625, 
    'increment': 6, 'stepTime': 0.00141875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.002178125, 'attempts': 1, 'timeIncrement': 0.000759375, 
    'increment': 7, 'stepTime': 0.002178125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0033171875, 'attempts': 1, 'timeIncrement': 0.0011390625, 
    'increment': 8, 'stepTime': 0.0033171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.00502578125, 'attempts': 1, 'timeIncrement': 0.00170859375, 
    'increment': 9, 'stepTime': 0.00502578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.007588671875, 'attempts': 1, 
    'timeIncrement': 0.002562890625, 'increment': 10, 
    'stepTime': 0.007588671875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0114330078125, 'attempts': 1, 
    'timeIncrement': 0.0038443359375, 'increment': 11, 
    'stepTime': 0.0114330078125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.01719951171875, 'attempts': 1, 
    'timeIncrement': 0.00576650390625, 'increment': 12, 
    'stepTime': 0.01719951171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.025849267578125, 'attempts': 1, 
    'timeIncrement': 0.008649755859375, 'increment': 13, 
    'stepTime': 0.025849267578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0388239013671875, 'attempts': 1, 
    'timeIncrement': 0.0129746337890625, 'increment': 14, 
    'stepTime': 0.0388239013671875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0582858520507812, 'attempts': 1, 
    'timeIncrement': 0.0194619506835938, 'increment': 15, 
    'stepTime': 0.0582858520507812, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.0874787780761719, 'attempts': 1, 
    'timeIncrement': 0.0291929260253906, 'increment': 16, 
    'stepTime': 0.0874787780761719, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.131268167114258, 'attempts': 1, 
    'timeIncrement': 0.0437893890380859, 'increment': 17, 
    'stepTime': 0.131268167114258, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.196952250671387, 'attempts': 1, 
    'timeIncrement': 0.0656840835571289, 'increment': 18, 
    'stepTime': 0.196952250671387, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.29547837600708, 'attempts': 1, 
    'timeIncrement': 0.0985261253356934, 'increment': 19, 
    'stepTime': 0.29547837600708, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.44326756401062, 'attempts': 1, 
    'timeIncrement': 0.14778918800354, 'increment': 20, 
    'stepTime': 0.44326756401062, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.66495134601593, 'attempts': 1, 
    'timeIncrement': 0.22168378200531, 'increment': 21, 
    'stepTime': 0.66495134601593, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 0.997477019023895, 'attempts': 1, 
    'timeIncrement': 0.332525673007965, 'increment': 22, 
    'stepTime': 0.997477019023895, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 23, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 1.49626552853584, 'attempts': 1, 
    'timeIncrement': 0.498788509511948, 'increment': 23, 
    'stepTime': 1.49626552853584, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 24, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 2.24444829280376, 'attempts': 1, 
    'timeIncrement': 0.748182764267921, 'increment': 24, 
    'stepTime': 2.24444829280376, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 25, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(STATUS, {
    'totalTime': 3.0, 'attempts': 1, 'timeIncrement': 0.755551707196236, 
    'increment': 25, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
mdb.jobs['plunger_shear-in-X-cen-thickness']._Message(JOB_COMPLETED, {
    'time': 'Wed Feb 13 17:07:58 2019', 
    'jobName': 'plunger_shear-in-X-cen-thickness'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['plunger'].boundaryConditions['shear in X'].setValues(ur1=0.0, ur2=
    0.0, ur3=0.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='plunger', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='plunger_shear-in-X-cen-norot', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['plunger_shear-in-X-cen-norot'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen-norot.odb', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 20792, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 32.0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {'totalTime': 0.0001, 
    'increment': 1, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0001, 'stepTime': 0.0001, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {'totalTime': 0.0002, 
    'increment': 2, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0001, 'stepTime': 0.0002, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.00035, 'increment': 3, 'attempts': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.00015, 'stepTime': 0.00035, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.000575, 'increment': 4, 'attempts': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.000225, 'stepTime': 0.000575, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.0009125, 'increment': 5, 'attempts': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.0003375, 'stepTime': 0.0009125, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.00141875, 'increment': 6, 'attempts': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.00050625, 
    'stepTime': 0.00141875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.002178125, 'increment': 7, 'attempts': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.000759375, 
    'stepTime': 0.002178125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.0033171875, 'increment': 8, 'attempts': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.0011390625, 
    'stepTime': 0.0033171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.00502578125, 'increment': 9, 'attempts': 1, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.00170859375, 
    'stepTime': 0.00502578125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.007588671875, 'increment': 10, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'timeIncrement': 0.002562890625, 
    'stepTime': 0.007588671875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.0114330078125, 'increment': 11, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'timeIncrement': 0.0038443359375, 
    'stepTime': 0.0114330078125, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.01719951171875, 'increment': 12, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00576650390625, 'stepTime': 0.01719951171875, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.025849267578125, 'increment': 13, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.008649755859375, 'stepTime': 0.025849267578125, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.0388239013671875, 'increment': 14, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0129746337890625, 'stepTime': 0.0388239013671875, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.0582858520507812, 'increment': 15, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0194619506835938, 'stepTime': 0.0582858520507812, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.0874787780761719, 'increment': 16, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0291929260253906, 'stepTime': 0.0874787780761719, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.131268167114258, 'increment': 17, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0437893890380859, 'stepTime': 0.131268167114258, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.196952250671387, 'increment': 18, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0656840835571289, 'stepTime': 0.196952250671387, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.29547837600708, 'increment': 19, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0985261253356934, 'stepTime': 0.29547837600708, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.44326756401062, 'increment': 20, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.14778918800354, 'stepTime': 0.44326756401062, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.66495134601593, 'increment': 21, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.22168378200531, 'stepTime': 0.66495134601593, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 0.997477019023895, 'increment': 22, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.332525673007965, 'stepTime': 0.997477019023895, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 23, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 1.49626552853584, 'increment': 23, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.498788509511948, 'stepTime': 1.49626552853584, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 24, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {
    'totalTime': 2.24444829280376, 'increment': 24, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.748182764267921, 'stepTime': 2.24444829280376, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 25, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {'totalTime': 3.0, 
    'increment': 25, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.755551707196236, 'stepTime': 3.0, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(JOB_COMPLETED, {
    'jobName': 'plunger_shear-in-X-cen-norot', 
    'time': 'Wed Feb 13 22:47:30 2019'})
mdb.models['plunger'].steps['Step-1'].setValues(initialInc=1.0, maxInc=1.0, 
    minInc=1e-05, timePeriod=1.0)
mdb.jobs['plunger_shear-in-X-cen-norot'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\plunger_shear-in-X-cen-norot.odb', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 20892, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 32.0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(JOB_COMPLETED, {
    'jobName': 'plunger_shear-in-X-cen-norot', 
    'time': 'Wed Feb 13 22:47:59 2019'})
mdb.jobs['plunger_shear-in-X-cen-norot'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_shear-in-X-cen-norot.odb', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 22516, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 32.0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 1})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(JOB_COMPLETED, {
    'jobName': 'plunger_shear-in-X-cen-norot', 
    'time': 'Wed Feb 13 22:48:59 2019'})
mdb.models['plunger'].boundaryConditions['shear in X'].setValues(ur3=UNSET)
mdb.jobs['plunger_shear-in-X-cen-norot'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_shear-in-X-cen-norot.odb', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 20252, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 32.0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot', 'severe': 0, 'equilibrium': 6})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-norot'})
mdb.jobs['plunger_shear-in-X-cen-norot']._Message(JOB_COMPLETED, {
    'jobName': 'plunger_shear-in-X-cen-norot', 
    'time': 'Wed Feb 13 22:52:29 2019'})
mdb.models['plunger'].fieldOutputRequests['F-Output-1'].setValues(directions=
    ON)
mdb.models['plunger'].boundaryConditions['shear in X'].setValues(ur1=UNSET, 
    ur2=UNSET)
mdb.Job(name='plunger_shear-in-X-cen-localdir', objectToCopy=
    mdb.jobs['plunger_shear-in-X-cen'])
mdb.jobs['plunger_shear-in-X-cen-localdir'].submit(consistencyChecking=OFF)
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'ELEMENT OUTPUT VARIABLES MUST BE GIVEN TO ACTIVATE LOCAL DIRECTIONS OUTPUT.  LOCAL DIRECTIONS WILL NOT BE INCLUDED WITH THIS OUTPUT REQUEST', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE S4R', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'USER SUBROUTINE UMAT WILL BE USED WITH THE STAVEV ARRAY DIMENSIONED TO ZERO SINCE THE *DEPVAR OPTION IS NOT USED WITH THIS MATERIAL. CONSEQUENTLY, DEFINING STATEV ENTRIES IN SUBROUTINE UMAT WILL CAUSE CODE EXECUTION ERRORS.', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\plunger_shear-in-X-cen-localdir.odb', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 29796, 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'plunger_shear-in-X-cen-localdir', 
    'memory': 32.0})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 18.0, 'phase': STANDARD_PHASE, 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'plunger_shear-in-X-cen-localdir', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
mdb.jobs['plunger_shear-in-X-cen-localdir']._Message(JOB_COMPLETED, {
    'time': 'Thu Feb 14 17:08:07 2019', 
    'jobName': 'plunger_shear-in-X-cen-localdir'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['squarePlate'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['squarePlate'].sketches['__profile__'].rectangle(point1=(-0.675, 
    -0.675), point2=(0.675, 0.675))
mdb.models['squarePlate'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['squarePlate'].parts['Part-2'].BaseShell(sketch=
    mdb.models['squarePlate'].sketches['__profile__'])
del mdb.models['squarePlate'].sketches['__profile__']
mdb.models['squarePlate'].parts['Part-2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.00625)
mdb.models['squarePlate'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF)), regions=(
    mdb.models['squarePlate'].parts['Part-2'].faces.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['squarePlate'].parts['Part-2'].setMeshControls(elemShape=TRI, 
    regions=
    mdb.models['squarePlate'].parts['Part-2'].faces.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['squarePlate'].parts['Part-2'].generateMesh()
mdb.models['squarePlate'].rootAssembly.features['Part-1-1'].suppress()
del mdb.models['squarePlate'].rootAssembly.features['Part-1-1']
mdb.models['squarePlate'].HomogeneousSolidSection(material='Neo-Hookean', name=
    'Section-2', thickness=None)
mdb.models['squarePlate'].rootAssembly.Instance(dependent=ON, name='Part-2-1', 
    part=mdb.models['squarePlate'].parts['Part-2'])
mdb.models['squarePlate'].rootAssembly.Instance(dependent=ON, name='Part-2-2', 
    part=mdb.models['squarePlate'].parts['Part-2'])
del mdb.models['squarePlate'].rootAssembly.features['Part-2-2']
mdb.models['squarePlate'].parts['Part-2'].deleteMesh(regions=
    mdb.models['squarePlate'].parts['Part-2'].faces.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['squarePlate'].parts['Part-2'].setMeshControls(elemShape=QUAD, 
    regions=
    mdb.models['squarePlate'].parts['Part-2'].faces.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['squarePlate'].parts['Part-2'].generateMesh()
mdb.models['squarePlate'].HomogeneousSolidSection(material='Neo-Hookean', name=
    'Section-3', thickness=None)
del mdb.models['squarePlate'].parts['Part-2']
mdb.models['squarePlate'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['squarePlate'].sketches['__profile__'].rectangle(point1=(-0.675, 
    -0.675), point2=(0.675, 0.675))
mdb.models['squarePlate'].sketches['__profile__'].rectangle(point1=(-0.675, 
    -0.675), point2=(0.675, 0.675))
del mdb.models['squarePlate'].sketches['__profile__']
mdb.models['squarePlate'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['squarePlate'].sketches['__profile__'].rectangle(point1=(-0.675, 
    -0.675), point2=(0.675, 0.675))
mdb.models['squarePlate'].Part(dimensionality=TWO_D_PLANAR, name='Part-2', 
    type=DEFORMABLE_BODY)
mdb.models['squarePlate'].parts['Part-2'].BaseShell(sketch=
    mdb.models['squarePlate'].sketches['__profile__'])
del mdb.models['squarePlate'].sketches['__profile__']
mdb.models['squarePlate'].parts['Part-2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.00625)
mdb.models['squarePlate'].parts['Part-2'].setMeshControls(elemShape=QUAD, 
    regions=
    mdb.models['squarePlate'].parts['Part-2'].faces.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['squarePlate'].parts['Part-2'].generateMesh()
del mdb.models['squarePlate'].sections['Section-3']
del mdb.models['squarePlate'].sections['Section-2']
mdb.models['squarePlate'].parts['Part-2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    faces=mdb.models['squarePlate'].parts['Part-2'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['squarePlate'].rootAssembly.regenerate()
del mdb.models['squarePlate'].rootAssembly.features['Part-2-1']
mdb.models['squarePlate'].rootAssembly.Instance(dependent=ON, name='Part-2-1', 
    part=mdb.models['squarePlate'].parts['Part-2'])
mdb.models['squarePlate'].boundaryConditions['Fix left'].suppress()
mdb.models['squarePlate'].boundaryConditions['pull right corners'].suppress()
mdb.models['squarePlate'].EncastreBC(createStepName='Step-1', localCsys=None, 
    name='Fix left part 2', region=Region(
    edges=mdb.models['squarePlate'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    mask=('[#8 ]', ), )))
mdb.models['squarePlate'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='parabole  half', fixed=OFF, 
    localCsys=None, name='pull right', region=Region(
    edges=mdb.models['squarePlate'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    mask=('[#2 ]', ), )), u1=1.0, u2=0.0, ur3=0.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='squarePlateUltra_right-half-parabola', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['squarePlateUltra_right-half-parabola'].submit(consistencyChecking=
    OFF)
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-half-parabola.odb', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 27920, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 184.0, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(STATUS, {
    'totalTime': 1.0, 'increment': 1, 'attempts': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-half-parabola', 'severe': 0, 
    'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-half-parabola'})
mdb.jobs['squarePlateUltra_right-half-parabola']._Message(JOB_COMPLETED, {
    'jobName': 'squarePlateUltra_right-half-parabola', 
    'time': 'Sat Mar 16 03:20:08 2019'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='squarePlateUltra_right-unit-parabola', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['squarePlate'].boundaryConditions['pull right'].setValues(fieldName=
    'parabola')
mdb.jobs['squarePlateUltra_right-unit-parabola'].submit(consistencyChecking=
    OFF)
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-unit-parabola.odb', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 3364, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 184.0, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(STATUS, {
    'totalTime': 0.0, 'increment': 1, 'attempts': ' 1U', 'iterations': 6, 
    'phase': STANDARD_PHASE, 'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-unit-parabola', 'severe': 0, 
    'equilibrium': 6})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(STATUS, {
    'totalTime': 0.25, 'increment': 1, 'attempts': 2, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.25, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'squarePlateUltra_right-unit-parabola', 'severe': 0, 
    'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(STATUS, {
    'totalTime': 0.5, 'increment': 2, 'attempts': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.25, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'squarePlateUltra_right-unit-parabola', 'severe': 0, 
    'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(STATUS, {
    'totalTime': 0.875, 'increment': 3, 'attempts': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.375, 'stepTime': 0.875, 
    'step': 1, 'jobName': 'squarePlateUltra_right-unit-parabola', 'severe': 0, 
    'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(STATUS, {
    'totalTime': 1.0, 'increment': 4, 'attempts': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.125, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlateUltra_right-unit-parabola', 'severe': 0, 
    'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-unit-parabola'})
mdb.jobs['squarePlateUltra_right-unit-parabola']._Message(JOB_COMPLETED, {
    'jobName': 'squarePlateUltra_right-unit-parabola', 
    'time': 'Sat Mar 16 03:23:01 2019'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Sphere')
mdb.models['Sphere'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['Sphere'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -1.0), point2=(0.0, 1.0))
mdb.models['Sphere'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['Sphere'].sketches['__profile__'].geometry[2])
mdb.models['Sphere'].sketches['__profile__'].CircleByCenterPerimeter(center=(
    0.0, 0.0), point1=(0.0, 0.675))
mdb.models['Sphere'].sketches['__profile__'].Line(point1=(0.0, 0.675), point2=(
    0.0, -0.674999999988358))
mdb.models['Sphere'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['Sphere'].sketches['__profile__'].geometry[4])
mdb.models['Sphere'].sketches['__profile__'].PerpendicularConstraint(
    addUndoState=False, entity1=
    mdb.models['Sphere'].sketches['__profile__'].geometry[3], entity2=
    mdb.models['Sphere'].sketches['__profile__'].geometry[4])
mdb.models['Sphere'].sketches['__profile__'].CoincidentConstraint(addUndoState=
    False, entity1=mdb.models['Sphere'].sketches['__profile__'].vertices[2], 
    entity2=mdb.models['Sphere'].sketches['__profile__'].geometry[2])
mdb.models['Sphere'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['Sphere'].sketches['__profile__'].geometry[3], point1=(
    -0.635940670967102, 0.231871634721756))
mdb.models['Sphere'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Sphere'].parts['Part-1'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['Sphere'].sketches['__profile__'])
del mdb.models['Sphere'].sketches['__profile__']
mdb.models['Sphere'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.00625)
mdb.models['Sphere'].parts['Part-1'].setMeshControls(elemShape=QUAD, regions=
    mdb.models['Sphere'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', ), 
    ))
mdb.models['Sphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4, elemLibrary=STANDARD, secondOrderAccuracy=OFF), ElemType(
    elemCode=S3, elemLibrary=STANDARD)), regions=(
    mdb.models['Sphere'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Sphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF), ElemType(
    elemCode=S3, elemLibrary=STANDARD)), regions=(
    mdb.models['Sphere'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', ), 
    ), ))
mdb.models['Sphere'].parts['Part-1'].generateMesh()
mdb.models['Sphere'].parts['Part-1'].deleteMesh()
mdb.models['Sphere'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0125)
mdb.models['Sphere'].parts['Part-1'].generateMesh()
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='squarePlateUltra_right-qrtr-parabola', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['squarePlate'].ExpressionField(description='', expression=
    '0.25*Y*Y ', localCsys=None, name='parabola14')
mdb.models['squarePlate'].ExpressionField(description='', expression='0.1*Y*Y', 
    localCsys=None, name='parabolaP1')
mdb.models['squarePlate'].boundaryConditions['pull right'].setValues(fieldName=
    'parabola14')
mdb.jobs['squarePlateUltra_right-qrtr-parabola'].submit(consistencyChecking=
    OFF)
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-qrtr-parabola.odb', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 24432, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-qrtr-parabola', 
    'memory': 184.0})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STATUS, {
    'totalTime': 1.0, 'increment': 1, 'attempts': 1, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola', 'severe': 0, 
    'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(JOB_COMPLETED, {
    'time': 'Sat Mar 16 21:27:17 2019', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.models['squarePlate'].boundaryConditions['pull right'].setValues(fieldName=
    'parabolaP1')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='squarePlateUltra_right-p1-parabola', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['squarePlateUltra_right-p1-parabola'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-p1-parabola.odb', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 27424, 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-p1-parabola', 
    'memory': 184.0})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(STATUS, {
    'totalTime': 1.0, 'increment': 1, 'attempts': 1, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-p1-parabola', 'severe': 0, 
    'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.jobs['squarePlateUltra_right-p1-parabola']._Message(JOB_COMPLETED, {
    'time': 'Sat Mar 16 21:28:19 2019', 
    'jobName': 'squarePlateUltra_right-p1-parabola'})
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='squarePlate', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='squarePlateUltra_right-sineY', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['squarePlate'].ExpressionField(description='', expression=
    'sin ( Y )', localCsys=None, name='sinewave')
mdb.models['squarePlate'].boundaryConditions['pull right'].setValues(fieldName=
    'sinewave')
mdb.models['squarePlate'].analyticalFields['sinewave'].setValues(expression=
    'sin ( 3*Y )')
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 30712, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-sineY', 
    'memory': 184.0})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 503 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.0, 
    'increment': 1, 'attempts': ' 1U', 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.25, 
    'increment': 1, 'attempts': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.25, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 143 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.25, 
    'increment': 2, 'attempts': ' 1U', 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.25, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.3125, 
    'increment': 2, 'attempts': 2, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0625, 'stepTime': 0.3125, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.3125, 
    'increment': 3, 'attempts': ' 1U', 'iterations': 4, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.09375, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.3359375, 'increment': 3, 'attempts': 2, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.0234375, 'stepTime': 0.3359375, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.37109375, 'increment': 4, 'attempts': 1, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.03515625, 
    'stepTime': 0.37109375, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 43 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.37109375, 'increment': 5, 'attempts': ' 1U', 
    'iterations': 2, 'phase': STANDARD_PHASE, 'timeIncrement': 0.052734375, 
    'stepTime': 0.37109375, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.38427734375, 'increment': 5, 'attempts': 2, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'timeIncrement': 0.01318359375, 
    'stepTime': 0.38427734375, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 8 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.38427734375, 'increment': 6, 'attempts': ' 1U', 
    'iterations': 1, 'phase': STANDARD_PHASE, 'timeIncrement': 0.019775390625, 
    'stepTime': 0.38427734375, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.38427734375, 'increment': 6, 'attempts': ' 2U', 
    'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00494384765625, 'stepTime': 0.38427734375, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 5})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.385513305664063, 'increment': 6, 'attempts': 3, 
    'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.0012359619140625, 'stepTime': 0.385513305664063, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.385513305664063, 'increment': 7, 'attempts': ' 1U', 
    'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00185394287109375, 'stepTime': 0.385513305664063, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 7})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.385976791381836, 'increment': 7, 'attempts': 2, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000463485717773438, 'stepTime': 0.385976791381836, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.386672019958496, 'increment': 8, 'attempts': 1, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000695228576660156, 'stepTime': 0.386672019958496, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.386672019958496, 'increment': 9, 'attempts': ' 1U', 
    'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.00104284286499023, 'stepTime': 0.386672019958496, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 6})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.386932730674744, 'increment': 9, 'attempts': 2, 
    'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000260710716247559, 'stepTime': 0.386932730674744, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.386932730674744, 'increment': 10, 'attempts': ' 1U', 
    'iterations': 6, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000391066074371338, 'stepTime': 0.386932730674744, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 6})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.387030497193336, 'increment': 10, 'attempts': 2, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 9.77665185928345e-05, 'stepTime': 0.387030497193336, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.387177146971226, 'increment': 11, 'attempts': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000146649777889252, 'stepTime': 0.387177146971226, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.387177146971226, 'increment': 12, 'attempts': ' 1U', 
    'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.000219974666833878, 'stepTime': 0.387177146971226, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 7})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.387232140637934, 'increment': 12, 'attempts': 2, 
    'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 5.49936667084694e-05, 'stepTime': 0.387232140637934, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.387232140637934, 'increment': 13, 'attempts': ' 1U', 
    'iterations': 8, 'phase': STANDARD_PHASE, 
    'timeIncrement': 8.24905000627041e-05, 'stepTime': 0.387232140637934, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 8})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.38725276326295, 'increment': 13, 'attempts': 2, 
    'iterations': 1, 'phase': STANDARD_PHASE, 
    'timeIncrement': 2.0622625015676e-05, 'stepTime': 0.38725276326295, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.387283697200473, 'increment': 14, 'attempts': 1, 
    'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 3.0933937523514e-05, 'stepTime': 0.387283697200473, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.387283697200473, 'increment': 15, 'attempts': ' 1U', 
    'iterations': 7, 'phase': STANDARD_PHASE, 
    'timeIncrement': 4.6400906285271e-05, 'stepTime': 0.387283697200473, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 7})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.387295297427045, 'increment': 15, 'attempts': 2, 
    'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.16002265713178e-05, 'stepTime': 0.387295297427045, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.models['squarePlate'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='BC top bottom', region=Region(
    edges=mdb.models['squarePlate'].rootAssembly.instances['Part-2-1'].edges.getSequenceFromMask(
    mask=('[#5 ]', ), )), u1=1.0, u2=0.0, ur3=UNSET)
mdb.models['squarePlate'].analyticalFields['sinewave'].setValues(expression=
    'sin ( 1*Y )')
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'phase': BATCHPRE_PHASE, 
    'message': '4 nodes have dof on which velocity/displacement/acceleration/base motion etc. constraints are specified simultaneously. The nodes have been identified in node set ErrNodeBCRedundantDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ABORTED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.models['squarePlate'].boundaryConditions['BC top bottom'].setValues(u1=
    UNSET)
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 132268, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 184.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 21 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.0, 
    'increment': 1, 'attempts': ' 1U', 'iterations': 1, 
    'phase': STANDARD_PHASE, 'timeIncrement': 1.0, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.25, 
    'increment': 1, 'attempts': 2, 'iterations': 4, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.25, 'stepTime': 0.25, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.5, 
    'increment': 2, 'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.25, 'stepTime': 0.5, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.875, 
    'increment': 3, 'attempts': 1, 'iterations': 5, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.375, 'stepTime': 0.875, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 5})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 4, 'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 0.125, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_COMPLETED, {
    'jobName': 'squarePlateUltra_right-sineY', 
    'time': 'Tue Mar 19 15:40:39 2019'})
mdb.models['squarePlate'].analyticalFields['sinewave'].setValues(expression=
    'sin ( 0.05*Y )')
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 134992, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 184.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 2, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_COMPLETED, {
    'jobName': 'squarePlateUltra_right-sineY', 
    'time': 'Tue Mar 19 15:56:54 2019'})
mdb.models['squarePlate'].boundaryConditions['BC top bottom'].suppress()
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 111380, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'memory': 184.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 1.0, 
    'increment': 1, 'attempts': 1, 'iterations': 3, 'phase': STANDARD_PHASE, 
    'timeIncrement': 1.0, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_COMPLETED, {
    'jobName': 'squarePlateUltra_right-sineY', 
    'time': 'Tue Mar 19 16:24:10 2019'})
mdb.models['squarePlate'].analyticalFields['sinewave'].setValues(expression=
    'sin ( 0.1*Y )')
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 171344, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-sineY', 
    'memory': 184.0})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_COMPLETED, {
    'time': 'Tue Mar 19 22:24:10 2019', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.models['squarePlate'].analyticalFields['sinewave'].setValues(expression=
    'sin ( 10*Y )')
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 172604, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-sineY', 
    'memory': 184.0})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 6625 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 140 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 3U', 'timeIncrement': 0.0625, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.015625, 'attempts': 4, 'timeIncrement': 0.015625, 
    'increment': 1, 'stepTime': 0.015625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.03125, 'attempts': 1, 'timeIncrement': 0.015625, 
    'increment': 2, 'stepTime': 0.03125, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0546875, 'attempts': 1, 'timeIncrement': 0.0234375, 
    'increment': 3, 'stepTime': 0.0546875, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 609 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0546875, 'attempts': ' 1U', 'timeIncrement': 0.03515625, 
    'increment': 4, 'stepTime': 0.0546875, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0634765625, 'attempts': 2, 'timeIncrement': 0.0087890625, 
    'increment': 4, 'stepTime': 0.0634765625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.07666015625, 'attempts': 1, 'timeIncrement': 0.01318359375, 
    'increment': 5, 'stepTime': 0.07666015625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.07666015625, 'attempts': ' 1U', 
    'timeIncrement': 0.019775390625, 'increment': 6, 'stepTime': 0.07666015625, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.07666015625, 'attempts': ' 2U', 
    'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.07666015625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0778961181640625, 'attempts': 3, 
    'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.0778961181640625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0797500610351563, 'attempts': 1, 
    'timeIncrement': 0.00185394287109375, 'increment': 7, 
    'stepTime': 0.0797500610351563, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0797500610351563, 'attempts': ' 1U', 
    'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.0797500610351563, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0797500610351563, 'attempts': ' 2U', 
    'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.0797500610351563, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0799238681793213, 'attempts': 3, 
    'timeIncrement': 0.000173807144165039, 'increment': 8, 
    'stepTime': 0.0799238681793213, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0801845788955688, 'attempts': 1, 
    'timeIncrement': 0.000260710716247559, 'increment': 9, 
    'stepTime': 0.0801845788955688, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0801845788955688, 'attempts': ' 1U', 
    'timeIncrement': 0.000391066074371338, 'increment': 10, 
    'stepTime': 0.0801845788955688, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0801845788955688, 'attempts': ' 2U', 
    'timeIncrement': 9.77665185928345e-05, 'increment': 10, 
    'stepTime': 0.0801845788955688, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0801845788955688, 'attempts': ' 3U', 
    'timeIncrement': 2.44416296482086e-05, 'increment': 10, 
    'stepTime': 0.0801845788955688, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0801945788955688, 'attempts': 4, 'timeIncrement': 1e-05, 
    'increment': 10, 'stepTime': 0.0801945788955688, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0801945788955688, 'attempts': ' 1U', 
    'timeIncrement': 1.5e-05, 'increment': 11, 'stepTime': 0.0801945788955688, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0801945788955688, 'attempts': ' 2U', 'timeIncrement': 1e-05, 
    'increment': 11, 'stepTime': 0.0801945788955688, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.0801945788955688, 'attempts': 3, 'timeIncrement': 1e-35, 
    'increment': 11, 'stepTime': 0.0801945788955688, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ABORTED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.models['squarePlate'].analyticalFields['sinewave'].setValues(expression=
    'sin ( 1*Y )')
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 172112, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-sineY', 
    'memory': 184.0})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.40625, 'attempts': 1, 'timeIncrement': 0.09375, 
    'increment': 3, 'stepTime': 0.40625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.546875, 'attempts': 1, 'timeIncrement': 0.140625, 
    'increment': 4, 'stepTime': 0.546875, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 49 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.546875, 'attempts': ' 1U', 'timeIncrement': 0.2109375, 
    'increment': 5, 'stepTime': 0.546875, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.599609375, 'attempts': 2, 'timeIncrement': 0.052734375, 
    'increment': 5, 'stepTime': 0.599609375, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 5 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.599609375, 'attempts': ' 1U', 'timeIncrement': 0.0791015625, 
    'increment': 6, 'stepTime': 0.599609375, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.599609375, 'attempts': ' 2U', 
    'timeIncrement': 0.019775390625, 'increment': 6, 'stepTime': 0.599609375, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.60455322265625, 'attempts': 3, 
    'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.60455322265625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.611968994140625, 'attempts': 1, 
    'timeIncrement': 0.007415771484375, 'increment': 7, 
    'stepTime': 0.611968994140625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.611968994140625, 'attempts': ' 1U', 
    'timeIncrement': 0.0111236572265625, 'increment': 8, 
    'stepTime': 0.611968994140625, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.614749908447266, 'attempts': 2, 
    'timeIncrement': 0.00278091430664063, 'increment': 8, 
    'stepTime': 0.614749908447266, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.614749908447266, 'attempts': ' 1U', 
    'timeIncrement': 0.00417137145996094, 'increment': 9, 
    'stepTime': 0.614749908447266, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.615792751312256, 'attempts': 2, 
    'timeIncrement': 0.00104284286499023, 'increment': 9, 
    'stepTime': 0.615792751312256, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.617357015609741, 'attempts': 1, 
    'timeIncrement': 0.00156426429748535, 'increment': 10, 
    'stepTime': 0.617357015609741, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.617357015609741, 'attempts': ' 1U', 
    'timeIncrement': 0.00234639644622803, 'increment': 11, 
    'stepTime': 0.617357015609741, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.617943614721298, 'attempts': 2, 
    'timeIncrement': 0.000586599111557007, 'increment': 11, 
    'stepTime': 0.617943614721298, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {
    'totalTime': 0.617943614721298, 'attempts': ' 1U', 
    'timeIncrement': 0.00087989866733551, 'increment': 12, 
    'stepTime': 0.617943614721298, 'step': 1, 
    'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.models['squarePlate'].analyticalFields['sinewave'].setValues(expression=
    'sin ( 0.5*Y )')
mdb.models['squarePlate'].boundaryConditions['BC top bottom'].resume()
mdb.models['squarePlate'].analyticalFields['sinewave'].setValues(expression=
    '0.01 * sin ( 8*Y )')
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 168820, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-sineY', 
    'memory': 184.0})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_COMPLETED, {
    'time': 'Tue Mar 19 22:36:01 2019', 
    'jobName': 'squarePlateUltra_right-sineY'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4R', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 187624, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-sineY', 
    'memory': 184.0})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 14:11:00 2019', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.models['squarePlate'].keywordBlock.synchVersions(storeNodesAndElements=
    False)
mdb.models['squarePlate'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=CPS4, elemLibrary=STANDARD), ElemType(elemCode=CPS3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['squarePlate'].parts['Part-2'].faces.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['squarePlate'].parts['Part-2'].generateMesh()
mdb.models['squarePlate'].parts['Part-2'].generateMesh()
mdb.models['squarePlate'].rootAssembly.regenerate()
mdb.jobs['squarePlateUltra_right-qrtr-parabola'].submit(consistencyChecking=
    OFF)
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-qrtr-parabola.odb', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 213380, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-sineY'].submit(consistencyChecking=OFF)
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-qrtr-parabola', 
    'memory': 229.0})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 14:50:21 2019', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-sineY.odb', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 213984, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-sineY', 
    'memory': 229.0})
mdb.jobs['squarePlateUltra_right-sineY']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'squarePlateUltra_right-sineY', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['squarePlateUltra_right-sineY']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.jobs['squarePlateUltra_right-sineY']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 14:50:34 2019', 
    'jobName': 'squarePlateUltra_right-sineY'})
mdb.models['squarePlate'].boundaryConditions['pull right'].setValues(fieldName=
    'parabola14')
mdb.jobs['squarePlateUltra_right-qrtr-parabola'].submit(consistencyChecking=
    OFF)
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PE IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEEQ IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST PEMAG IS NOT AVAILABLE FOR THE MATERIAL FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST STH IS NOT AVAILABLE FOR ELEMENT TYPE CPS4', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'Boundary conditions are specified on inactive dof of 217 nodes. The nodes have been identified in node set WarnNodeBCInactiveDof.', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\squarePlateUltra_right-qrtr-parabola.odb', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 206532, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'squarePlateUltra_right-qrtr-parabola', 
    'memory': 229.0})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 60.0, 'phase': STANDARD_PHASE, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.jobs['squarePlateUltra_right-qrtr-parabola']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 14:51:43 2019', 
    'jobName': 'squarePlateUltra_right-qrtr-parabola'})
mdb.models['Sphere'].Material(name='Neo-Hookean')
mdb.models['Sphere'].materials['Neo-Hookean'].Hyperelastic(materialType=
    ISOTROPIC, table=((344828000.0, 3e-10), ), testData=OFF, type=NEO_HOOKE, 
    volumetricResponse=VOLUMETRIC_DATA)
mdb.models['Sphere'].HomogeneousShellSection(idealization=NO_IDEALIZATION, 
    integrationRule=SIMPSON, material='Neo-Hookean', name='Section-1', 
    nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT, 
    preIntegrate=OFF, temperature=GRADIENT, thickness=0.0001, thicknessField=''
    , thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['Sphere'].parts['Part-1'].SectionAssignment(offset=0.0, offsetField=
    '', offsetType=BOTTOM_SURFACE, region=Region(
    faces=mdb.models['Sphere'].parts['Part-1'].faces.getSequenceFromMask(mask=(
    '[#1 ]', ), )), sectionName='Section-1', thicknessAssignment=FROM_SECTION)
mdb.models['Sphere'].parts['Part-1'].sectionAssignments[0].setValues(offset=0.0
    , offsetField='', offsetType=TOP_SURFACE)
mdb.models['Sphere'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Sphere'].rootAssembly.Instance(dependent=ON, name='Part-1-1', part=
    mdb.models['Sphere'].parts['Part-1'])
mdb.models['Sphere'].rootAssembly.Instance(dependent=ON, name='Part-1-2', part=
    mdb.models['Sphere'].parts['Part-1'])
mdb.models['Sphere'].StaticStep(name='Step-1', nlgeom=ON, previous='Initial')
mdb.models['Sphere'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-all', region=Region(
    faces=mdb.models['Sphere'].rootAssembly.instances['Part-1-2'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), u1=1.0, u2=0.0, u3=0.0, ur1=UNSET, ur2=UNSET, ur3=
    UNSET)
mdb.models['Sphere'].ExpressionField(description='', expression='0.0005*Y', 
    localCsys=None, name='AnalyticalField-twist')
mdb.models['Sphere'].boundaryConditions['BC-all'].setValues(distributionType=
    FIELD, fieldName='AnalyticalField-twist')
mdb.models['Sphere'].analyticalFields['AnalyticalField-twist'].setValues(
    expression='0.02*Y')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Sphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-30', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', type=
    ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Sphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Sphere_twist', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['Sphere'].boundaryConditions.changeKey(fromName='BC-all', toName=
    'BC-twist')
mdb.models.changeKey(fromName='Sphere', toName='sphere')
del mdb.jobs['Sphere_twist']
del mdb.jobs['Job-30']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='sphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='sphere_twist', nodalOutputPrecision=
    SINGLE, numCpus=1, numGPUs=0, queue=None, resultsFormat=ODB, scratch='', 
    type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.jobs['sphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_twist.odb', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 227524, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'sphere_twist', 'memory': 1996.0})
mdb.jobs['sphere_twist']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 287.0, 
    'phase': STANDARD_PHASE, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_twist']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 18:17:54 2019', 'jobName': 'sphere_twist'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['sphere'].analyticalFields.changeKey(fromName=
    'AnalyticalField-twist', toName='AnalyticalField-twist-X')
mdb.models['sphere'].ExpressionField(description='', expression=
    'X*cos(X*180/ pi ) -X+Z*sin(X*180/ pi )', localCsys=None, name=
    'AnalyticalField-twist-Z')
mdb.models['sphere'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(X*180/ pi ) -X+Z*sin(X*180/ pi )')
mdb.models['sphere'].analyticalFields['AnalyticalField-twist-Z'].setValues(
    expression='-X*sin(Y*180/ pi ) +Z*cos(Y*180/ pi ) - Z')
mdb.models['sphere'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(Y*180/ pi ) -X+Z*sin(Y*180/ pi )')
mdb.models['sphere'].boundaryConditions['BC-twist'].setValues(distributionType=
    UNIFORM, u1=0.0, u2=UNSET, u3=UNSET)
mdb.models['sphere'].boundaryConditions.changeKey(fromName='BC-twist', toName=
    'BC-twist-X')
mdb.models['sphere'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=Region(
    faces=mdb.models['sphere'].rootAssembly.instances['Part-1-2'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), u1=UNSET, u2=0.0, u3=UNSET, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['sphere'].boundaryConditions.changeKey(fromName='BC-2', toName=
    'BC-twist-Y')
mdb.models['sphere'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=FIELD, fieldName='AnalyticalField-twist-Z', fixed=OFF, 
    localCsys=None, name='BC-twist-Z', region=Region(
    faces=mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )+\
    mdb.models['sphere'].rootAssembly.instances['Part-1-2'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), u1=UNSET, u2=UNSET, u3=1.0, ur1=UNSET, ur2=UNSET, 
    ur3=UNSET)
mdb.models['sphere'].boundaryConditions['BC-twist-X'].setValues(
    distributionType=FIELD, fieldName='AnalyticalField-twist-X', u1=1.0)
mdb.jobs['sphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_twist.odb', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 233552, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'sphere_twist', 'memory': 1997.0})
mdb.jobs['sphere_twist']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 287.0, 
    'phase': STANDARD_PHASE, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 76 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 3 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 5 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 1 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 8 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_twist']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_twist'})
mdb.models['sphere'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.005*Y*180/ pi ) -X+Z*sin(0.005*Y*180/ pi )')
mdb.models['sphere'].analyticalFields['AnalyticalField-twist-Z'].setValues(
    expression='-X*sin(0.005*Y*180/ pi ) +Z*cos(0.005*Y*180/ pi ) - Z')
mdb.jobs['sphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_twist.odb', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 232140, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'sphere_twist', 'memory': 1997.0})
mdb.jobs['sphere_twist']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 287.0, 
    'phase': STANDARD_PHASE, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 12 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_twist']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(INTERRUPTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_twist'})
mdb.models['sphere'].rootAssembly.Set(name='Set-topbottom', nodes=
    mdb.models['sphere'].rootAssembly.instances['Part-1-2'].nodes.getSequenceFromMask(
    mask=('[#3fff #0 #c0000000 #7ffff #0:2 #3ffffe #80000000', 
    ' #ffffffff #1fff #0 #fffffffe #3fff #ffffc00 #0:2', 
    ' #fffffffc #1 #fffe #0 #ffa00000 #bffff #0', 
    ' #1fff000 #3ff00000 #0:2 #fffffc00 #1 #7f000 #0:2', 
    ' #3ff80 #80000000 #3 #0:2 #bf #0 #600', 
    ' #0:186 #2000000 #0:3 #e #0 #3c #3c000', 
    ' #0:2 #1ff0000 #0 #ffc0 #0:2 #1ffff20 #0', 
    ' #ffe0000 #fe000000 #63f #0 #ffc00000 #1fffff #fffc0000', 
    ' #f #0 #ffffffe0 #7ff #fffff000 #1 #f8000000', 
    ' #ffffffff #1f #fffc0000 #f000003f #fffff #0 #fffff800', 
    ' #5fffff #ffffc000 #7f #c0000000 #ffffffff #ffffff #f0000000', 
    ' #ffffffff #3fffff #0 #7ffffff8 #ffff0000 #7ff #fe000000', 
    ' #ffffffff #1ffff #3fffffe0 #0 #fffe6000 #ffffffff #7', 
    ' #fffe0000 #ff0000ff #ffff #0 #ffffffc0 #3ffff #ffffc000', 
    ' #3 #ffe00000 #3f7fffff #f0000000 #7ff #0 #ffe40000', 
    ' #1fffff #0 #3ffc0 #7fe0000 #0:2 #fff80000 #1f', 
    ' #f000 #0:2 #1ffc00 #0 #38000000 #0:4 #50', 
    ' #0:177 #300000 #0:2 #e00000 #0 #1fc0 #0:2', 
    ' #7fe0 #0 #ff00 #fff8000 #0:2 #fffe0000 #1f', 
    ' #1ffff80 #0 #80000000 #1fffffff #80000000 #3ffff #0', 
    ' #fff80000 #3fffff #0 #2ffffe0 #fffc0000 #ff #0', 
    ' #fffffff8 #1fff #0 #fffff800 #3 #0:195 #3c000', 
    ' #0:3 #bf #0:2 #1ff8 #0:2 #7fc000 #0:2', 
    ' #fc000000 #3e #0:2 #1fffe #0:2 #7fff8000 #0:2', 
    ' #fe000000 #3ff #0:2 #bffff8 #0:2 #ffffc000 #3f', 
    ' #0 #fc000000 #1ffff #0:2 #fffffffe #1 #0', 
    ' #ffffc000 #7ff #0 #f8000000 #7ffffff #0:2 #fffffff8', 
    ' #7 #0 #fffffc00 #ffff #0 #ffc00000 #fffffff', 
    ' #0 #fe000000 #ffffffff #1 #0 #ffffffe0 #7fff', 
    ' #0 #ffff8000 #fffffff #0 #ff000000 #ffffffff #f', 
    ' #0 #fffff000 #3ffffff #0:2 #fffffffe #1fffffff #0', 
    ' #ffffff00 #ffffffff #0 #fffb0000 #ffffffff #7ff #0', 
    ' #fffffffc #1fffffff #0 #fffa0000 #ffffffff #3f #ff000000', 
    ' #ffffffff #1fff #0 #ffffe000 #7fffffff #0 #fff00000', 
    ' #ffffffff #3f #f8000000 #ffffffff #5fff #0 #fff40000', 
    ' #3fffffff #0 #80000000 #ffffffff #77f #0 #fffffff0', 
    ' #3fff #0 #ff000000 #7fffffff #0 #c0000000 #ffffffff', 
    ' #1f #0 #ffffffc0 #cff #0 #c0000000 #fffffffe', 
    ' #0:2 #ffffff40 #1f #0 #fffe0000 #fff #0:2', 
    ' #3f7fff80 #0:2 #ffff8000 #3 #0 #ff000000 #1fff', 
    ' #0:2 #ffff800 #0:2 #f7f00000 #3 #0 #f0000000', 
    ' #3f3 #0:2 #bff8000 #0:2 #e0000000 #f #0:2', 
    ' #fe0 #0:2 #1c000000 #0:3 #80 #0:166 #7f0', 
    ' #fff80000 #3 #18000000 #30108006 #ffef99ac #237e4d6e #aa03b81', 
    ' #80c00005 #c0400004 #1400180 #1428 #f0000 #0:33 #f03e0000', 
    ' #6bc1c63 #e7007e6 #1cf8934f #4d54785 #b4047b00 #f4bc6e1f #7f019e31', 
    ' #9847be1 #1557d623 #8662e312 #28f5407 #f73afc1e #18f1f018 #20201fc6', 
    ' #61b183c #e0cf3cf0 #87cdfef #37f1d1b0 #3c5900a3 #ef87fd38 #2e003e66', 
    ' #2c0d1f18 #ddf88e42 #132b7c03 #7d009e90 #b9b99791 #781a063 #61c00027', 
    ' #7e624e0 #88780064 #78dffb9b #1de3006c #8d800c32 #ce3e704 #324c2c84', 
    ' #2650fe00 #108026 #e70e9601 #3401e534 #c41e8007 #2cc3190 #682600a4', 
    ' #2107881e #37088c07 #e050c60e #4059f18 #600000c6 #10444c20 #10183027', 
    ' #8008320c #18118001 #500e1f1 #90980220 #24020475 #70008109 #300030', 
    ' #5000c032 #8a0100c9 #40002 #1c000 #82000100 #c00800 #4348', 
    ' #40b10 #4300021c #20e000 #1c020000 #700608 #20051 #40100000', 
    ' #21c9 #4000 #38004000 #3c080000 #1000001 #0 #80000', 
    ' #1000000 #18000040 #802 #40000080 #0 #80002010 #80008', 
    ' #30 #0:4 #2000000 #0:2 #400000 #7100 ]', ), )+\
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#3fff #0 #c0000000 #7ffff #0:2 #3ffffe #80000000', 
    ' #ffffffff #1fff #0 #fffffffe #3fff #ffffc00 #0:2', 
    ' #fffffffc #1 #fffe #0 #ffa00000 #bffff #0', 
    ' #1fff000 #3ff00000 #0:2 #fffffc00 #1 #7f000 #0:2', 
    ' #3ff80 #80000000 #3 #0:2 #bf #0 #600', 
    ' #0:186 #2000000 #0:3 #e #0 #3c #3c000', 
    ' #0:2 #1ff0000 #0 #ffc0 #0:2 #1ffff20 #0', 
    ' #ffe0000 #fe000000 #63f #0 #ffc00000 #1fffff #fffc0000', 
    ' #f #0 #ffffffe0 #7ff #fffff000 #1 #f8000000', 
    ' #ffffffff #1f #fffc0000 #f000003f #fffff #0 #fffff800', 
    ' #5fffff #ffffc000 #7f #c0000000 #ffffffff #ffffff #f0000000', 
    ' #ffffffff #3fffff #0 #7ffffff8 #ffff0000 #7ff #fe000000', 
    ' #ffffffff #1ffff #3fffffe0 #0 #fffe6000 #ffffffff #7', 
    ' #fffe0000 #ff0000ff #ffff #0 #ffffffc0 #3ffff #ffffc000', 
    ' #3 #ffe00000 #3f7fffff #f0000000 #7ff #0 #ffe40000', 
    ' #1fffff #0 #3ffc0 #7fe0000 #0:2 #fff80000 #1f', 
    ' #f000 #0:2 #1ffc00 #0 #38000000 #0:4 #50', 
    ' #0:177 #300000 #0:2 #e00000 #0 #1fc0 #0:2', 
    ' #7fe0 #0 #ff00 #fff8000 #0:2 #fffe0000 #1f', 
    ' #1ffff80 #0 #80000000 #1fffffff #80000000 #3ffff #0', 
    ' #fff00000 #3fffff #0 #2ffffe0 #fffc0000 #ff #0', 
    ' #fffffff8 #1fff #0 #fffff800 #3 #0:195 #3c000', 
    ' #0:3 #bf #0:2 #1ff8 #0:2 #7fc000 #0:2', 
    ' #fc000000 #3e #0:2 #1fffe #0:2 #7fff8000 #0:2', 
    ' #fe000000 #3ff #0:2 #bffff8 #0:2 #ffffc000 #3f', 
    ' #0 #fc000000 #1ffff #0:2 #fffffffe #1 #0', 
    ' #ffffc000 #7ff #0 #f8000000 #7ffffff #0:2 #fffffff8', 
    ' #7 #0 #fffffc00 #ffff #0 #ffc00000 #fffffff', 
    ' #0 #fe000000 #ffffffff #1 #0 #ffffffe0 #7fff', 
    ' #0 #ffff8000 #fffffff #0 #ff000000 #ffffffff #f', 
    ' #0 #fffff000 #3ffffff #0:2 #fffffffe #1fffffff #0', 
    ' #ffffff00 #ffffffff #0 #fffb0000 #ffffffff #7ff #0', 
    ' #fffffffc #1fffffff #0 #fffa0000 #ffffffff #3f #ff000000', 
    ' #ffffffff #1fff #0 #ffffe000 #7fffffff #0 #fff00000', 
    ' #ffffffff #3f #f8000000 #ffffffff #5fff #0 #fff40000', 
    ' #3fffffff #0 #80000000 #ffffffff #77f #0 #fffffff0', 
    ' #3fff #0 #ff000000 #7fffffff #0 #c0000000 #ffffffff', 
    ' #1f #0 #ffffffc0 #cff #0 #c0000000 #fffffffe', 
    ' #0:2 #ffffff40 #1f #0 #fffe0000 #fff #0:2', 
    ' #3f7fff80 #0:2 #ffff8000 #3 #0 #ff000000 #1fff', 
    ' #0:2 #ffff800 #0:2 #f7f00000 #3 #0 #f0000000', 
    ' #3f3 #0:2 #bff8000 #0:2 #e0000000 #f #0:2', 
    ' #fe0 #0:2 #1c000000 #0:3 #80 #0:166 #7f0', 
    ' #fff80000 #3 #18000000 #30108006 #ffef99ac #237e4d6e #aa03b81', 
    ' #80c00005 #c0400004 #1400180 #1428 #f0000 #0:33 #f03e0000', 
    ' #6bc1c63 #e7007e6 #1cf8934f #4d54785 #b4047b00 #f4bc6e1f #7f019e31', 
    ' #9847be1 #1557d623 #8662e312 #28f5407 #f73afc1e #18f1f018 #20201fc6', 
    ' #61b183c #e0cf3cf0 #87cdfef #37f1d1b0 #3c5900a3 #ef87fd38 #2e003e66', 
    ' #2c0d1f18 #ddf88e42 #132b7c03 #7d009e90 #b9b99791 #781a063 #61c00027', 
    ' #7e624e0 #88780064 #78dffb9b #1de3006c #8d800c32 #ce3e704 #324c2c84', 
    ' #2650fe00 #108026 #e70e9601 #3401e534 #c41e8007 #2cc3190 #682600a4', 
    ' #2107881e #37088c07 #e050c60e #4059f18 #600000c6 #10444c20 #10183027', 
    ' #8008320c #18118001 #500e1f1 #90980220 #24020475 #70008109 #300030', 
    ' #5000c032 #8a0100c9 #40002 #1c000 #82000100 #c00800 #4348', 
    ' #40b10 #4300021c #20e000 #1c020000 #700608 #20051 #40100000', 
    ' #21c9 #4000 #38004000 #3c080000 #1000001 #0 #80000', 
    ' #1000000 #18000040 #802 #40000080 #0 #80002010 #80008', 
    ' #30 #0:4 #2000000 #0:2 #400000 #7100 ]', ), ))
mdb.models['sphere'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=FIELD, fieldName='AnalyticalField-twist-X', fixed=OFF, 
    localCsys=None, name='BC-twist-Z-set', region=
    mdb.models['sphere'].rootAssembly.sets['Set-topbottom'], u1=1.0, u2=UNSET, 
    u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere'].boundaryConditions['BC-twist-Y'].setValues(region=
    mdb.models['sphere'].rootAssembly.sets['Set-topbottom'])
del mdb.models['sphere'].boundaryConditions['BC-twist-Z-set']
mdb.models['sphere'].boundaryConditions['BC-twist-X'].setValues(region=
    mdb.models['sphere'].rootAssembly.sets['Set-topbottom'])
mdb.models['sphere'].boundaryConditions['BC-twist-Z'].setValues(region=
    mdb.models['sphere'].rootAssembly.sets['Set-topbottom'])
mdb.jobs['sphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '8 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_twist.odb', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 225876, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THERE ARE 2 UNCONNECTED REGIONS IN THE MODEL.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'sphere_twist', 'memory': 1995.0})
mdb.jobs['sphere_twist']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 65457.0, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 286.0, 
    'phase': STANDARD_PHASE, 'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 2 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 1U', 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 29 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 2U', 
    'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 3U', 
    'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 9 POINTS', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 4U', 
    'timeIncrement': 0.015625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_twist']._Message(STATUS, {'totalTime': 0.0, 'attempts': ' 5U', 
    'timeIncrement': 0.00390625, 'increment': 1, 'stepTime': 0.0, 'step': 1, 
    'jobName': 'sphere_twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_twist']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ABORTED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_twist'})
mdb.jobs['sphere_twist']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_twist'})
mdb.models['sphere'].analyticalFields['AnalyticalField-twist-Z'].setValues(
    expression='-X*sin(0.005*Y ) +Z*cos(0.005*Y) - Z')
del mdb.models['sphere'].rootAssembly.features['Part-1-2']
mdb.models['sphere'].rootAssembly.makeIndependent(instances=(
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'], ))
mdb.models['sphere'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['sphere'].parts['Part-1'].features['Shell revolve-1'].sketch)
mdb.models['sphere'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['sphere'].sketches['__edit__'], 
    upToFeature=
    mdb.models['sphere'].parts['Part-1'].features['Shell revolve-1'])
del mdb.models['sphere'].sketches['__edit__']
mdb.models['sphere'].rootAssembly.deleteMesh(regions=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['sphere'].rootAssembly.PartitionFaceByShortestPath(faces=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), point1=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].vertices[0], 
    point2=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].InterestingPoint(
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].edges[0], MIDDLE))
mdb.models['sphere'].rootAssembly.PartitionEdgeByParam(edges=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].edges.getSequenceFromMask(
    ('[#1 ]', ), ), parameter=0.00584076684287581)
mdb.models['sphere'].rootAssembly.DatumPlaneByThreePoints(point1=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].vertices[0], 
    point2=mdb.models['sphere'].rootAssembly.instances['Part-1-1'].vertices[2], 
    point3=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].InterestingPoint(
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].edges[1], MIDDLE))
mdb.models['sphere'].rootAssembly.PartitionFaceByDatumPlane(datumPlane=
    mdb.models['sphere'].rootAssembly.datums[12], faces=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['sphere'].rootAssembly.DatumPlaneByRotation(angle=90.0, axis=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].datums[1], plane=
    mdb.models['sphere'].rootAssembly.datums[12])
mdb.models['sphere'].rootAssembly.PartitionFaceByDatumPlane(datumPlane=
    mdb.models['sphere'].rootAssembly.datums[14], faces=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#3 ]', ), ))
mdb.models['sphere'].rootAssembly.generateMesh(regions=(
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'], ))
mdb.models['sphere'].rootAssembly.deleteMesh(regions=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#a ]', ), ))
mdb.models['sphere'].rootAssembly.setMeshControls(regions=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#a ]', ), ), technique=STRUCTURED)
mdb.models['sphere'].rootAssembly.generateMesh(regions=(
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'], ))
mdb.Model(modelType=STANDARD_EXPLICIT, name='sphere_2')
mdb.models['sphere'].rootAssembly.deleteFeatures(('Partition face-1', 
    'Partition edge-1', 'Datum plane-1', 'Partition face-2', 'Datum plane-2', 
    'Partition face-3'))
del mdb.models['sphere'].rootAssembly.sets['Set-topbottom']
mdb.models['sphere'].rootAssembly.setElementType(elemTypes=(ElemType(
    elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ), ))
mdb.models['sphere'].rootAssembly.setMeshControls(algorithm=MEDIAL_AXIS, 
    regions=
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['sphere'].rootAssembly.generateMesh(regions=(
    mdb.models['sphere'].rootAssembly.instances['Part-1-1'], ))
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['sphere_2']
mdb.models['sphere'].rootAssembly.features['Part-1-1'].suppress()
mdb.Model(modelType=STANDARD_EXPLICIT, name='sphere_structured')
mdb.models['sphere_structured'].ConstrainedSketch(name='__profile__', 
    sheetSize=2.0)
mdb.models['sphere_structured'].sketches['__profile__'].ConstructionLine(
    point1=(0.0, -1.0), point2=(0.0, 1.0))
mdb.models['sphere_structured'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['sphere_structured'].sketches['__profile__'].geometry[2])
mdb.models['sphere_structured'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 0.0), point1=(0.675, 0.0))
mdb.models['sphere_structured'].sketches['__profile__'].Line(point1=(0.0, 
    0.674999999988358), point2=(0.0, -0.674999999988358))
mdb.models['sphere_structured'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['sphere_structured'].sketches['__profile__'].geometry[4])
mdb.models['sphere_structured'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['sphere_structured'].sketches['__profile__'].geometry[2], 
    entity2=
    mdb.models['sphere_structured'].sketches['__profile__'].geometry[4])
mdb.models['sphere_structured'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['sphere_structured'].sketches['__profile__'].vertices[2], 
    entity2=
    mdb.models['sphere_structured'].sketches['__profile__'].geometry[2])
mdb.models['sphere_structured'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['sphere_structured'].sketches['__profile__'].vertices[3], 
    entity2=
    mdb.models['sphere_structured'].sketches['__profile__'].geometry[2])
mdb.models['sphere_structured'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['sphere_structured'].sketches['__profile__'].geometry[3], 
    point1=(-0.641350448131561, 0.233549207448959))
mdb.models['sphere_structured'].Part(dimensionality=THREE_D, name='Part-1', 
    type=DEFORMABLE_BODY)
mdb.models['sphere_structured'].parts['Part-1'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['sphere_structured'].sketches['__profile__'])
del mdb.models['sphere_structured'].sketches['__profile__']
mdb.models['sphere_structured'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0125)
mdb.models['sphere_structured'].parts['Part-1'].setElementType(elemTypes=(
    ElemType(elemCode=S4R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    hourglassControl=DEFAULT), ElemType(elemCode=S3, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['sphere_structured'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['sphere_structured'].parts['Part-1'].setMeshControls(algorithm=
    MEDIAL_AXIS, elemShape=QUAD, regions=
    mdb.models['sphere_structured'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['sphere_structured'].parts['Part-1'].generateMesh()
mdb.models['sphere_structured'].Material(name='Neo-Hookean')
mdb.models['sphere_structured'].materials['Neo-Hookean'].Hyperelastic(
    materialType=ISOTROPIC, table=((344828000.0, 3e-10), ), testData=OFF, type=
    NEO_HOOKE, volumetricResponse=VOLUMETRIC_DATA)
mdb.models['sphere_structured'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['sphere_structured'].rootAssembly.Instance(dependent=ON, name=
    'Part-1-1', part=mdb.models['sphere_structured'].parts['Part-1'])
mdb.models['sphere_structured'].ExpressionField(description='', expression='X', 
    localCsys=None, name='AnalyticalField-twist-X')
mdb.models['sphere_structured'].ExpressionField(description='', expression=
    ' Y ', localCsys=None, name='AnalyticalField-twist-Z')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.005*Y) -X+Z*sin(0.005*Y)')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Z'].setValues(
    expression='-X*sin(0.005*Y ) +Z*cos(0.005*Y) - Z')
mdb.models['sphere_structured'].parts['Part-1'].generateMesh()
mdb.models['sphere_structured'].rootAssembly.regenerate()
mdb.models['sphere_structured'].analyticalFields.changeKey(fromName=
    'AnalyticalField-twist-X', toName='AnalyticalField-twist-Y')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='Y*cos(0.005*X) -Y+Z*sin(0.005*X)')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Z'].setValues(
    expression='Y*sin(0.005*X) +Z*cos(0.005*X) - Z')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='Y*cos(0.005*X) -Y-Z*sin(0.005*X)')
mdb.models['sphere_structured'].rootAssembly.Set(name='Set-leftright', nodes=
    mdb.models['sphere_structured'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#8001 #1fffe #0:2 #f800000 #0:9 #80000000 #f', 
    ' #0:9 #fffc0000 #1ff0000 #1fe0 #0 #7f800000 #1fe000', 
    ' #f80007f0 #7e0001 #1f00 #400003 #0:14 #7e000 #780001f0', 
    ' #1e0000 #700 #0:253 #8001f000 #78000f #1e0003c0 #e000', 
    ' #200006 #0:16 #c01f0000 #e007003 #200100 #0:403 #f0000000', 
    ' #1f8003 #78000fc #3000 #1 #0:10 #3f000 #3fc000fe', 
    ' #fe000 #fc0003f0 #380000 #c00 #0:9 #e003fe00 #3fc003f', 
    ' #f8003fc0 #3f0003 #300003c0 #0:11 #fe000000 #ff01fc03 #3e007f00', 
    ' #8001c00 ]', ), ))
mdb.models['sphere_structured'].StaticStep(name='Step-1', nlgeom=ON, previous=
    'Initial')
mdb.models['sphere_structured'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None
    , name='BC-twist-X', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-leftright'], u1=0.0, 
    u2=UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere_structured'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='AnalyticalField-twist-Y', 
    fixed=OFF, localCsys=None, name='BC-twist-Y', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-leftright'], u1=
    UNSET, u2=1.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere_structured'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='AnalyticalField-twist-Z', 
    fixed=OFF, localCsys=None, name='BC-twist-Z', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-leftright'], u1=
    UNSET, u2=UNSET, u3=1.0, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere_structured'].ConstrainedSketch(name='__edit__', 
    objectToCopy=
    mdb.models['sphere_structured'].parts['Part-1'].features['Shell revolve-1'].sketch)
mdb.models['sphere_structured'].parts['Part-1'].projectReferencesOntoSketch(
    filter=COPLANAR_EDGES, sketch=
    mdb.models['sphere_structured'].sketches['__edit__'], upToFeature=
    mdb.models['sphere_structured'].parts['Part-1'].features['Shell revolve-1'])
del mdb.models['sphere_structured'].sketches['__edit__']
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='X*cos(0.005*Z) -X-Y*sin(0.005*Z)')
mdb.models['sphere_structured'].analyticalFields.changeKey(fromName=
    'AnalyticalField-twist-Y', toName='AnalyticalField-twist-X')
mdb.models['sphere_structured'].analyticalFields.changeKey(fromName=
    'AnalyticalField-twist-Z', toName='AnalyticalField-twist-Y')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='X*sin(0.005*Z) +Y*cos(0.005*Z) - Y')
mdb.models['sphere_structured'].boundaryConditions['BC-twist-X'].setValues(
    distributionType=FIELD, fieldName='AnalyticalField-twist-X', u1=1.0)
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Y'].setValues(
    distributionType=UNIFORM, u2=0.0)
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Z'].setValues(
    distributionType=UNIFORM, u3=0.0)
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Y'].setValues(
    distributionType=FIELD, u2=1.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='sphere_structured', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='sphere_structured-twist', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['sphere_structured'].HomogeneousShellSection(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', name=
    'Section-1', nodalThicknessField='', numIntPts=5, poissonDefinition=DEFAULT
    , preIntegrate=OFF, temperature=GRADIENT, thickness=0.0001, thicknessField=
    '', thicknessModulus=None, thicknessType=UNIFORM, useDensity=OFF)
mdb.models['sphere_structured'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=TOP_SURFACE, region=Region(
    faces=mdb.models['sphere_structured'].parts['Part-1'].faces.getSequenceFromMask(
    mask=('[#1 ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['sphere_structured'].rootAssembly.regenerate()
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 236732, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 578.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 4 POINTS', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.0625, 
    'attempts': 3, 'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.0625, 
    'attempts': ' 1U', 'timeIncrement': 0.0625, 'increment': 2, 
    'stepTime': 0.0625, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.078125, 
    'attempts': 2, 'timeIncrement': 0.015625, 'increment': 2, 
    'stepTime': 0.078125, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.078125, 
    'attempts': ' 1U', 'timeIncrement': 0.0234375, 'increment': 3, 
    'stepTime': 0.078125, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.083984375, 
    'attempts': 2, 'timeIncrement': 0.005859375, 'increment': 3, 
    'stepTime': 0.083984375, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0927734375, 'attempts': 1, 'timeIncrement': 0.0087890625, 
    'increment': 4, 'stepTime': 0.0927734375, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0927734375, 'attempts': ' 1U', 
    'timeIncrement': 0.01318359375, 'increment': 5, 'stepTime': 0.0927734375, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0960693359375, 'attempts': 2, 
    'timeIncrement': 0.0032958984375, 'increment': 5, 
    'stepTime': 0.0960693359375, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0960693359375, 'attempts': ' 1U', 
    'timeIncrement': 0.00494384765625, 'increment': 6, 
    'stepTime': 0.0960693359375, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0960693359375, 'attempts': ' 2U', 
    'timeIncrement': 0.0012359619140625, 'increment': 6, 
    'stepTime': 0.0960693359375, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0963783264160156, 'attempts': 3, 
    'timeIncrement': 0.000308990478515625, 'increment': 6, 
    'stepTime': 0.0963783264160156, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0968418121337891, 'attempts': 1, 
    'timeIncrement': 0.000463485717773438, 'increment': 7, 
    'stepTime': 0.0968418121337891, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0968418121337891, 'attempts': ' 1U', 
    'timeIncrement': 0.000695228576660156, 'increment': 8, 
    'stepTime': 0.0968418121337891, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0968418121337891, 'attempts': ' 2U', 
    'timeIncrement': 0.000173807144165039, 'increment': 8, 
    'stepTime': 0.0968418121337891, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.0968418121337891, 'attempts': ' 3U', 
    'timeIncrement': 4.34517860412598e-05, 'increment': 8, 
    'stepTime': 0.0968418121337891, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured-twist'})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.001*Z) -X-Y*sin(0.001*Z)')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='X*sin(0.001*Z) +Y*cos(0.001*Z) - Y')
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF, 
    datacheckJob=True)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 246268, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 425.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 92.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 20:32:15 2019', 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 246012, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 578.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.40625, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 3, 
    'stepTime': 0.40625, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.546875, 
    'attempts': 1, 'timeIncrement': 0.140625, 'increment': 4, 
    'stepTime': 0.546875, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.546875, 
    'attempts': ' 1U', 'timeIncrement': 0.140625, 'increment': 5, 
    'stepTime': 0.546875, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.546875, 
    'attempts': ' 2U', 'timeIncrement': 0.03515625, 'increment': 5, 
    'stepTime': 0.546875, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.546875, 
    'attempts': ' 3U', 'timeIncrement': 0.0087890625, 'increment': 5, 
    'stepTime': 0.546875, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.549072265625, 'attempts': 4, 
    'timeIncrement': 0.002197265625, 'increment': 5, 
    'stepTime': 0.549072265625, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.55126953125, 'attempts': 1, 'timeIncrement': 0.002197265625, 
    'increment': 6, 'stepTime': 0.55126953125, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.55126953125, 'attempts': ' 1U', 
    'timeIncrement': 0.0032958984375, 'increment': 7, 
    'stepTime': 0.55126953125, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.552093505859375, 'attempts': 2, 
    'timeIncrement': 0.000823974609375, 'increment': 7, 
    'stepTime': 0.552093505859375, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.553329467773438, 'attempts': 1, 
    'timeIncrement': 0.0012359619140625, 'increment': 8, 
    'stepTime': 0.553329467773438, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.553329467773438, 'attempts': ' 1U', 
    'timeIncrement': 0.00185394287109375, 'increment': 9, 
    'stepTime': 0.553329467773438, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.553329467773438, 'attempts': ' 2U', 
    'timeIncrement': 0.000463485717773438, 'increment': 9, 
    'stepTime': 0.553329467773438, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.553445339202881, 'attempts': 3, 
    'timeIncrement': 0.000115871429443359, 'increment': 9, 
    'stepTime': 0.553445339202881, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.553619146347046, 'attempts': 1, 
    'timeIncrement': 0.000173807144165039, 'increment': 10, 
    'stepTime': 0.553619146347046, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.553619146347046, 'attempts': ' 1U', 
    'timeIncrement': 0.000260710716247559, 'increment': 11, 
    'stepTime': 0.553619146347046, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='X*sin(0.0001*Z) +Y*cos(0.0001*Z) - Y')
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.553619146347046, 'attempts': ' 2U', 
    'timeIncrement': 6.51776790618896e-05, 'increment': 11, 
    'stepTime': 0.553619146347046, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.0001*Z) -X-Y*sin(0.0001*Z)')
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.553635440766811, 'attempts': 3, 
    'timeIncrement': 1.62944197654724e-05, 'increment': 11, 
    'stepTime': 0.553635440766811, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 218152, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 578.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 20:37:35 2019', 'jobName': 'sphere_structured-twist'})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.0005*Z) -X-Y*sin(0.0005*Z)')
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 250100, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 578.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 21:18:21 2019', 'jobName': 'sphere_structured-twist'})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.001*Z) -X-Y*sin(0.001*Z)')
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 250672, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 578.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': 1, 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured-twist'})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='X*sin(0.0005*Z) +Y*cos(0.0005*Z) - Y')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.0005*Z) -X-Y*sin(0.0005*Z)')
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 251444, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 578.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': 1, 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.875, 
    'attempts': 1, 'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.875, 
    'attempts': ' 1U', 'timeIncrement': 0.125, 'increment': 4, 
    'stepTime': 0.875, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.90625, 
    'attempts': 2, 'timeIncrement': 0.03125, 'increment': 4, 
    'stepTime': 0.90625, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.953125, 
    'attempts': 1, 'timeIncrement': 0.046875, 'increment': 5, 
    'stepTime': 0.953125, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.953125, 
    'attempts': ' 1U', 'timeIncrement': 0.046875, 'increment': 6, 
    'stepTime': 0.953125, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.96484375, 
    'attempts': 2, 'timeIncrement': 0.01171875, 'increment': 6, 
    'stepTime': 0.96484375, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.96484375, 
    'attempts': ' 1U', 'timeIncrement': 0.017578125, 'increment': 7, 
    'stepTime': 0.96484375, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 0.96484375, 
    'attempts': ' 2U', 'timeIncrement': 0.00439453125, 'increment': 7, 
    'stepTime': 0.96484375, 'step': 1, 'jobName': 'sphere_structured-twist', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.9659423828125, 'attempts': 3, 
    'timeIncrement': 0.0010986328125, 'increment': 7, 
    'stepTime': 0.9659423828125, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.96759033203125, 'attempts': 1, 
    'timeIncrement': 0.00164794921875, 'increment': 8, 
    'stepTime': 0.96759033203125, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.96759033203125, 'attempts': ' 1U', 
    'timeIncrement': 0.002471923828125, 'increment': 9, 
    'stepTime': 0.96759033203125, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.968208312988281, 'attempts': 2, 
    'timeIncrement': 0.00061798095703125, 'increment': 9, 
    'stepTime': 0.968208312988281, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='X*sin(0.0001*Z) +Y*cos(0.0001*Z) - Y')
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.968208312988281, 'attempts': ' 1U', 
    'timeIncrement': 0.000926971435546875, 'increment': 10, 
    'stepTime': 0.968208312988281, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.0001*Z) -X-Y*sin(0.0001*Z)')
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {
    'totalTime': 0.968440055847168, 'attempts': 2, 
    'timeIncrement': 0.000231742858886719, 'increment': 10, 
    'stepTime': 0.968440055847168, 'step': 1, 
    'jobName': 'sphere_structured-twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(ERROR, {'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 250192, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 578.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 21:26:20 2019', 'jobName': 'sphere_structured-twist'})
mdb.models['castSeal'].keywordBlock.synchVersions(storeNodesAndElements=False)
mdb.models['sphere_structured'].keywordBlock.synchVersions(
    storeNodesAndElements=False)
mdb.models['sphere_structured'].keywordBlock.setValues(edited=0)
mdb.models['sphere_structured'].fieldOutputRequests['F-Output-1'].setValues(
    directions=OFF, variables=('S', 'PE', 'PEEQ', 'PEMAG', 'LE', 'U', 'UR', 
    'RF', 'CF', 'CSTRESS', 'CDISP', 'COORD'))
mdb.models['sphere_structured'].keywordBlock.synchVersions(
    storeNodesAndElements=False)
mdb.models['sphere_structured'].keywordBlock.setValues(edited=0)
mdb.models['rumbleStrip'].keywordBlock.synchVersions(storeNodesAndElements=
    False)
mdb.models['sphere_structured'].keywordBlock.synchVersions(
    storeNodesAndElements=False)
mdb.models['sphere_structured'].keywordBlock.replace(35, 
    '\n*Contact Output\nCDISP, CSTRESS\n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.models['sphere_structured'].keywordBlock.synchVersions(
    storeNodesAndElements=False)
mdb.models['sphere_structured'].fieldOutputRequests['F-Output-1'].setValues(
    variables=('S', 'U', 'UR', 'COORD'))
mdb.jobs['sphere_structured-twist'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured-twist.odb', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 220260, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured-twist', 
    'memory': 578.0})
mdb.jobs['sphere_structured-twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'sphere_structured-twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured-twist']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured-twist'})
mdb.jobs['sphere_structured-twist']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 21:31:26 2019', 'jobName': 'sphere_structured-twist'})
mdb.Model(modelType=STANDARD_EXPLICIT, name='cylinder')
mdb.models['cylinder'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['cylinder'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -1.0), point2=(0.0, 1.0))
mdb.models['cylinder'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['cylinder'].sketches['__profile__'].geometry[2])
mdb.models['cylinder'].sketches['__profile__'].Line(point1=(0.675, 0.675), 
    point2=(0.675, -0.675))
mdb.models['cylinder'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['cylinder'].sketches['__profile__'].geometry[3])
mdb.models['cylinder'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['cylinder'].parts['Part-1'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['cylinder'].sketches['__profile__'])
del mdb.models['cylinder'].sketches['__profile__']
mdb.models['cylinder'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['cylinder'].parts['Part-1'].features['Shell revolve-1'].sketch)
mdb.models['cylinder'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['cylinder'].sketches['__edit__'], 
    upToFeature=
    mdb.models['cylinder'].parts['Part-1'].features['Shell revolve-1'])
mdb.models['cylinder'].sketches['__edit__'].Line(point1=(0.675, 0.675), point2=
    (0.775, 0.3))
mdb.models['cylinder'].sketches['__edit__'].Line(point1=(0.775, 0.3), point2=(
    1.275, -0.0375))
mdb.models['cylinder'].sketches['__edit__'].Line(point1=(1.275, -0.0375), 
    point2=(0.875, 0.0125))
mdb.models['cylinder'].sketches['__edit__'].undo()
mdb.models['cylinder'].sketches['__edit__'].undo()
mdb.models['cylinder'].sketches['__edit__'].undo()
mdb.models['cylinder'].sketches['__edit__'].undo()
mdb.models['cylinder'].sketches['__edit__'].undo()
#* Nothing to undo.
del mdb.models['cylinder'].sketches['__edit__']
del mdb.models['cylinder'].parts['Part-1']
mdb.models['cylinder'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['cylinder'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -1.0), point2=(0.0, 1.0))
mdb.models['cylinder'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['cylinder'].sketches['__profile__'].geometry[2])
mdb.models['cylinder'].sketches['__profile__'].Line(point1=(0.675, -0.135), 
    point2=(0.675, 1.35))
mdb.models['cylinder'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['cylinder'].sketches['__profile__'].geometry[3])
mdb.models['cylinder'].sketches['__profile__'].undo()
mdb.models['cylinder'].sketches['__profile__'].Line(point1=(0.675, 1.35), 
    point2=(0.0675, -1.35))
mdb.models['cylinder'].sketches['__profile__'].Line(point1=(0.0675, -1.35), 
    point2=(1.5, 0.6125))
mdb.models['cylinder'].sketches['__profile__'].undo()
mdb.models['cylinder'].sketches['__profile__'].undo()
mdb.models['cylinder'].sketches['__profile__'].Line(point1=(0.675, 1.0), 
    point2=(0.675, -1.0))
mdb.models['cylinder'].sketches['__profile__'].VerticalConstraint(addUndoState=
    False, entity=mdb.models['cylinder'].sketches['__profile__'].geometry[3])
mdb.models['cylinder'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['cylinder'].parts['Part-1'].BaseShellRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['cylinder'].sketches['__profile__'])
del mdb.models['cylinder'].sketches['__profile__']
mdb.models['sphere_structured'].steps['Step-1'].setValues(maxNumInc=2000, 
    minInc=1e-12)
mdb.models['sphere_structured'].steps['Step-1'].setValues(maxNumInc=500, 
    minInc=1e-10)
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.0005*Z) -X-Y*sin(0.0005*Z)')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y'].setValues(
    expression='X*sin(0.0005*Z) +Y*cos(0.0005*Z) - Y')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='sphere_structured', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='sphere_structured_twist_try2', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['sphere_structured_twist_try2'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist_try2']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist_try2.odb', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 264776, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist_try2', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist_try2']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured_twist_try2', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'sphere_structured_twist_try2', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': 1, 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'sphere_structured_twist_try2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {'totalTime': 0.875, 
    'attempts': 1, 'timeIncrement': 0.375, 'increment': 3, 'stepTime': 0.875, 
    'step': 1, 'jobName': 'sphere_structured_twist_try2', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {'totalTime': 0.875, 
    'attempts': ' 1U', 'timeIncrement': 0.125, 'increment': 4, 
    'stepTime': 0.875, 'step': 1, 'jobName': 'sphere_structured_twist_try2', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.90625, 'attempts': 2, 'timeIncrement': 0.03125, 
    'increment': 4, 'stepTime': 0.90625, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.953125, 'attempts': 1, 'timeIncrement': 0.046875, 
    'increment': 5, 'stepTime': 0.953125, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.953125, 'attempts': ' 1U', 'timeIncrement': 0.046875, 
    'increment': 6, 'stepTime': 0.953125, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96484375, 'attempts': 2, 'timeIncrement': 0.01171875, 
    'increment': 6, 'stepTime': 0.96484375, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96484375, 'attempts': ' 1U', 'timeIncrement': 0.017578125, 
    'increment': 7, 'stepTime': 0.96484375, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96484375, 'attempts': ' 2U', 'timeIncrement': 0.00439453125, 
    'increment': 7, 'stepTime': 0.96484375, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.9659423828125, 'attempts': 3, 
    'timeIncrement': 0.0010986328125, 'increment': 7, 
    'stepTime': 0.9659423828125, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96759033203125, 'attempts': 1, 
    'timeIncrement': 0.00164794921875, 'increment': 8, 
    'stepTime': 0.96759033203125, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96759033203125, 'attempts': ' 1U', 
    'timeIncrement': 0.002471923828125, 'increment': 9, 
    'stepTime': 0.96759033203125, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968208312988281, 'attempts': 2, 
    'timeIncrement': 0.00061798095703125, 'increment': 9, 
    'stepTime': 0.968208312988281, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968208312988281, 'attempts': ' 1U', 
    'timeIncrement': 0.000926971435546875, 'increment': 10, 
    'stepTime': 0.968208312988281, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968440055847168, 'attempts': 2, 
    'timeIncrement': 0.000231742858886719, 'increment': 10, 
    'stepTime': 0.968440055847168, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968440055847168, 'attempts': ' 1U', 
    'timeIncrement': 0.000347614288330078, 'increment': 11, 
    'stepTime': 0.968440055847168, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96852695941925, 'attempts': 2, 
    'timeIncrement': 8.69035720825195e-05, 'increment': 11, 
    'stepTime': 0.96852695941925, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96852695941925, 'attempts': ' 1U', 
    'timeIncrement': 0.000130355358123779, 'increment': 12, 
    'stepTime': 0.96852695941925, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96852695941925, 'attempts': ' 2U', 
    'timeIncrement': 3.25888395309448e-05, 'increment': 12, 
    'stepTime': 0.96852695941925, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968535106629133, 'attempts': 3, 
    'timeIncrement': 8.14720988273621e-06, 'increment': 12, 
    'stepTime': 0.968535106629133, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968535106629133, 'attempts': ' 1U', 
    'timeIncrement': 1.22208148241043e-05, 'increment': 13, 
    'stepTime': 0.968535106629133, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968535106629133, 'attempts': ' 2U', 
    'timeIncrement': 3.05520370602608e-06, 'increment': 13, 
    'stepTime': 0.968535106629133, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.96853587043006, 'attempts': 3, 
    'timeIncrement': 7.63800926506519e-07, 'increment': 13, 
    'stepTime': 0.96853587043006, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537016131449, 'attempts': 1, 
    'timeIncrement': 1.14570138975978e-06, 'increment': 14, 
    'stepTime': 0.968537016131449, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537016131449, 'attempts': ' 1U', 
    'timeIncrement': 1.71855208463967e-06, 'increment': 15, 
    'stepTime': 0.968537016131449, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537445769471, 'attempts': 2, 
    'timeIncrement': 4.29638021159917e-07, 'increment': 15, 
    'stepTime': 0.968537445769471, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537445769471, 'attempts': ' 1U', 
    'timeIncrement': 6.44457031739876e-07, 'increment': 16, 
    'stepTime': 0.968537445769471, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537606883729, 'attempts': 2, 
    'timeIncrement': 1.61114257934969e-07, 'increment': 16, 
    'stepTime': 0.968537606883729, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537848555115, 'attempts': 1, 
    'timeIncrement': 2.41671386902453e-07, 'increment': 17, 
    'stepTime': 0.968537848555115, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537848555115, 'attempts': ' 1U', 
    'timeIncrement': 2.41671386902453e-07, 'increment': 18, 
    'stepTime': 0.968537848555115, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537908972962, 'attempts': 2, 
    'timeIncrement': 6.04178467256133e-08, 'increment': 18, 
    'stepTime': 0.968537908972962, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537908972962, 'attempts': ' 1U', 
    'timeIncrement': 6.04178467256133e-08, 'increment': 19, 
    'stepTime': 0.968537908972962, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537924077424, 'attempts': 2, 
    'timeIncrement': 1.51044616814033e-08, 'increment': 19, 
    'stepTime': 0.968537924077424, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537939181886, 'attempts': 1, 
    'timeIncrement': 1.51044616814033e-08, 'increment': 20, 
    'stepTime': 0.968537939181886, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 15, 
    'phase': STANDARD_PHASE, 'equilibrium': 15})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537939181886, 'attempts': ' 1U', 
    'timeIncrement': 1.13283462610525e-08, 'increment': 21, 
    'stepTime': 0.968537939181886, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537939181886, 'attempts': ' 2U', 
    'timeIncrement': 2.83208656526313e-09, 'increment': 21, 
    'stepTime': 0.968537939181886, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537939181886, 'attempts': ' 3U', 
    'timeIncrement': 1.41604328263156e-09, 'increment': 21, 
    'stepTime': 0.968537939181886, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 16, 
    'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537939535896, 'attempts': 4, 
    'timeIncrement': 3.54010820657891e-10, 'increment': 21, 
    'stepTime': 0.968537939535896, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537939535896, 'attempts': ' 1U', 
    'timeIncrement': 3.54010820657891e-10, 'increment': 22, 
    'stepTime': 0.968537939535896, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['sphere_structured_twist_try2']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537939535896, 'attempts': ' 2U', 'timeIncrement': 1e-10, 
    'increment': 22, 'stepTime': 0.968537939535896, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {
    'totalTime': 0.968537939535896, 'attempts': 3, 'timeIncrement': 1e-35, 
    'increment': 22, 'stepTime': 0.968537939535896, 'step': 1, 
    'jobName': 'sphere_structured_twist_try2', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['sphere_structured_twist_try2']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(ABORTED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.models['sphere_structured'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.01, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X'].setValues(
    expression='X*cos(0.0025*Z) -X-Y*sin(0.0025*Z)')
mdb.jobs['sphere_structured_twist_try2'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist_try2']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist_try2.odb', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 264628, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist_try2', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist_try2']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'sphere_structured_twist_try2', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured_twist_try2']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist_try2'})
mdb.jobs['sphere_structured_twist_try2']._Message(JOB_COMPLETED, {
    'time': 'Wed Mar 20 23:56:26 2019', 
    'jobName': 'sphere_structured_twist_try2'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['sphere_structured'].rootAssembly.Set(name='Set-left', nodes=
    mdb.models['sphere_structured'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#8000 #0:24 #7800000 #f0000 #e0 #0:706 #2', 
    ' #0:13 #30000 #200000c0 #0:13 #3c000 #3000038 #0:15', ' #10003 ]', ), ))
mdb.models['sphere_structured'].rootAssembly.Set(name='Set-right', nodes=
    mdb.models['sphere_structured'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#1 #1f80 #0:2 #1800000 #0:10 #e #0:13', 
    ' #70000000 #180000 #400 #0:17 #60000 #100 #0:255', 
    ' #1c000 #40000c #0:19 #180000 #2 ]', ), ))
mdb.models['sphere_structured'].ExpressionField(description='', expression=
    'X*cos(30) -X-Y*sin(30)', localCsys=None, name=
    'AnalyticalField-twist-X-CCW')
mdb.models['sphere_structured'].ExpressionField(description='', expression=
    'X*cos(-30) -X-Y*sin(-30)', localCsys=None, name=
    'AnalyticalField-twist-X-CW')
mdb.models['sphere_structured'].ExpressionField(description='', expression=
    'X*sin(30) +Y*cos(30) - Y', localCsys=None, name=
    'AnalyticalField-twist-Y-CCW')
mdb.models['sphere_structured'].ExpressionField(description='', expression=
    'X*sin(-30) +Y*cos(-30) - Y', localCsys=None, name=
    'AnalyticalField-twist-Y-CW')
mdb.models['sphere_structured'].boundaryConditions['BC-twist-X'].suppress()
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Y'].suppress()
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Z'].suppress()
mdb.models['sphere_structured'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='AnalyticalField-twist-X-CCW', 
    fixed=OFF, localCsys=None, name='BC-twist-X-left', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-left'], u1=1.0, u2=
    UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere_structured'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='AnalyticalField-twist-X-CW', 
    fixed=OFF, localCsys=None, name='BC-twist-X-right', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-right'], u1=1.0, u2=
    UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere_structured'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='AnalyticalField-twist-Y-CCW', 
    fixed=OFF, localCsys=None, name='BC-twist-Y-left', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-left'], u1=UNSET, 
    u2=1.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere_structured'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='AnalyticalField-twist-Y-CW', 
    fixed=OFF, localCsys=None, name='BC-twist-Y-right', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-right'], u1=UNSET, 
    u2=1.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Y-right'].setValues(
    u3=0.0)
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Y-left'].setValues(
    u3=0.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='sphere_structured', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='sphere_structured_twist-try3', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['sphere_structured_twist-try3'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist-try3.odb', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 288896, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist-try3', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist-try3']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 57 POINTS', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 0.125, 
    'attempts': 3, 'timeIncrement': 0.125, 'increment': 1, 'stepTime': 0.125, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 1, 'timeIncrement': 0.125, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 116 POINTS', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.125, 'increment': 3, 
    'stepTime': 0.25, 'step': 1, 'jobName': 'sphere_structured_twist-try3', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.28125, 'attempts': 2, 'timeIncrement': 0.03125, 
    'increment': 3, 'stepTime': 0.28125, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 13 POINTS', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.28125, 'attempts': ' 1U', 'timeIncrement': 0.03125, 
    'increment': 4, 'stepTime': 0.28125, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.2890625, 'attempts': 2, 'timeIncrement': 0.0078125, 
    'increment': 4, 'stepTime': 0.2890625, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.2890625, 'attempts': ' 1U', 'timeIncrement': 0.0078125, 
    'increment': 5, 'stepTime': 0.2890625, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.291015625, 'attempts': 2, 'timeIncrement': 0.001953125, 
    'increment': 5, 'stepTime': 0.291015625, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.29296875, 'attempts': 1, 'timeIncrement': 0.001953125, 
    'increment': 6, 'stepTime': 0.29296875, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.29296875, 'attempts': ' 1U', 'timeIncrement': 0.001953125, 
    'increment': 7, 'stepTime': 0.29296875, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.2939453125, 'attempts': 2, 'timeIncrement': 0.0009765625, 
    'increment': 7, 'stepTime': 0.2939453125, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 12, 
    'phase': STANDARD_PHASE, 'equilibrium': 12})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.2939453125, 'attempts': ' 1U', 
    'timeIncrement': 0.000732421875, 'increment': 8, 'stepTime': 0.2939453125, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 0.29412841796875, 'attempts': 2, 
    'timeIncrement': 0.00018310546875, 'increment': 8, 
    'stepTime': 0.29412841796875, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X-CCW'].setValues(
    expression='X*cos(15) -X-Y*sin(15)')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X-CW'].setValues(
    expression='X*cos(-15) -X-Y*sin(-15)')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y-CCW'].setValues(
    expression='X*sin(15) +Y*cos(15) - Y')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y-CW'].setValues(
    expression='X*sin(-15) +Y*cos(-15) - Y')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['sphere_structured'].sections['Section-1'].setValues(idealization=
    NO_IDEALIZATION, integrationRule=SIMPSON, material='Neo-Hookean', 
    nodalThicknessField='', numIntPts=5, preIntegrate=OFF, thickness=0.1, 
    thicknessField='', thicknessType=UNIFORM)
mdb.models['sphere_structured'].steps['Step-1'].setValues(initialInc=1e-12, 
    maxNumInc=2000, minInc=1e-12)
mdb.jobs['sphere_structured_twist-try3'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist-try3.odb', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 287840, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist-try3', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist-try3']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 1e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 1, 'stepTime': 1e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 2e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 2, 'stepTime': 2e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.5e-12, 'attempts': 1, 'timeIncrement': 1.5e-12, 
    'increment': 3, 'stepTime': 3.5e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.75e-12, 'attempts': 1, 'timeIncrement': 2.25e-12, 
    'increment': 4, 'stepTime': 5.75e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 9.125e-12, 'attempts': 1, 'timeIncrement': 3.375e-12, 
    'increment': 5, 'stepTime': 9.125e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.41875e-11, 'attempts': 1, 'timeIncrement': 5.0625e-12, 
    'increment': 6, 'stepTime': 1.41875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.178125e-11, 'attempts': 1, 'timeIncrement': 7.59375e-12, 
    'increment': 7, 'stepTime': 2.178125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.3171875e-11, 'attempts': 1, 'timeIncrement': 1.1390625e-11, 
    'increment': 8, 'stepTime': 3.3171875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.02578125e-11, 'attempts': 1, 
    'timeIncrement': 1.70859375e-11, 'increment': 9, 
    'stepTime': 5.02578125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 7.588671875e-11, 'attempts': 1, 
    'timeIncrement': 2.562890625e-11, 'increment': 10, 
    'stepTime': 7.588671875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.14330078125e-10, 'attempts': 1, 
    'timeIncrement': 3.8443359375e-11, 'increment': 11, 
    'stepTime': 1.14330078125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.719951171875e-10, 'attempts': 1, 
    'timeIncrement': 5.76650390625e-11, 'increment': 12, 
    'stepTime': 1.719951171875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.5849267578125e-10, 'attempts': 1, 
    'timeIncrement': 8.649755859375e-11, 'increment': 13, 
    'stepTime': 2.5849267578125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.5849267578125e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.29746337890625e-10, 'increment': 14, 
    'stepTime': 2.5849267578125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.90929260253906e-10, 'attempts': 2, 
    'timeIncrement': 3.24365844726562e-11, 'increment': 14, 
    'stepTime': 2.90929260253906e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.90929260253906e-10, 'attempts': ' 1U', 
    'timeIncrement': 4.86548767089844e-11, 'increment': 15, 
    'stepTime': 2.90929260253906e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.90929260253906e-10, 'attempts': ' 2U', 
    'timeIncrement': 1.21637191772461e-11, 'increment': 15, 
    'stepTime': 2.90929260253906e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.93970190048218e-10, 'attempts': 3, 
    'timeIncrement': 3.04092979431152e-12, 'increment': 15, 
    'stepTime': 2.93970190048218e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.93970190048218e-10, 'attempts': ' 1U', 
    'timeIncrement': 4.56139469146729e-12, 'increment': 16, 
    'stepTime': 2.93970190048218e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.95110538721085e-10, 'attempts': 2, 
    'timeIncrement': 1.14034867286682e-12, 'increment': 16, 
    'stepTime': 2.95110538721085e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.95110538721085e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.71052300930023e-12, 'increment': 17, 
    'stepTime': 2.95110538721085e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.96110538721085e-10, 'attempts': 2, 'timeIncrement': 1e-12, 
    'increment': 17, 'stepTime': 2.96110538721085e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.96110538721085e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.5e-12, 'increment': 18, 
    'stepTime': 2.96110538721085e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.96110538721085e-10, 'attempts': ' 2U', 
    'timeIncrement': 1e-12, 'increment': 18, 'stepTime': 2.96110538721085e-10, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.96110538721085e-10, 'attempts': 3, 'timeIncrement': 1e-35, 
    'increment': 18, 'stepTime': 2.96110538721085e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ABORTED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X-CCW'].setValues(
    expression='X*cos(5) -X-Y*sin(5)')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y-CCW'].setValues(
    expression='X*sin(5) +Y*cos(5) - Y')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y-CW'].setValues(
    expression='X*sin(-5) +Y*cos(-5) - Y')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X-CW'].setValues(
    expression='X*cos(-5) -X-Y*sin(-5)')
mdb.jobs['sphere_structured_twist-try3'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist-try3.odb', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 291072, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist-try3', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist-try3']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 1e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 1, 'stepTime': 1e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 2e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 2, 'stepTime': 2e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.5e-12, 'attempts': 1, 'timeIncrement': 1.5e-12, 
    'increment': 3, 'stepTime': 3.5e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.75e-12, 'attempts': 1, 'timeIncrement': 2.25e-12, 
    'increment': 4, 'stepTime': 5.75e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 9.125e-12, 'attempts': 1, 'timeIncrement': 3.375e-12, 
    'increment': 5, 'stepTime': 9.125e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.41875e-11, 'attempts': 1, 'timeIncrement': 5.0625e-12, 
    'increment': 6, 'stepTime': 1.41875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.178125e-11, 'attempts': 1, 'timeIncrement': 7.59375e-12, 
    'increment': 7, 'stepTime': 2.178125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.3171875e-11, 'attempts': 1, 'timeIncrement': 1.1390625e-11, 
    'increment': 8, 'stepTime': 3.3171875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.02578125e-11, 'attempts': 1, 
    'timeIncrement': 1.70859375e-11, 'increment': 9, 
    'stepTime': 5.02578125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 7.588671875e-11, 'attempts': 1, 
    'timeIncrement': 2.562890625e-11, 'increment': 10, 
    'stepTime': 7.588671875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.14330078125e-10, 'attempts': 1, 
    'timeIncrement': 3.8443359375e-11, 'increment': 11, 
    'stepTime': 1.14330078125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.719951171875e-10, 'attempts': 1, 
    'timeIncrement': 5.76650390625e-11, 'increment': 12, 
    'stepTime': 1.719951171875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.5849267578125e-10, 'attempts': 1, 
    'timeIncrement': 8.649755859375e-11, 'increment': 13, 
    'stepTime': 2.5849267578125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.88239013671875e-10, 'attempts': 1, 
    'timeIncrement': 1.29746337890625e-10, 'increment': 14, 
    'stepTime': 3.88239013671875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.88239013671875e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.94619506835937e-10, 'increment': 15, 
    'stepTime': 3.88239013671875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 4.36893890380859e-10, 'attempts': 2, 
    'timeIncrement': 4.86548767089844e-11, 'increment': 15, 
    'stepTime': 4.36893890380859e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.09876205444336e-10, 'attempts': 1, 
    'timeIncrement': 7.29823150634766e-11, 'increment': 16, 
    'stepTime': 5.09876205444336e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.09876205444336e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.09473472595215e-10, 'increment': 17, 
    'stepTime': 5.09876205444336e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.3724457359314e-10, 'attempts': 2, 
    'timeIncrement': 2.73683681488037e-11, 'increment': 17, 
    'stepTime': 5.3724457359314e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.3724457359314e-10, 'attempts': ' 1U', 
    'timeIncrement': 4.10525522232056e-11, 'increment': 18, 
    'stepTime': 5.3724457359314e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.47507711648941e-10, 'attempts': 2, 
    'timeIncrement': 1.02631380558014e-11, 'increment': 18, 
    'stepTime': 5.47507711648941e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.47507711648941e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.53947070837021e-11, 'increment': 19, 
    'stepTime': 5.47507711648941e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-X-CW'].setValues(
    expression='X*cos(5) -X+Y*sin(5)')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y-CCW'].setValues(
    expression='-X*sin(5) +Y*cos(5) - Y')
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y-CW'].setValues(
    expression='-X*sin(5) +Y*cos(5) - Y')
mdb.jobs['sphere_structured_twist-try3'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist-try3.odb', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 281452, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist-try3', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist-try3']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 1e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 1, 'stepTime': 1e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 2e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 2, 'stepTime': 2e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.5e-12, 'attempts': 1, 'timeIncrement': 1.5e-12, 
    'increment': 3, 'stepTime': 3.5e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.75e-12, 'attempts': 1, 'timeIncrement': 2.25e-12, 
    'increment': 4, 'stepTime': 5.75e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 9.125e-12, 'attempts': 1, 'timeIncrement': 3.375e-12, 
    'increment': 5, 'stepTime': 9.125e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.41875e-11, 'attempts': 1, 'timeIncrement': 5.0625e-12, 
    'increment': 6, 'stepTime': 1.41875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.178125e-11, 'attempts': 1, 'timeIncrement': 7.59375e-12, 
    'increment': 7, 'stepTime': 2.178125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.3171875e-11, 'attempts': 1, 'timeIncrement': 1.1390625e-11, 
    'increment': 8, 'stepTime': 3.3171875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.02578125e-11, 'attempts': 1, 
    'timeIncrement': 1.70859375e-11, 'increment': 9, 
    'stepTime': 5.02578125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 7.588671875e-11, 'attempts': 1, 
    'timeIncrement': 2.562890625e-11, 'increment': 10, 
    'stepTime': 7.588671875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.14330078125e-10, 'attempts': 1, 
    'timeIncrement': 3.8443359375e-11, 'increment': 11, 
    'stepTime': 1.14330078125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.719951171875e-10, 'attempts': 1, 
    'timeIncrement': 5.76650390625e-11, 'increment': 12, 
    'stepTime': 1.719951171875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.5849267578125e-10, 'attempts': 1, 
    'timeIncrement': 8.649755859375e-11, 'increment': 13, 
    'stepTime': 2.5849267578125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.88239013671875e-10, 'attempts': 1, 
    'timeIncrement': 1.29746337890625e-10, 'increment': 14, 
    'stepTime': 3.88239013671875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.82858520507813e-10, 'attempts': 1, 
    'timeIncrement': 1.94619506835937e-10, 'increment': 15, 
    'stepTime': 5.82858520507813e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.82858520507813e-10, 'attempts': ' 1U', 
    'timeIncrement': 2.91929260253906e-10, 'increment': 16, 
    'stepTime': 5.82858520507813e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.82858520507813e-10, 'attempts': ' 2U', 
    'timeIncrement': 7.29823150634766e-11, 'increment': 16, 
    'stepTime': 5.82858520507813e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.01104099273682e-10, 'attempts': 3, 
    'timeIncrement': 1.82455787658691e-11, 'increment': 16, 
    'stepTime': 6.01104099273682e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.01104099273682e-10, 'attempts': ' 1U', 
    'timeIncrement': 2.73683681488037e-11, 'increment': 17, 
    'stepTime': 6.01104099273682e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.07946191310883e-10, 'attempts': 2, 
    'timeIncrement': 6.84209203720093e-12, 'increment': 17, 
    'stepTime': 6.07946191310883e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.07946191310883e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.02631380558014e-11, 'increment': 18, 
    'stepTime': 6.07946191310883e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.10511975824833e-10, 'attempts': 2, 
    'timeIncrement': 2.56578451395035e-12, 'increment': 18, 
    'stepTime': 6.10511975824833e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.14360652595758e-10, 'attempts': 1, 
    'timeIncrement': 3.84867677092552e-12, 'increment': 19, 
    'stepTime': 6.14360652595758e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['sphere_structured_twist-try3'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist-try3.odb', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 312504, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist-try3', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist-try3']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 1e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 1, 'stepTime': 1e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 2e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 2, 'stepTime': 2e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.5e-12, 'attempts': 1, 'timeIncrement': 1.5e-12, 
    'increment': 3, 'stepTime': 3.5e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.75e-12, 'attempts': 1, 'timeIncrement': 2.25e-12, 
    'increment': 4, 'stepTime': 5.75e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 9.125e-12, 'attempts': 1, 'timeIncrement': 3.375e-12, 
    'increment': 5, 'stepTime': 9.125e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.41875e-11, 'attempts': 1, 'timeIncrement': 5.0625e-12, 
    'increment': 6, 'stepTime': 1.41875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.178125e-11, 'attempts': 1, 'timeIncrement': 7.59375e-12, 
    'increment': 7, 'stepTime': 2.178125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.3171875e-11, 'attempts': 1, 'timeIncrement': 1.1390625e-11, 
    'increment': 8, 'stepTime': 3.3171875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.02578125e-11, 'attempts': 1, 
    'timeIncrement': 1.70859375e-11, 'increment': 9, 
    'stepTime': 5.02578125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 7.588671875e-11, 'attempts': 1, 
    'timeIncrement': 2.562890625e-11, 'increment': 10, 
    'stepTime': 7.588671875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.14330078125e-10, 'attempts': 1, 
    'timeIncrement': 3.8443359375e-11, 'increment': 11, 
    'stepTime': 1.14330078125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.719951171875e-10, 'attempts': 1, 
    'timeIncrement': 5.76650390625e-11, 'increment': 12, 
    'stepTime': 1.719951171875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.5849267578125e-10, 'attempts': 1, 
    'timeIncrement': 8.649755859375e-11, 'increment': 13, 
    'stepTime': 2.5849267578125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.88239013671875e-10, 'attempts': 1, 
    'timeIncrement': 1.29746337890625e-10, 'increment': 14, 
    'stepTime': 3.88239013671875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.82858520507813e-10, 'attempts': 1, 
    'timeIncrement': 1.94619506835937e-10, 'increment': 15, 
    'stepTime': 5.82858520507813e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.82858520507813e-10, 'attempts': ' 1U', 
    'timeIncrement': 2.91929260253906e-10, 'increment': 16, 
    'stepTime': 5.82858520507813e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.models['sphere_structured'].analyticalFields['AnalyticalField-twist-Y-CCW'].setValues(
    expression='X*sin(5) +Y*cos(5) - Y')
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.82858520507813e-10, 'attempts': ' 2U', 
    'timeIncrement': 7.29823150634766e-11, 'increment': 16, 
    'stepTime': 5.82858520507813e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.01104099273682e-10, 'attempts': 3, 
    'timeIncrement': 1.82455787658691e-11, 'increment': 16, 
    'stepTime': 6.01104099273682e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.01104099273682e-10, 'attempts': ' 1U', 
    'timeIncrement': 2.73683681488037e-11, 'increment': 17, 
    'stepTime': 6.01104099273682e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.07946191310883e-10, 'attempts': 2, 
    'timeIncrement': 6.84209203720093e-12, 'increment': 17, 
    'stepTime': 6.07946191310883e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.07946191310883e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.02631380558014e-11, 'increment': 18, 
    'stepTime': 6.07946191310883e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.10511975824833e-10, 'attempts': 2, 
    'timeIncrement': 2.56578451395035e-12, 'increment': 18, 
    'stepTime': 6.10511975824833e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.14360652595758e-10, 'attempts': 1, 
    'timeIncrement': 3.84867677092552e-12, 'increment': 19, 
    'stepTime': 6.14360652595758e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.14360652595758e-10, 'attempts': ' 1U', 
    'timeIncrement': 5.77301515638828e-12, 'increment': 20, 
    'stepTime': 6.14360652595758e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 6.14360652595758e-10, 'attempts': ' 2U', 
    'timeIncrement': 1.44325378909707e-12, 'increment': 20, 
    'stepTime': 6.14360652595758e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist-try3.odb', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 314852, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist-try3', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist-try3']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 1e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 1, 'stepTime': 1e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {'totalTime': 2e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 2, 'stepTime': 2e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.5e-12, 'attempts': 1, 'timeIncrement': 1.5e-12, 
    'increment': 3, 'stepTime': 3.5e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.75e-12, 'attempts': 1, 'timeIncrement': 2.25e-12, 
    'increment': 4, 'stepTime': 5.75e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 9.125e-12, 'attempts': 1, 'timeIncrement': 3.375e-12, 
    'increment': 5, 'stepTime': 9.125e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.41875e-11, 'attempts': 1, 'timeIncrement': 5.0625e-12, 
    'increment': 6, 'stepTime': 1.41875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.178125e-11, 'attempts': 1, 'timeIncrement': 7.59375e-12, 
    'increment': 7, 'stepTime': 2.178125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.3171875e-11, 'attempts': 1, 'timeIncrement': 1.1390625e-11, 
    'increment': 8, 'stepTime': 3.3171875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.02578125e-11, 'attempts': 1, 
    'timeIncrement': 1.70859375e-11, 'increment': 9, 
    'stepTime': 5.02578125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 7.588671875e-11, 'attempts': 1, 
    'timeIncrement': 2.562890625e-11, 'increment': 10, 
    'stepTime': 7.588671875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.14330078125e-10, 'attempts': 1, 
    'timeIncrement': 3.8443359375e-11, 'increment': 11, 
    'stepTime': 1.14330078125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 1.719951171875e-10, 'attempts': 1, 
    'timeIncrement': 5.76650390625e-11, 'increment': 12, 
    'stepTime': 1.719951171875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 2.5849267578125e-10, 'attempts': 1, 
    'timeIncrement': 8.649755859375e-11, 'increment': 13, 
    'stepTime': 2.5849267578125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.88239013671875e-10, 'attempts': 1, 
    'timeIncrement': 1.29746337890625e-10, 'increment': 14, 
    'stepTime': 3.88239013671875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 3.88239013671875e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.94619506835937e-10, 'increment': 15, 
    'stepTime': 3.88239013671875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 4.36893890380859e-10, 'attempts': 2, 
    'timeIncrement': 4.86548767089844e-11, 'increment': 15, 
    'stepTime': 4.36893890380859e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.09876205444336e-10, 'attempts': 1, 
    'timeIncrement': 7.29823150634766e-11, 'increment': 16, 
    'stepTime': 5.09876205444336e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.09876205444336e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.09473472595215e-10, 'increment': 17, 
    'stepTime': 5.09876205444336e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.3724457359314e-10, 'attempts': 2, 
    'timeIncrement': 2.73683681488037e-11, 'increment': 17, 
    'stepTime': 5.3724457359314e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.3724457359314e-10, 'attempts': ' 1U', 
    'timeIncrement': 4.10525522232056e-11, 'increment': 18, 
    'stepTime': 5.3724457359314e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.47507711648941e-10, 'attempts': 2, 
    'timeIncrement': 1.02631380558014e-11, 'increment': 18, 
    'stepTime': 5.47507711648941e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.47507711648941e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.53947070837021e-11, 'increment': 19, 
    'stepTime': 5.47507711648941e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.51356388419866e-10, 'attempts': 2, 
    'timeIncrement': 3.84867677092552e-12, 'increment': 19, 
    'stepTime': 5.51356388419866e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.51356388419866e-10, 'attempts': ' 1U', 
    'timeIncrement': 5.77301515638828e-12, 'increment': 20, 
    'stepTime': 5.51356388419866e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['sphere_structured_twist-try3']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.52799642208964e-10, 'attempts': 2, 
    'timeIncrement': 1.44325378909707e-12, 'increment': 20, 
    'stepTime': 5.52799642208964e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.52799642208964e-10, 'attempts': ' 1U', 
    'timeIncrement': 2.16488068364561e-12, 'increment': 21, 
    'stepTime': 5.52799642208964e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 8, 
    'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Time increment required is less than the minimum specified', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.52799642208964e-10, 'attempts': ' 2U', 
    'timeIncrement': 1e-12, 'increment': 21, 'stepTime': 5.52799642208964e-10, 
    'step': 1, 'jobName': 'sphere_structured_twist-try3', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist-try3']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(STATUS, {
    'totalTime': 5.52799642208964e-10, 'attempts': 3, 'timeIncrement': 1e-35, 
    'increment': 21, 'stepTime': 5.52799642208964e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist-try3', 'severe': 0, 'iterations': 0, 
    'phase': STANDARD_PHASE, 'equilibrium': 0})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ABORTED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.jobs['sphere_structured_twist-try3']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist-try3'})
mdb.models['sphere_structured'].boundaryConditions['BC-twist-X-left'].suppress(
    )
mdb.models['sphere_structured'].boundaryConditions['BC-twist-X-right'].suppress(
    )
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Y-left'].suppress(
    )
mdb.models['sphere_structured'].boundaryConditions['BC-twist-Y-right'].suppress(
    )
mdb.models['sphere_structured'].ExpressionField(description='', expression=
    '0.5*Z', localCsys=None, name='AnalyticalField-shear-in-Y')
mdb.models['sphere_structured'].rootAssembly.Set(name='Set-leftright14', nodes=
    mdb.models['sphere_structured'].rootAssembly.instances['Part-1-1'].nodes.getSequenceFromMask(
    mask=('[#0 #600 #0:2 #800000 #0:25 #100000 #0:18', ' #20000 ]', ), ))
mdb.models['sphere_structured'].rootAssembly.sets.changeKey(fromName=
    'Set-leftright14', toName='Set-fixedleft')
mdb.models['sphere_structured'].rootAssembly.sets.changeKey(fromName=
    'Set-fixedleft', toName='Set-fixedright')
mdb.models['sphere_structured'].EncastreBC(createStepName='Step-1', localCsys=
    None, name='BC-fixleft', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-fixedright'])
mdb.models['sphere_structured'].boundaryConditions['BC-fixleft'].resume()
mdb.models['sphere_structured'].boundaryConditions.changeKey(fromName=
    'BC-fixleft', toName='BC-fixright')
mdb.models['sphere_structured'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName='AnalyticalField-twist-X-CCW', 
    fixed=OFF, localCsys=None, name='BC-rotateright', region=
    mdb.models['sphere_structured'].rootAssembly.sets['Set-right'], u1=1.0, u2=
    UNSET, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['sphere_structured'].boundaryConditions.changeKey(fromName=
    'BC-rotateright', toName='BC-rotateright-X')
mdb.models['sphere_structured'].BoundaryCondition(name='BC-rotateright-Y', 
    objectToCopy=
    mdb.models['sphere_structured'].boundaryConditions['BC-rotateright-X'], 
    toStepName='Step-1')
mdb.models['sphere_structured'].boundaryConditions['BC-rotateright-Y'].setValues(
    fieldName='AnalyticalField-twist-Y-CCW', u1=UNSET, u2=1.0, u3=0.0)
mdb.models['sphere_structured'].boundaryConditions['BC-rotateright-X'].setValues(
    region=mdb.models['sphere_structured'].rootAssembly.sets['Set-left'])
mdb.models['sphere_structured'].boundaryConditions['BC-rotateright-Y'].setValues(
    region=mdb.models['sphere_structured'].rootAssembly.sets['Set-left'])
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='sphere_structured', modelPrint=
    OFF, multiprocessingMode=DEFAULT, name='sphere_structured_twist_try4', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['sphere_structured_twist_try4'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist_try4']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist_try4.odb', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 314528, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist_try4', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist_try4']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 1e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 1, 'stepTime': 1e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 2e-12, 
    'attempts': 1, 'timeIncrement': 1e-12, 'increment': 2, 'stepTime': 2e-12, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 3.5e-12, 'attempts': 1, 'timeIncrement': 1.5e-12, 
    'increment': 3, 'stepTime': 3.5e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 5.75e-12, 'attempts': 1, 'timeIncrement': 2.25e-12, 
    'increment': 4, 'stepTime': 5.75e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 9.125e-12, 'attempts': 1, 'timeIncrement': 3.375e-12, 
    'increment': 5, 'stepTime': 9.125e-12, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 1.41875e-11, 'attempts': 1, 'timeIncrement': 5.0625e-12, 
    'increment': 6, 'stepTime': 1.41875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 2.178125e-11, 'attempts': 1, 'timeIncrement': 7.59375e-12, 
    'increment': 7, 'stepTime': 2.178125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 3.3171875e-11, 'attempts': 1, 'timeIncrement': 1.1390625e-11, 
    'increment': 8, 'stepTime': 3.3171875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 5.02578125e-11, 'attempts': 1, 
    'timeIncrement': 1.70859375e-11, 'increment': 9, 
    'stepTime': 5.02578125e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 7.588671875e-11, 'attempts': 1, 
    'timeIncrement': 2.562890625e-11, 'increment': 10, 
    'stepTime': 7.588671875e-11, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 1.14330078125e-10, 'attempts': 1, 
    'timeIncrement': 3.8443359375e-11, 'increment': 11, 
    'stepTime': 1.14330078125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 1.719951171875e-10, 'attempts': 1, 
    'timeIncrement': 5.76650390625e-11, 'increment': 12, 
    'stepTime': 1.719951171875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 2.5849267578125e-10, 'attempts': 1, 
    'timeIncrement': 8.649755859375e-11, 'increment': 13, 
    'stepTime': 2.5849267578125e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 3.88239013671875e-10, 'attempts': 1, 
    'timeIncrement': 1.29746337890625e-10, 'increment': 14, 
    'stepTime': 3.88239013671875e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 5.82858520507813e-10, 'attempts': 1, 
    'timeIncrement': 1.94619506835937e-10, 'increment': 15, 
    'stepTime': 5.82858520507813e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 8.74787780761719e-10, 'attempts': 1, 
    'timeIncrement': 2.91929260253906e-10, 'increment': 16, 
    'stepTime': 8.74787780761719e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 8.74787780761719e-10, 'attempts': ' 1U', 
    'timeIncrement': 4.37893890380859e-10, 'increment': 17, 
    'stepTime': 8.74787780761719e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 9.84261253356933e-10, 'attempts': 2, 
    'timeIncrement': 1.09473472595215e-10, 'increment': 17, 
    'stepTime': 9.84261253356933e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 9.84261253356933e-10, 'attempts': ' 1U', 
    'timeIncrement': 1.64210208892822e-10, 'increment': 18, 
    'stepTime': 9.84261253356933e-10, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'There is zero MOMENT everywhere in the model based on the default criterion. please check the value of the average MOMENT during the current iteration to verify that the MOMENT is small enough to be treated as zero. if not, please use the solution controls to reset the criterion for zero MOMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 1.02531380558014e-09, 'attempts': 2, 
    'timeIncrement': 4.10525522232056e-11, 'increment': 18, 
    'stepTime': 1.02531380558014e-09, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['sphere_structured_twist_try4']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.models['sphere_structured'].steps['Step-1'].setValues(initialInc=1.0, 
    minInc=1e-12)
mdb.models['sphere_structured'].steps['Step-1'].setValues(minInc=1e-10)
mdb.jobs['sphere_structured_twist_try4'].submit(consistencyChecking=OFF)
mdb.jobs['sphere_structured_twist_try4']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': '30 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\sphere_structured_twist_try4.odb', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 320296, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'sphere_structured_twist_try4', 
    'memory': 578.0})
mdb.jobs['sphere_structured_twist_try4']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 94.0, 'phase': STANDARD_PHASE, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'THE STRAINS ARE SO LARGE THAT THE PROGRAM WILL NOT ATTEMPT THE HYPERELASTICITY CALCULATION AT 22751 POINTS', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.0625, 
    'attempts': 3, 'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.125, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.1875, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.1875, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 4, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 5, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 6, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.4375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 7, 'stepTime': 0.4375, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 8, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {'totalTime': 0.5625, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 9, 'stepTime': 0.5625, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.609375, 'attempts': 1, 'timeIncrement': 0.046875, 
    'increment': 10, 'stepTime': 0.609375, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.609375, 'attempts': ' 1U', 'timeIncrement': 0.046875, 
    'increment': 11, 'stepTime': 0.609375, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.6328125, 'attempts': 2, 'timeIncrement': 0.0234375, 
    'increment': 11, 'stepTime': 0.6328125, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 13, 
    'phase': STANDARD_PHASE, 'equilibrium': 13})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.650390625, 'attempts': 1, 'timeIncrement': 0.017578125, 
    'increment': 12, 'stepTime': 0.650390625, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 10, 
    'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'FORCE equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'MOMENT equilibrium accepted using the alternate tolerance.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.66796875, 'attempts': 1, 'timeIncrement': 0.017578125, 
    'increment': 13, 'stepTime': 0.66796875, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 16, 
    'phase': STANDARD_PHASE, 'equilibrium': 16})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.66796875, 'attempts': ' 1U', 'timeIncrement': 0.01318359375, 
    'increment': 14, 'stepTime': 0.66796875, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.66796875, 'attempts': ' 2U', 
    'timeIncrement': 0.006591796875, 'increment': 14, 'stepTime': 0.66796875, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.66796875, 'attempts': ' 3U', 
    'timeIncrement': 0.0032958984375, 'increment': 14, 'stepTime': 0.66796875, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 10, 'phase': STANDARD_PHASE, 'equilibrium': 10})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.66796875, 'attempts': ' 4U', 
    'timeIncrement': 0.00164794921875, 'increment': 14, 'stepTime': 0.66796875, 
    'step': 1, 'jobName': 'sphere_structured_twist_try4', 'severe': 0, 
    'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.66796875, 'attempts': ' 5U', 
    'timeIncrement': 0.000823974609375, 'increment': 14, 
    'stepTime': 0.66796875, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try4']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Too many attempts made for this increment', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(STATUS, {
    'totalTime': 0.66796875, 'attempts': 6, 'timeIncrement': 1e-35, 
    'increment': 14, 'stepTime': 0.66796875, 'step': 1, 
    'jobName': 'sphere_structured_twist_try4', 'severe': 0, 'iterations': 9, 
    'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['sphere_structured_twist_try4']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'THE ANALYSIS HAS BEEN TERMINATED DUE TO PREVIOUS ERRORS. ALL OUTPUT REQUESTS HAVE BEEN WRITTEN FOR THE LAST CONVERGED INCREMENT.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ABORTED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase failed due to errors', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist_try4'})
mdb.jobs['sphere_structured_twist_try4']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'sphere_structured_twist_try4'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='solidsphere')
mdb.models['solidsphere'].ConstrainedSketch(name='__profile__', sheetSize=2.0)
mdb.models['solidsphere'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -1.0), point2=(0.0, 1.0))
mdb.models['solidsphere'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[2])
mdb.models['solidsphere'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 0.0), point1=(0.675, 0.0))
mdb.models['solidsphere'].sketches['__profile__'].Line(point1=(0.0, 
    0.674999999988358), point2=(0.0, -0.674999999988358))
mdb.models['solidsphere'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[4])
mdb.models['solidsphere'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[4])
mdb.models['solidsphere'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['solidsphere'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[2])
mdb.models['solidsphere'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['solidsphere'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[2])
mdb.models['solidsphere'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[3], point1=(
    -0.565081059932709, 0.372082233428955))
mdb.models['solidsphere'].Part(dimensionality=THREE_D, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['solidsphere'].parts['Part-1'].BaseSolidRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['solidsphere'].sketches['__profile__'])
del mdb.models['solidsphere'].sketches['__profile__']
mdb.models['solidsphere'].Material(name='Material-1')
mdb.models['solidsphere'].materials['Material-1'].Hyperelastic(materialType=
    ISOTROPIC, table=((344828000.0, 3e-10), ), testData=OFF, type=NEO_HOOKE, 
    volumetricResponse=VOLUMETRIC_DATA)
mdb.models['solidsphere'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['solidsphere'].materials.changeKey(fromName='Material-1', toName=
    'Neo-Hookean')
mdb.models['solidsphere'].sections['Section-1'].setValues(material=
    'Neo-Hookean', thickness=None)
mdb.models['solidsphere'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['solidsphere'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['solidsphere'].parts['Part-1'])
mdb.models['solidsphere'].parts['Part-1'].Set(faces=
    mdb.models['solidsphere'].parts['Part-1'].faces.getSequenceFromMask((
    '[#1 ]', ), ), name='Set-bc')
del mdb.models['solidsphere'].parts['Part-1'].sets['Set-bc']
mdb.models['solidsphere'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.0125)
mdb.models['solidsphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['solidsphere'].parts['Part-1'].setMeshControls(regions=
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=BOTTOM_UP)
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['solidsphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['solidsphere'].parts['Part-1'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['solidsphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['solidsphere'].parts['Part-1'].generateMesh()
mdb.models['solidsphere'].parts['Part-1'].generateMesh(boundaryPreview=ON)
mdb.models['solidsphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['solidsphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD), ElemType(elemCode=C3D6, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D4, elemLibrary=STANDARD, 
    secondOrderAccuracy=OFF, distortionControl=DEFAULT)), regions=(
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['solidsphere'].parts['Part-1'].deleteMesh(regions=
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].setMeshControls(elemShape=HEX, 
    regions=
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['solidsphere'].parts['Part-1'].DatumPlaneByPrincipalPlane(offset=0.0
    , principalPlane=XYPLANE)
mdb.models['solidsphere'].parts['Part-1'].DatumPlaneByPrincipalPlane(offset=0.0
    , principalPlane=YZPLANE)
mdb.models['solidsphere'].parts['Part-1'].DatumPlaneByPrincipalPlane(offset=0.0
    , principalPlane=XZPLANE)
mdb.models['solidsphere'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#1 ]', ), ), datumPlane=
    mdb.models['solidsphere'].parts['Part-1'].datums[14])
mdb.models['solidsphere'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#3 ]', ), ), datumPlane=
    mdb.models['solidsphere'].parts['Part-1'].datums[13])
mdb.models['solidsphere'].parts['Part-1'].PartitionCellByDatumPlane(cells=
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#f ]', ), ), datumPlane=
    mdb.models['solidsphere'].parts['Part-1'].datums[12])
mdb.models['solidsphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#ff ]', ), ), ))
mdb.models['solidsphere'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    distortionControl=DEFAULT)), regions=(
    mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask((
    '[#ff ]', ), ), ))
mdb.models['solidsphere'].parts['Part-1'].generateMesh()
mdb.models['solidsphere'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=Region(
    cells=mdb.models['solidsphere'].parts['Part-1'].cells.getSequenceFromMask(
    mask=('[#ff ]', ), )), sectionName='Section-1', thicknessAssignment=
    FROM_SECTION)
mdb.models['solidsphere'].rootAssembly.regenerate()
mdb.models['solidsphere'].rootAssembly.Set(cells=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), name='Set-bc')
mdb.models['solidsphere'].StaticStep(name='Step-1', previous='Initial')
mdb.models['solidsphere'].ExpressionField(description='', expression=
    'Y*cos(15)-Y-Z*sin(15)', localCsys=None, name=
    'AnalyticalField-rot-around-X-CCW_Y')
mdb.models['solidsphere'].ExpressionField(description='', expression=
    'Y*sin(15)+Z*cos(15)-Z', localCsys=None, name=
    'AnalyticalField-rot-around-X-CCW_Z')
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-leftfixed', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#20 #0:819 #800000 #0:803 #200000 #0:334 #800', ' #0:248 #800000 ]', ), 
    ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-right_twist', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#2 #0:4 #1c0 #0 #3c000000 #0:16 #f00', 
    ' #0:8 #3c00000 #0:68 #20 #0:189 #1e00000 #0', 
    ' #6 #6000 #2000000 #0:660 #780 #1c0000 #60000000', 
    ' #0 #100 #0:220 #78000000 #0 #e0 #18000', 
    ' #2000000 #0:718 #f000 #1c00000 #0 #3 #400', ' #0:2946 #1 ]', ), ))
mdb.models['solidsphere'].rootAssembly.regenerate()
mdb.models['solidsphere'].EncastreBC(createStepName='Step-1', localCsys=None, 
    name='BC-lefyfixed', region=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].sets['Set-leftfixed'])
mdb.models['solidsphere'].boundaryConditions.changeKey(fromName='BC-lefyfixed', 
    toName='BC-leftfixed')
mdb.models['solidsphere'].DisplacementBC(amplitude=UNSET, createStepName=
    'Step-1', distributionType=FIELD, fieldName=
    'AnalyticalField-rot-around-X-CCW_Y', fixed=OFF, localCsys=None, name=
    'BC-rightrot', region=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].sets['Set-right_twist']
    , u1=UNSET, u2=1.0, u3=UNSET, ur1=UNSET, ur2=UNSET, ur3=UNSET)
mdb.models['solidsphere'].BoundaryCondition(name='BC-rightrot-Z', objectToCopy=
    mdb.models['solidsphere'].boundaryConditions['BC-rightrot'], toStepName=
    'Step-1')
mdb.models['solidsphere'].boundaryConditions.changeKey(fromName='BC-rightrot', 
    toName='BC-rightrot-Y')
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].setValues(
    fieldName='AnalyticalField-rot-around-X-CCW_Z', u1=0.0, u2=UNSET, u3=1.0)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='solidsphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='solidsphere_twist', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].fieldOutputRequests['F-Output-1'].setValues(
    directions=OFF, variables=('S', 'U', 'UR', 'COORD'))
mdb.jobs['solidsphere_twist']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(INTERRUPTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].keywordBlock.synchVersions(storeNodesAndElements=
    False)
mdb.jobs['solidsphere_twist']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'solidsphere_twist'})
mdb.models['rumbleStrip'].keywordBlock.synchVersions(storeNodesAndElements=
    False)
mdb.models['solidsphere'].keywordBlock.synchVersions(storeNodesAndElements=
    False)
mdb.models['solidsphere'].keywordBlock.replace(37, 
    '\n*Element Output, directions=NO\nS, \n*EL PRINT, POSITION=AVERAGED AT NODES\nDG')
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '31381 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'THE NLGEOM FLAG MUST BE SET ON THE *STEP OPTION IF A HYPERELASTIC, A HYPERFOAM, OR A FABRIC MATERIAL IS USED.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].steps['Step-1'].setValues(nlgeom=ON)
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '31381 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 334500, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 
    'memory': 58911.0})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 4454.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(.5)-Y-Z*sin(.5)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(.5)+Z*cos(.5)-Z')
mdb.models['solidsphere'].steps['Step-1'].setValues(maxNumInc=2000, minInc=
    1e-10)
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '31381 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '31381 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 11948, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 11948, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 
    'memory': 58911.0})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 
    'memory': 58911.0})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 4454.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 4454.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(.005)-Y-Z*sin(.005)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(.005)+Z*cos(.005)-Z')
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': '31381 elements are distorted. Either the isoparametric angles are out of the suggested limits or the triangular or tetrahedral quality measure is bad. The elements have been identified in element set WarnElemDistorted.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 10700, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 
    'memory': 58911.0})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 4454.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphere_twist'})
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['solidsphere_twist']._Message(ERROR, {
    'message': 'The executable standard.exe aborted with system error code 1073740791. Please check the .dat, .msg, and .sta files for error messages if the files exist.  If there are no error messages and you cannot resolve the problem, please run the command "abaqus job=support information=support" to report and save your system information.  Use the same command to run Abaqus that you used when the problem occurred.  Please contact your local Abaqus support office and send them the input file, the file support.log which you just created, the executable name, and the error code.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(JOB_ABORTED, {
    'message': 'The executable standard.exe aborted with system error code 1073740791. Please check the .dat, .msg, and .sta files for error messages if the files exist.  If there are no error messages and you cannot resolve the problem, please run the command "abaqus job=support information=support" to report and save your system information.  Use the same command to run Abaqus that you used when the problem occurred.  Please contact your local Abaqus support office and send them the input file, the file support.log which you just created, the executable name, and the error code.', 
    'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-righttwist_big', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#ffffffa3 #fffffff #0 #1ffc0 #0 #1ff #0', 
    ' #fc000000 #3 #0:4 #7ffc #ffc00000 #ffffffff #7ff', 
    ' #0:3 #80000000 #7ffff #0 #ffe00000 #ffff #0:5', 
    ' #c0000000 #1f #0 #fffc000 #0:5 #18 #0', 
    ' #ff800000 #ffffffff:7 #f1ffffff #ffffffff #fff8000f #7fff #3ffff00', 
    ' #f8000000 #1f #e000 #0:43 #7800000 #0 #3c', 
    ' #1e000 #f800000 #0 #7c #3e000 #1f000000 #0', 
    ' #fc #7e000 #3f000000 #0:13 #1ffc #ffe000 #ff000000', 
    ' #7 #3ff8 #1ffc000 #0:76 #ff000000 #ffffffff:7 #fc00ffff', 
    ' #3fff #ffe0 #f0000 #0:45 #ffffffc0 #ffffffff #ff3fffff', 
    ' #0:24 #1e00000 #0 #f #7800 #3c00000 #0', 
    ' #1e #f000 #7800000 #0 #3c #0:156 #7ff0', 
    ' #3ff8000 #fc000000 #1f #ffe0 #7ff0000 #f8000000 #3f', 
    ' #1ffc0 #ffe0000 #f0000000 #7f #3ff80 #1ffc0000 #e0000000', 
    ' #ff #7ff00 #180000 #0:63 #fc000000 #7f #3fff0', 
    ' #fffc000 #ff000000 #3f #fffc #3fff000 #ffc00000 #f', 
    ' #3fff #fffc00 #fff00000 #c0000003 #fff #7fff00 #fffc0000', 
    ' #f0000001 #7ff #1fffc0 #7fff0000 #fc000000 #1ff #7fff0', 
    ' #1fffc000 #ff000000 #ff #3fffc #ffff000 #ffc00000 #3f', 
    ' #ffff #7fffc00 #fff00000 #c000001f #7fff #1ffff00 #fffc0000', 
    ' #f0000007 #3fff #ffffc0 #ffff0000 #fc000003 #fff #7ffff0', 
    ' #ffffc000 #ff000001 #7ff #3ffffc #fffff000 #ffc00000 #3ff', 
    ' #1fffff #7ffffc00 #fff00000 #c00001ff #7ffff #0:13 #ffc00000', 
    ' #ffffffff:6 #f #0:6 #7ff0000 #f8000000 #3f #1ffc0', 
    ' #fff0000 #f8000000 #7f #3ffc0 #1ffe0000 #f0000000 #ff', 
    ' #7ff80 #3ffc0000 #e0000000 #1ff #fff80 #7ffc0000 #e0000000', 
    ' #3ff #1fff00 #fff80000 #c0000000 #7ff #3fff00 #fff80000', 
    ' #c0000001 #fff #7ffe00 #fff00000 #c0000003 #1fff #fffe00', 
    ' #fff00000 #80000007 #3fff #1fffc00 #fff00000 #8000000f #7fff', 
    ' #3fffc00 #ffe00000 #8000001f #ffff #7fffc00 #ffe00000 #8000003f', 
    ' #1ffff #ffffc00 #ffe00000 #8000007f #3ffff #1ffffc00 #ffe00000', 
    ' #800000ff #7ffff #3ffffc00 #ffe00000 #1ff #0:12 #ff800000', 
    ' #ffffffff:5 #3ffffff #0:119 #ff800000 #7ff #fffff #1ffffe00', 
    ' #fffc0000 #f800003f #7fff #fffff0 #ffffe000 #ffc00001 #800003ff', 
    ' #7ffff #fffff00 #fffe0000 #fc00001f #3fff #7ffff8 #fffff000', 
    ' #ffe00000 #c00001ff #3ffff #7ffff80 #ffff0000 #fe00001f #3fff', 
    ' #0:29 #fffe0000 #ffffffff:14 #7ffffff #fe00000 #0:39 #80000000', 
    ' #ffffffff:2 #1e7fffff #0:23 #780 #3c0000 #e0000000 #1', 
    ' #f00 #780000 #c0000000 #3 #1e00 #f00000 #0:215', 
    ' #7f800000 #0 #ff #1fe00 #3fc0000 #f8000000 #7', 
    ' #ff8 #1ff000 #3fe00000 #c0000000 #7f #ff80 #1ff0000', 
    ' #fe000000 #3 #0:107 #1f000 #3e00000 #c0000000 #7', 
    ' #f80 #1f0000 #3e000000 #0 #7c #0:59 #fffffe00', 
    ' #ffffffff:9 #1ffffff #3fffffe #3ffff000 #ff800000 #7 #1fc', 
    ' #6000 #0:41 #fffffffc #ffffffff:2 #83ffffff #f #0:22', 
    ' #7f000000 #0 #3f8 #1fc000 #fc000000 #0 #7e0', 
    ' #3f0000 #f8000000 #1 #fc0 #7e0000 #f0000000 #3', 
    ' #1f80 #fc0000 #e0000000 #7 #3e00 #1f00000 #80000000', 
    ' #f #7c00 #3e00000 #0 #1f #f800 #7c00000', 
    ' #0 #3e #1f000 #f800000 #0 #7c #3e000', 
    ' #1e000000 #0 #f0 #78000 #3c000000 #0 #1e0', 
    ' #f0000 #78000000 #0 #3c0 #1e0000 #f0000000 #0', 
    ' #780 #3c0000 #e0000000 #1 #f00 #780000 #c0000000', 
    ' #3 #fffffc00 #7f #0:26 #3f8 #1fc000 #fe000000', 
    ' #0 #7f0 #3f8000 #fc000000 #1 #fe0 #7f0000', 
    ' #f8000000 #3 #1fc0 #fe0000 #f0000000 #7 #3f80', 
    ' #0:64 #600000 #0 #3 #1800 #c00000 #0', 
    ' #6 #3000 #1800000 #0 #c #6000 #3000000', 
    ' #0 #18 #c000 #6000000 #0 #30 #18000', 
    ' #1c000000 #0 #e0 #70000 #38000000 #0 #1c0', 
    ' #0:254 #ff00 #1fe0000 #fc000000 #3 #7f8 #ff000', 
    ' #1fe00000 #c0000000 #3f #7f80 #ff0000 #fe000000 #1', 
    ' #3fc #7f800 #0:38 #fe000000 #fff #7ffff0 #0:163', 
    ' #1800000 #0 #6 #1800 #600000 #80000000 #1', 
    ' #600 #180000 #e0000000 #0 #380 #e0000 #38000000', 
    ' #0:15 #fff80000 #ffffffff:3 #1ffff #7fffff8 #0 #1f', 
    ' #0:47 #c00000 #0 #6 #0:222 #1f8000 #7e000000', 
    ' #0 #1f8 #7e000 #3f800000 #0 #fe #3f800', 
    ' #fe00000 #80000000 #3f #0:135 #ffffffe0 #ffffffff:7 #fffffff9', 
    ' #ff0007ff #1fffff #7ffff000 #80000000 #1ff #70000 #0:40', 
    ' #fffffe00 #ffffffff:7 #ffffffdf #f0007fff #1ffffff #ffff0000 #7', 
    ' #1ff8 #700000 #0:40 #ffffe000 #ffffffff:8 #8007ffff #1fffffff', 
    ' #fff00000 #7f #1ffc0 #7000000 #0:40 #fffe0000 #ffffffff:8', 
    ' #7fffff #fffffffc #ff800001 #7ff #1ffc00 #70000000 #0:40', 
    ' #ffe00000 #ffffffff:8 #7ffffff #ffffffe0 #f800001f #7fff #1ffc000', 
    ' #0 #7 #0:39 #fe000000 #ffffff #fffffff8 #ffffe003', 
    ' #ff800fff #3fffff #fffffffe #fffff800 #ffe001ff #7ffff #1ffffe00', 
    ' #c0000000 #7f #0:42 #e0000000 #ffff #3ffff80 #fffe0000', 
    ' #f800000f #3fff #ffffe0 #ffff8000 #fe000003 #fff #3ff000', 
    ' #0:45 #7fe #1ff800 #7fe00000 #80000000 #1ff #ffe00', 
    ' #3ff80000 #e0000000 #ff #38000 #0:45 #e0 #38000', 
    ' #1e000000 #0 #78 #1e000 #7800000 #0 #3e', 
    ' #0:1811 #78000 #1e000000 #0 #78 #1f000 #7c00000', 
    ' #0 #1f #7c00 #1f80000 #e0000000 #7 #1f80', 
    ' #780000 #e0000000 #1 #780 #1f0000 #7c000000 #0', 
    ' #1f0 #7c000 #1f800000 #0 #7e #1f800 #7800000', 
    ' #0 #1e #7c00 #1f00000 #c0000000 #7 #1f00', 
    ' #7c0000 #f8000000 #1 #7e0 #1f8000 #78000000 #0', 
    ' #1e0 #7c000 #1f000000 #0 #7c #1f000 #7c00000', 
    ' #80000000 #1f #7e00 #1f80000 #80000000 #7 #1e00', 
    ' #7c0000 #f0000000 #1 #7c0 #1f0000 #7e000000 #0', 
    ' #1f8 #7e000 #1f800000 #0 #78 #1e000 #7c00000', 
    ' #0 #1f #7c00 #1f00000 #e0000000 #7 #1f80', 
    ' #7e0000 #f8000000 #1 #780 #1e0000 #7c000000 #0', 
    ' #1f0 #7c000 #1f000000 #0 #7e #1f800 #7e00000', 
    ' #80000000 #1f #7800 #1e00000 #c0000000 #7 #1f00', 
    ' #7c0000 #f0000000 #1 #7e0 #1f8000 #7e000000 #0', 
    ' #1fc #0:3 #7c #1f000 #7c00000 #80000000 #1f', 
    ' #7e00 #1f80000 #e0000000 #7 #1fc0 #0:1513 #ff800000', 
    ' #7ff #1ffffe #7ffff800 #ffe00000 #c00001ff #7ffff #1fffff00', 
    ' #fffc0000 #f000007f #1ffff #7ffffc0 #ffff0000 #fc00001f #7fff', 
    ' #1fffff0 #ffffc000 #ff000007 #1fff #7ffffe #fffff800 #ffe00001', 
    ' #800007ff #1fffff #7ffffe00 #fff80000 #e00001ff #7ffff #fffff80', 
    ' #fffe0000 #fc000000 #f #f0 #0:169 #fc000000 #1f', 
    ' #7ff0 #1ffc000 #ff000000 #7 #1ffc #7ff000 #ffc00000', 
    ' #1 #7ff #1ffc00 #7ff00000 #c0000000 #1ff #7ff00', 
    ' #1ffc0000 #f0000000 #f #0:35 #7ff00000 #c0000000 #1ff', 
    ' #7ff00 #1ffc0000 #f0000000 #7f #1ffc0 #7ff0000 #fc000000', 
    ' #1f #7ff0 #1ffc000 #ff000000 #7 #1ffc #7ff000', 
    ' #ffc00000 #1 #0:35 #1ffc000 #ff000000 #7 #1ffc', 
    ' #7ff000 #ffc00000 #1 #7ff #1ffc00 #7ff00000 #c0000000', 
    ' #1ff #7ff00 #1ffc0000 #f0000000 #7f #1ffc0 #7ff0000', 
    ' #0:36 #7ff80 #1ffe0000 #f0000000 #7f #1ffc0 #7ff0000', 
    ' #fc000000 #1f #7ff0 #1ffc000 #ff000000 #7 #1ffc', 
    ' #7ff000 #ffc00000 #1 #7ff #1ffc00 #0:36 #1ffe', 
    ' #7ff800 #ffe00000 #80000001 #7ff #1ffe00 #7ff80000 #e0000000', 
    ' #1ff #7ff80 #1ffe0000 #f8000000 #7f #1ffe0 #7ff8000', 
    ' #fe000000 #1f #7ff8 #0:35 #f8000000 #7f #1ffe0', 
    ' #7ff8000 #fe000000 #1f #7ff8 #1ffe000 #ff800000 #7', 
    ' #1ffe #7ff800 #ffe00000 #80000001 #7ff #1ffe00 #7ff80000', 
    ' #e0000000 #1ff #0:35 #ffe00000 #80000001 #7ff #1ffe00', 
    ' #7ff80000 #e0000000 #1ff #7ff80 #1ffe0000 #f8000000 #7f', 
    ' #1ffe0 #7ff8000 #fe000000 #1f #7ff8 #1ffe000 #ff800000', 
    ' #7 #0:35 #7ff8000 #fe000000 #1f #7ff8 #1ffe000', 
    ' #ff800000 #7 #1ffe #7ff800 #ffe00000 #80000001 #7ff', 
    ' #1ffe00 #7ff80000 #e0000000 #1ff #7ff80 #1ffe0000 #18000000', 
    ' #0:35 #1ffe00 #7ff80000 #e0000000 #1ff #7ff80 #1ffe0000', 
    ' #f8000000 #7f #1ffe0 #7ff8000 #fe000000 #1f #7ff8', 
    ' #1ffe000 #ff800000 #7 #1ffe #7ff800 #3e00000 #0:35', 
    ' #7ff8 #1ffe000 #ff800000 #7 #1ffe #7ff800 #ffe00000', 
    ' #80000001 #7ff #1ffe00 #7ff80000 #e0000000 #1ff #7ff80', 
    ' #1ffe0000 #f8000000 #7f #1ffe0 #3f8000 #0:34 #e0000000', 
    ' #1ff #7ff80 #1ffe0000 #f8000000 #7f #1ffe0 #7ff8000', 
    ' #fe000000 #1f #7ff8 #1fff000 #ffc00000 #7 #1fff', 
    ' #7ffc00 #fff00000 #c0000001 #7ff #7ff00 #0:34 #ffc00000', 
    ' #7 #1fff #7ffc00 #fff00000 #c0000001 #7ff #1fff00', 
    ' #7ffc0000 #f0000000 #1ff #7ffc0 #1fff0000 #fc000000 #7f', 
    ' #1fff0 #7ffc000 #ff000000 #1f #7ffc #0:34 #1fff0000', 
    ' #fc000000 #7f #1fff0 #7ffc000 #ff000000 #1f #7ffc', 
    ' #1fff000 #ffc00000 #7 #1fff #7ffc00 #fff00000 #c0000001', 
    ' #7ff #1fff00 #7ffc0000 #f0000000 #1ff #0:34 #7ffc00', 
    ' #fff00000 #c0000001 #7ff #1fff00 #7ffc0000 #f0000000 #1ff', 
    ' #7ffc0 #1fff0000 #fc000000 #7f #1fff0 #7ffc000 #ff000000', 
    ' #1f #7ffc #1fff000 #ffc00000 #7 #3 #0:33', 
    ' #1fff0 #7ffc000 #ff000000 #1f #7ffc #1fff000 #ffc00000', 
    ' #7 #1fff #7ffc00 #fff00000 #c0000001 #7ff #1fff00', 
    ' #7ffc0000 #f0000000 #1ff #7ffc0 #1fff0000 #3c000000 #0:33', 
    ' #c0000000 #7ff #1fff00 #7ffc0000 #f0000000 #1ff #7ffc0', 
    ' #1fff0000 #fc000000 #7f #1fff0 #7ffc000 #ff000000 #1f', 
    ' #7ffc #1fff800 #ffe00000 #80000007 #1fff #7ffe00 #3f80000', 
    ' #0:33 #ff000000 #1f #7ffc #1fff000 #ffc00000 #7', 
    ' #1fff #7ffe00 #fff80000 #e0000001 #7ff #1fff80 #7ffe0000', 
    ' #f8000000 #1ff #7ffe0 #1fff8000 #fe000000 #7f #1fff8', 
    ' #7fe000 #0:33 #7ffe0000 #f8000000 #1ff #7ffe0 #1fff8000', 
    ' #fe000000 #7f #1fff8 #7ffe000 #ff800000 #1f #7ffe', 
    ' #1fff800 #ffe00000 #80000007 #1fff #7ffe00 #fff80000 #e0000001', 
    ' #7ff #7ff80 #0:33 #1fff800 #ffe00000 #80000007 #1fff', 
    ' #7ffe00 #fff80000 #e0000001 #7ff #1fff80 #7ffe0000 #f8000000', 
    ' #1ff #7ffe0 #1fff8000 #fe000000 #7f #1fff8 #7ffe000', 
    ' #ff800000 #1f #7ffe #1800 #0:32 #7ffe0 #1fff8000', 
    ' #fe000000 #7f #1fff8 #7ffe000 #ff800000 #1f #7ffe', 
    ' #1fff800 #ffe00000 #80000007 #1fff #7ffe00 #fff80000 #e0000001', 
    ' #7ff #1fff80 #7fff0000 #fc000000 #1ff #1f0 #0:31', 
    ' #80000000 #1fff #7ffe00 #fff80000 #e0000001 #7ff #1fff80', 
    ' #7ffe0000 #f8000000 #1ff #7ffe0 #1fff8000 #ff000000 #7f', 
    ' #1fffc #7fff000 #ffc00000 #1f #7fff #1fffc00 #fff00000', 
    ' #c0000007 #1f #0:31 #fe000000 #7f #1fff8 #7ffe000', 
    ' #ff800000 #1f #7ffe #1fffc00 #fff00000 #c0000007 #1fff', 
    ' #7fff00 #fffc0000 #f0000001 #7ff #1fffc0 #7fff0000 #fc000000', 
    ' #1ff #7fff0 #1fffc000 #ff000000 #1 #0:31 #fffc0000', 
    ' #f0000001 #7ff #1fffc0 #7fff0000 #fc000000 #1ff #7fff0', 
    ' #1fffc000 #ff000000 #7f #1fffc #7fff000 #ffc00000 #1f', 
    ' #7fff #1fffc00 #fff00000 #c0000007 #1fff #7fff00 #1ffc0000', 
    ' #30000000 #0:31 #7fff000 #ffc00000 #1f #7fff #1fffc00', 
    ' #fff00000 #c0000007 #1fff #7fff00 #fffc0000 #f0000001 #7ff', 
    ' #1fffc0 #7fff0000 #fc000000 #1ff #7fff0 #1fffc000 #ff800000', 
    ' #7f #1fffe #3fff800 #3e00000 #0:31 #1fffc0 #7fff0000', 
    ' #fc000000 #1ff #7fff0 #1fffc000 #ff000000 #7f #1fffc', 
    ' #7fff000 #ffc00000 #1f #7fff #1fffe00 #fff80000 #e0000007', 
    ' #1fff #7fff80 #fffe0000 #f8000001 #7ff #1fffe0 #3f8000', 
    ' #0:31 #7fff #1fffc00 #fff00000 #c0000007 #1fff #7fff00', 
    ' #fffc0000 #f8000001 #7ff #1fffe0 #7fff8000 #fe000000 #1ff', 
    ' #7fff8 #1fffe000 #ff800000 #7f #1fffe #7fff800 #ffe00000', 
    ' #8000001f #7fff #3fe00 #80000 #0:29 #fc000000 #1ff', 
    ' #7fff0 #1fffe000 #ff800000 #7f #1fffe #7fff800 #ffe00000', 
    ' #8000001f #7fff #1fffe00 #fff80000 #e0000007 #1fff #7fff80', 
    ' #fffe0000 #f8000001 #7ff #1fffe0 #7fff8000 #fe000000 #1ff', 
    ' #3ffc #f000 #0:29 #fff80000 #e0000007 #1fff #7fff80', 
    ' #fffe0000 #f8000001 #7ff #1fffe0 #7fff8000 #fe000000 #1ff', 
    ' #7fff8 #1fffe000 #ff800000 #7f #1fffe #7fff800 #fff00000', 
    ' #c000001f #7fff #1ffff00 #fffc0000 #f0000007 #3ff #fc0', 
    ' #0:29 #1fffe000 #ff800000 #7f #1fffe #7fff800 #ffe00000', 
    ' #8000001f #7fff #1fffe00 #fff80000 #e0000007 #1fff #7fffc0', 
    ' #ffff0000 #fc000001 #7ff #1ffff0 #7fffc000 #ff000000 #1ff', 
    ' #7fffc #1ffff000 #ffc00000 #3f #ff #400 #0:28', 
    ' #7fff80 #fffe0000 #f8000001 #7ff #1fffe0 #7fff8000 #ff000000', 
    ' #1ff #7fffc #1ffff000 #ffc00000 #7f #1ffff #7fffc00', 
    ' #fff00000 #c000001f #7fff #1ffff00 #fffc0000 #f0000007 #1fff', 
    ' #7fffc0 #ffff0000 #fe000001 #f #38 #0:28 #1fffe', 
    ' #7fffc00 #fff00000 #c000001f #7fff #1ffff00 #fffc0000 #f0000007', 
    ' #1fff #7fffc0 #ffff0000 #fc000001 #7ff #1ffff0 #7fffc000', 
    ' #ff000000 #1ff #7fffc #1ffff800 #ffe00000 #8000007f #1ffff', 
    ' #7fffe00 #fff80000 #e0000000 #7 #0:27 #fc000000 #7ff', 
    ' #1ffff0 #7fffc000 #ff000000 #1ff #7fffc #1ffff000 #ffc00000', 
    ' #7f #1ffff #7fffc00 #fff00000 #c000001f #7fff #1ffff80', 
    ' #fffe0000 #f8000007 #1fff #7fffe0 #ffff8000 #fe000001 #7ff', 
    ' #1ffff8 #fffe000 #7f800000 #0 #2 #0:26 #fff00000', 
    ' #c000001f #7fff #1ffff00 #fffc0000 #f0000007 #1fff #7fffc0', 
    ' #ffff0000 #fe000001 #7ff #1ffff8 #7fffe000 #ff800000 #1ff', 
    ' #7fffe #1ffff800 #ffe00000 #8000007f #1ffff #7fffe00 #fff80000', 
    ' #e000001f #7fff #1ffffc0 #7ff0000 #3c000000 #0:27 #7fffc000', 
    ' #ff000000 #1ff #7fffc #1ffff800 #ffe00000 #8000007f #1ffff', 
    ' #7fffe00 #fff80000 #e000001f #7fff #1ffff80 #fffe0000 #f8000007', 
    ' #1fff #7fffe0 #ffff8000 #ff000001 #7ff #1ffffc #7ffff000', 
    ' #ffc00000 #1ff #7ffff #7ffc00 #3f00000 #0:27 #1ffff80', 
    ' #fffe0000 #f8000007 #1fff #7fffe0 #ffff8000 #fe000001 #7ff', 
    ' #1ffff8 #7fffe000 #ff800000 #1ff #7fffe #1ffff800 #fff00000', 
    ' #c000007f #1ffff #7ffff00 #fffc0000 #f000001f #7fff #1ffffc0', 
    ' #ffff0000 #fc000007 #1fff #7fff0 #3fe000 #3800000 #0:26', 
    ' #7fffe #1ffff800 #ffe00000 #8000007f #1ffff #7fffe00 #fff80000', 
    ' #e000001f #7fff #1ffffc0 #ffff0000 #fc000007 #1fff #7ffff0', 
    ' #ffffc000 #ff000001 #7ff #1ffffc #7ffff000 #ffc00000 #1ff', 
    ' #7ffff #1ffffe00 #fff80000 #e000007f #ffff #7ff80 #3e0000', 
    ' #0:25 #f8000000 #1fff #7fffe0 #ffff8000 #ff000001 #7ff', 
    ' #1ffffc #7ffff000 #ffc00000 #1ff #7ffff #1ffffc00 #fff00000', 
    ' #c000007f #1ffff #7ffff00 #fffc0000 #f800001f #7fff #1ffffe0', 
    ' #ffff8000 #fe000007 #1fff #7ffff8 #ffffe000 #ff800001 #7ff', 
    ' #7ffe #3f800 #700000 #0:24 #fff00000 #c000007f #1ffff', 
    ' #7ffff00 #fffc0000 #f000001f #7fff #1ffffc0 #ffff0000 #fc000007', 
    ' #1fff #7ffff0 #ffffc000 #ff800001 #7ff #1ffffe #7ffff800', 
    ' #ffe00000 #800001ff #7ffff #1ffffe00 #fff80000 #e000007f #1ffff', 
    ' #7ffff80 #ffff0000 #fc00001f #7ff #7ff0 #7c000 #0:24', 
    ' #ffffc000 #ff000001 #7ff #1ffffc #7ffff000 #ffc00000 #1ff', 
    ' #7ffff #1ffffe00 #fff80000 #e000007f #1ffff #7ffff80 #fffe0000', 
    ' #f800001f #7fff #1ffffe0 #ffff8000 #fe000007 #1fff #7ffffc', 
    ' #fffff000 #ffc00001 #7ff #1fffff #7ffffc00 #fff00000 #c00000ff', 
    ' #7ff #7f00 #40000 #0:23 #7ffff00 #fffc0000 #f800001f', 
    ' #7fff #1ffffe0 #ffff8000 #fe000007 #1fff #7ffff8 #ffffe000', 
    ' #ff800001 #7ff #1ffffe #7ffff800 #ffe00000 #c00001ff #7ffff', 
    ' #1fffff00 #fffc0000 #f000007f #1ffff #7ffffc0 #ffff0000 #fc00001f', 
    ' #7fff #1fffff0 #ffffc000 #ff800007 #7f #7fe #f800', 
    ' #0:23 #1ffffe #7ffff800 #ffe00000 #800001ff #7ffff #1ffffe00', 
    ' #fff80000 #e000007f #1ffff #7ffff80 #fffe0000 #fc00001f #7fff', 
    ' #1fffff0 #ffffc000 #ff000007 #1fff #7ffffc #fffff000 #ffc00001', 
    ' #7ff #1fffff #7ffffe00 #fff80000 #e00001ff #7ffff #1fffff80', 
    ' #fffe0000 #f800000f #7f #fe0 #8000 #0:21 #f8000000', 
    ' #7fff #1ffffe0 #ffff8000 #fe000007 #1fff #7ffff8 #ffffe000', 
    ' #ffc00001 #7ff #1fffff #7ffffc00 #fff00000 #c00001ff #7ffff', 
    ' #1fffff00 #fffc0000 #f000007f #1ffff #7ffffc0 #ffff8000 #fe00001f', 
    ' #7fff #1fffff8 #ffffe000 #ff800007 #1fff #7ffffe #7ffff800', 
    ' #ffe00000 #80000007 #7f #700 #0:1110 #fffff800 #ffffffff:5', 
    ' #1ffffff #0:6 #ffffffe0 #ffffffff:5 #87ffff #0:5 #80000000', 
    ' #ffffffff:6 #63fff #0:5 #fe000000 #ffffffff:6 #38ff #0:5', 
    ' #fff80000 #ffffffff:6 #e3 #0:5 #ffffe000 #ffffffff:5 #9fffffff', 
    ' #7 #0:5 #ffffff80 #ffffffff:5 #1e7fffff #0:6 #fffffffe', 
    ' #ffffffff:5 #20f9ffff #0:5 #f8000000 #ffffffff:6 #83e7ff #0:5', 
    ' #ffe00000 #ffffffff:6 #60fbf #0:5 #ffff8000 #ffffffff:6 #187e', 
    ' #0:5 #fffffe00 #ffffffff:5 #fbffffff #e1 #0:5 #fffffff8', 
    ' #ffffffff:5 #87efffff #3 #0:4 #e0000000 #ffffffff:6 #1e3fffff', 
    ' #0:5 #ff800000 #ffffffff:6 #2078ffff #0:5 #fffe0000 #ffffffff:6', 
    ' #181e3ff #0:5 #fffff800 #ffffffff:6 #60f8f #0:5 #ffffffe0', 
    ' #ffffffff:5 #7fffffff #183e #0:4 #80000000 #ffffffff:6 #f9ffffff', 
    ' #e0 #0:4 #3e000000 #1f87e1f8 #87e1f87e #e3f8fe3f #f8fe3f8f', 
    ' #fe7f9fe7 #7f9fe7f9 #87e7fbfe #3 #0:5 #8000000 #6018020', 
    ' #380e038 #81e0781e #e0f81e07 #f83e0f83 #1e1f87e1 #8 #0:8', 
    ' #2000000 #1802008 #80e01806 #20380e03 #0:12 #800000 #0:362', 
    ' #7e000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7e00000 #c0000000 #1f #7f00 #1fc0000 #f0000000', 
    ' #7 #0:78 #7ff0000 #fc000000 #1f #7ff0 #1ff8000', 
    ' #fe000000 #7 #1ff8 #7fe000 #ff800000 #1 #7fe', 
    ' #1ff800 #7fc00000 #0 #1ff #7fc00 #1ff00000 #c0000000', 
    ' #7f #1ff00 #7fc0000 #f0000000 #1f #7f80 #1fe0000', 
    ' #f8000000 #7 #1fe0 #7f8000 #fe000000 #1 #7f8', 
    ' #1fe000 #7f800000 #0 #1fe #7f000 #1fc00000 #0', 
    ' #7f #1fc00 #7f00000 #c0000000 #1f #7f00 #1fc0000', 
    ' #f0000000 #7 #1fc0 #7f0000 #fc000000 #1 #7e0', 
    ' #1f8000 #7ff00000 #c0000000 #1ff #7ff00 #1ff80000 #e0000000', 
    ' #7f #1ff80 #7fe0000 #f8000000 #1f #7fe0 #1ff8000', 
    ' #fc000000 #7 #1ff0 #7fc000 #ff000000 #1 #7fc', 
    ' #1ff000 #7fc00000 #0 #1ff #7f800 #1fe00000 #80000000', 
    ' #7f #1fe00 #7f80000 #e0000000 #1f #7f80 #1fe0000', 
    ' #f8000000 #7 #1fe0 #7f8000 #fc000000 #1 #7f0', 
    ' #1fc000 #7f000000 #0 #1fc #7f000 #1fc00000 #0', 
    ' #7f #1fc00 #7f00000 #c0000000 #1f #7f00 #1f80000', 
    ' #ff000000 #7 #1ffc #7ff000 #ff800000 #1 #7fe', 
    ' #1ff800 #7fe00000 #80000000 #1ff #7fe00 #1ff80000 #c0000000', 
    ' #7f #1ff00 #7fc0000 #f0000000 #1f #7fc0 #1ff0000', 
    ' #fc000000 #7 #1ff0 #7fc000 #fe000000 #1 #7f8', 
    ' #1fe000 #7f800000 #0 #1fe #7f800 #1fe00000 #80000000', 
    ' #7f #1fe00 #7f80000 #c0000000 #1f #7f00 #1fc0000', 
    ' #f0000000 #7 #1fc0 #7f0000 #fc000000 #1 #7f0', 
    ' #1fc000 #7f000000 #0 #1fc #7f000 #1f800000 #f0000000', 
    ' #7f #1ffc0 #7ff0000 #f8000000 #1f #7fe0 #1ff8000', 
    ' #fe000000 #7 #1ff8 #7fe000 #ff800000 #1 #7fc', 
    ' #1ff000 #7fc00000 #0 #1ff #7fc00 #1ff00000 #c0000000', 
    ' #7f #1ff00 #7fc0000 #e0000000 #1f #7f80 #1fe0000', 
    ' #f8000000 #7 #1fe0 #7f8000 #fe000000 #1 #7f8', 
    ' #1fe000 #7f800000 #0 #1fc #7f000 #1fc00000 #0', 
    ' #7f #1fc00 #7f00000 #c0000000 #1f #7f00 #1fc0000', 
    ' #f0000000 #7 #1fc0 #7f0000 #f8000000 #1 #7ff', 
    ' #1ffc00 #7fe00000 #80000000 #1ff #7fe00 #1ff80000 #e0000000', 
    ' #7f #1ff80 #7fe0000 #f8000000 #1f #7fc0 #1ff0000', 
    ' #fc000000 #7 #1ff0 #7fc000 #ff000000 #1 #7fc', 
    ' #1ff000 #7fc00000 #0 #1fe #7f800 #1fe00000 #80000000', 
    ' #7f #1fe00 #7f80000 #e0000000 #1f #7f80 #1fe0000', 
    ' #f8000000 #7 #1fe0 #7f0000 #fc000000 #1 #7f0', 
    ' #1fc000 #7f000000 #0 #1fc #7f000 #1fc00000 #0', 
    ' #7f #1fc00 #7f00000 #c0000000 #1f #7ff0 #1ffc000', 
    ' #fe000000 #7 #1ff8 #7fe000 #ff800000 #1 #7fe', 
    ' #1ff800 #7fe00000 #80000000 #1ff #7fc00 #1ff00000 #c0000000', 
    ' #7f #1ff00 #7fc0000 #f0000000 #1f #7fc0 #1ff0000', 
    ' #fc000000 #7 #1fe0 #7f8000 #fe000000 #1 #7f8', 
    ' #1fe000 #7f800000 #0 #1fe #7f800 #1fe00000 #80000000', 
    ' #7f #1fe00 #7f00000 #c0000000 #1f #7f00 #1fc0000', 
    ' #f0000000 #7 #1fc0 #7f0000 #fc000000 #1 #7f0', 
    ' #1fc000 #7f000000 #0 #1fc #7ff00 #1ffc0000 #e0000000', 
    ' #7f #1ff80 #7fe0000 #f8000000 #1f #7fe0 #1ff8000', 
    ' #fe000000 #7 #1ff8 #7fc000 #ff000000 #1 #7fc', 
    ' #1ff000 #7fc00000 #0 #1ff #7fc00 #1ff00000 #c0000000', 
    ' #7f #1ff00 #7f80000 #e0000000 #1f #7f80 #1fe0000', 
    ' #f8000000 #7 #1fe0 #7f8000 #fe000000 #1 #7f8', 
    ' #1fe000 #7f800000 #0 #1fc #7f000 #1fc00000 #0', 
    ' #7f #1fc00 #7f00000 #c0000000 #1f #7f00 #1fc0000', 
    ' #f0000000 #7 #1fc0 #7ff000 #ffc00000 #1 #7fe', 
    ' #1ff800 #7fe00000 #80000000 #1ff #7fe00 #1ff80000 #e0000000', 
    ' #7f #1ff80 #7fc0000 #f0000000 #1f #7fc0 #1ff0000', 
    ' #fc000000 #7 #1ff0 #7fc000 #ff000000 #1 #7fc', 
    ' #1ff000 #7f800000 #0 #1fe #7f800 #1fe00000 #80000000', 
    ' #7f #1fe00 #7f80000 #e0000000 #1f #7f80 #1fe0000', 
    ' #f8000000 #7 #1fc0 #7f0000 #fc000000 #1 #7f0', 
    ' #1fc000 #7f000000 #0 #1fc #7f000 #1fc00000 #0', 
    ' #7f #1fc00 #7ff0000 #fc000000 #1f #7fe0 #1ff8000', 
    ' #fe000000 #7 #1ff8 #7fe000 #ff800000 #1 #7fe', 
    ' #1ff800 #7fc00000 #0 #1ff #7fc00 #1ff00000 #c0000000', 
    ' #7f #1ff00 #7fc0000 #f0000000 #1f #7fc0 #1ff0000', 
    ' #f8000000 #7 #1fe0 #7f8000 #fe000000 #1 #7f8', 
    ' #1fe000 #7f800000 #0 #1fe #7f800 #1fe00000 #80000000', 
    ' #7f #1fe00 #7f00000 #c0000000 #1f #7f00 #1fc0000', 
    ' #f0000000 #7 #1fc0 #7f0000 #fc000000 #1 #7f0', 
    ' #1fc000 #7ff00000 #c0000000 #1ff #7fe00 #1ff80000 #e0000000', 
    ' #7f #1ff80 #7fe0000 #f8000000 #1f #7fe0 #1ff8000', 
    ' #fe000000 #7 #1ff0 #7fc000 #ff000000 #1 #7fc', 
    ' #1ff000 #7fc00000 #0 #1ff #7fc00 #1ff00000 #c0000000', 
    ' #7f #1fe00 #7f80000 #e0000000 #1f #7f80 #1fe0000', 
    ' #f8000000 #7 #1fe0 #7f8000 #fe000000 #1 #7f8', 
    ' #1fe000 #7f800000 #0 #1fc #7f000 #1fc00000 #0', 
    ' #7f #1fc00 #7f00000 #c0000000 #1f #7f00 #1fc0000', 
    ' #ff000000 #7 #1ffc #7fe000 #ff800000 #1 #7fe', 
    ' #1ff800 #7fe00000 #80000000 #1ff #7fe00 #1ff80000 #e0000000', 
    ' #7f #1ff00 #7fc0000 #f0000000 #1f #7fc0 #1ff0000', 
    ' #fc000000 #7 #1ff0 #7fc000 #ff000000 #1 #7fc', 
    ' #1fe000 #7f800000 #0 #1fe #7f800 #1fe00000 #80000000', 
    ' #7f #1fe00 #7f80000 #e0000000 #1f #7f80 #1fe0000', 
    ' #f8000000 #7 #1fc0 #7f0000 #fc000000 #1 #7f0', 
    ' #1fc000 #7f000000 #0 #1fc #7f000 #1fc00000 #f0000000', 
    ' #7f #1ffc0 #7fe0000 #f8000000 #1f #7fe0 #1ff8000', 
    ' #fe000000 #7 #1ff8 #7fe000 #ff800000 #1 #7fe', 
    ' #1ff000 #7fc00000 #0 #1ff #7fc00 #1ff00000 #c0000000', 
    ' #7f #1ff00 #3fc0000 #f0000000 #7 #fc0 #3f0000', 
    ' #78000000 #0 #1e0 #38000 #e000000 #0 #18', 
    ' #6000 #1800000 #0 #6 #1800 #600000 #80000000', 
    ' #1 #600 #100000 #40000000 #0 #100 #40000', 
    ' #10000000 #0 #40 #10000 #4000000 #0 #7ff', 
    ' #1ffc00 #7fe00000 #80000000 #1ff #7fe00 #1ff80000 #e0000000', 
    ' #7f #3f80 #3e0000 #78000000 #0 #60 #0:1583', 
    ' #ffe00000 #ffffffff #38f #0:10 #fe000000 #ffffffff #38ff', 
    ' #0:10 #e0000000 #ffffffff #38fff #0:11 #fffffffe #38ffff', 
    ' #0:11 #ffffffe0 #38fffff #0:11 #fffffe00 #38ffffff #0:11', 
    ' #ffffe000 #8fffffff #3 #0:10 #fffe0000 #ffffffff #38', 
    ' #0:10 #bfe00000 #effbfeff #79f #0:10 #3e000000 #f83e0f8', 
    ' #787e #0:10 #20000000 #18020080 #38060 #0:1633 #ff80000', 
    ' #f0000000 #1f #3fe0 #7fc000 #ff800000 #0 #1ff', 
    ' #7fe00 #ffc0000 #f8000000 #1f #3ff0 #7fe000 #ffc00000', 
    ' #80000000 #1ff #0:601 #ffff8000 #ffffffff:7 #3ffff801 #7fe00000', 
    ' #80000000 #7 #0:42 #fffffe00 #ffffffff:6 #7ffffff #1ffffe0', 
    ' #3ff8000 #1e000000 #0:43 #fffffff8 #ffffffff:6 #803fffff #7ffff', 
    ' #ffe00 #f80000 #0:42 #e0000000 #ffffffff:7 #fe00ffff #3fff', 
    ' #7ff8 #3e000 #0:42 #ff800000 #ffffffff:7 #fff807ff #e00000ff', 
    ' #1ff #f80 #0:42 #fffe0000 #ffffffff:7 #ffffe01f #ff800007', 
    ' #f #7e #0:42 #fffff800 #ffffffff:7 #1fffff80 #3ffe0000', 
    ' #f8000000 #1 #0:42 #ffffffe0 #ffff807f #fe01ffff #7ffffff', 
    ' #fffffff8 #ffffe01f #ff807fff #ffffff #fffffe #1fff800 #fe00000', 
    ' #80000000 #0:41 #80000000 #ffffff #fffffe00 #fff80003 #e0000fff', 
    ' #3fffff #ffffff80 #fffe0000 #f80003ff #3ffff #7ffe0 #3f8000', 
    ' #6000000 #0:41 #fe000000 #3ff #ffff8 #3fffe000 #ff800000', 
    ' #1ff #7fffe #1ffff800 #ffe00000 #8000007f #3fff #1fe00', 
    ' #180000 #0:41 #3ff80000 #e0000000 #ff #3ff80 #1ffe0000', 
    ' #f8000000 #7f #1ffe0 #7ff8000 #fe000000 #1f #7f8', 
    ' #e000 #0:41 #7e000 #1f800000 #0 #7e #3f800', 
    ' #fe00000 #80000000 #3f #fe00 #7f80000 #e0000000 #1f', 
    ' #380 #0:41 #180 #60000 #18000000 #0 #60', 
    ' #38000 #e000000 #0 #38 #1e000 #7800000 #0', 
    ' #1e #0:1602 #ff00000 #f0000000 #1f #3fe0 #7fc000', 
    ' #ff800000 #0 #1ff #3fe00 #7fc0000 #f8000000 #f', 
    ' #1ff0 #3fc000 #7fc00000 #80000000 #ff #1ff00 #3fe0000', 
    ' #fc000000 #7 #ff8 #1ff000 #3fe00000 #c0000000 #7f', 
    ' #ff80 #1ff0000 #fe000000 #3 #7fc #ff800 #1ff00000', 
    ' #e0000000 #3f #7fc0 #ff8000 #ff000000 #1 #3fe', 
    ' #7fc00 #ff80000 #f0000000 #1f #3fe0 #7fc000 #ff800000', 
    ' #0 #1ff #3fe00 #7fc0000 #f8000000 #f #1ff0', 
    ' #3fe000 #7fc00000 #80000000 #ff #1ff00 #3fe0000 #fc000000', 
    ' #7 #ff8 #1ff000 #3fe00000 #c0000000 #7f #ff80', 
    ' #1ff0000 #fe000000 #3 #7fc #ff800 #1ff00000 #e0000000', 
    ' #3f #7fc0 #ff8000 #ff000000 #1 #3fe #7fc00', 
    ' #ff80000 #f0000000 #1f #3fe0 #7fc000 #ff800000 #80000000', 
    ' #1ff #3fe00 #7fc0000 #f8000000 #f #1ff0 #3fe000', 
    ' #7fc00000 #80000000 #ff #1ff00 #3ff0000 #fe000000 #7', 
    ' #ff8 #1ff000 #3fe00000 #c0000000 #7f #ff80 #1ff0000', 
    ' #fe000000 #3 #7fe #ffc00 #1ff80000 #e0000000 #3f', 
    ' #7fc0 #ff8000 #ff000000 #1 #3fe #7fc00 #ff80000', 
    ' #f8000000 #1f #3ff0 #7fe000 #ff800000 #0 #1ff', 
    ' #3fe00 #7fc0000 #f8000000 #f #1ff0 #3ff000 #7fe00000', 
    ' #c0000000 #ff #1ff80 #3fe0000 #fc000000 #7 #ff8', 
    ' #1ff000 #3fe00000 #c0000000 #7f #ffc0 #1ff8000 #ff000000', 
    ' #3 #7fe #0:5 #1f8000 #ff800000 #1 #3ff', 
    ' #7fe00 #ffc0000 #f8000000 #1f #0:1023 #700 #1e0000', 
    ' #78000000 #0 #1e0 #78000 #1e000000 #0 #78', 
    ' #1e000 #7800000 #0 #1e #7800 #1e00000 #80000000', 
    ' #7 #1e00 #780000 #e0000000 #1 #780 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #7000000 #0:65 #7f', 
    ' #1fc00 #7f00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7e000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1e0000', 
    ' #78000000 #0 #1e0 #78000 #1e000000 #0 #78', 
    ' #1e000 #7800000 #0 #1e #7800 #1e00000 #80000000', 
    ' #7 #1e00 #780000 #e0000000 #1 #7f0 #1fc000', 
    ' #7f000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f80 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #80000000', 
    ' #7 #1e00 #780000 #e0000000 #1 #780 #1e0000', 
    ' #78000000 #0 #1e0 #78000 #1e000000 #0 #78', 
    ' #1e000 #7800000 #0 #1e #7f00 #1fc0000 #f0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7e000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #78', 
    ' #1e000 #7800000 #0 #1e #7800 #1e00000 #80000000', 
    ' #7 #1e00 #780000 #e0000000 #1 #780 #1e0000', 
    ' #78000000 #0 #1e0 #7f000 #1fc00000 #0 #7f', 
    ' #1f800 #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7e000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1e0000', 
    ' #78000000 #0 #1e0 #78000 #1e000000 #0 #78', 
    ' #1e000 #7800000 #0 #1e #7800 #1e00000 #80000000', 
    ' #7 #1e00 #7f0000 #fc000000 #1 #7f0 #1f8000', 
    ' #7e000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #80000000', 
    ' #7 #1e00 #780000 #e0000000 #1 #780 #1e0000', 
    ' #78000000 #0 #1e0 #78000 #1e000000 #0 #78', 
    ' #1e000 #7f00000 #c0000000 #1f #7f00 #1f80000 #e0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7e000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #78', 
    ' #1e000 #7800000 #0 #1e #7800 #1e00000 #80000000', 
    ' #7 #1e00 #780000 #e0000000 #1 #780 #1e0000', 
    ' #7f000000 #0 #1fc #7f000 #1fc00000 #0 #7e', 
    ' #1f800 #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1e0000', 
    ' #78000000 #0 #1e0 #78000 #1e000000 #0 #78', 
    ' #1e000 #7800000 #0 #1e #7800 #1e00000 #f0000000', 
    ' #7 #1fc0 #7f0000 #fc000000 #1 #7e0 #1f8000', 
    ' #7e000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #80000000', 
    ' #7 #1e00 #780000 #e0000000 #1 #780 #1e0000', 
    ' #78000000 #0 #1e0 #78000 #1e000000 #0 #7f', 
    ' #1fc00 #7f00000 #c0000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7e000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1e000 #7800000 #0 #1e #7800 #1e00000 #80000000', 
    ' #7 #1e00 #780000 #e0000000 #1 #7f0 #1fc000', 
    ' #7f000000 #0 #1fc #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #78000000 #0 #1e0 #78000 #1e000000 #0 #78', 
    ' #1e000 #7800000 #0 #1e #7f00 #1fc0000 #f0000000', 
    ' #7 #1fc0 #7f0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7e000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #780000 #e0000000 #1 #780 #1e0000', 
    ' #78000000 #0 #1e0 #7f000 #1fc00000 #0 #7f', 
    ' #1fc00 #7f00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7e000000 #0 #1f8 #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1e #7800 #1e00000 #80000000', 
    ' #7 #1e00 #7f0000 #fc000000 #1 #7f0 #1fc000', 
    ' #7f000000 #0 #1fc #7e000 #1f800000 #0 #7e', 
    ' #1f800 #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000', 
    ' #7 #1f80 #7e0000 #f8000000 #1 #7e0 #1f8000', 
    ' #7c000000 #0 #1f0 #7c000 #1f000000 #0 #7c', 
    ' #1f000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000', 
    ' #7c000000 #0 #1f0 #78000 #1e000000 #0 #78', 
    ' #1e000 #0:2 #10 #7000 #1f80000 #f0000000 #7', 
    ' #1fc0 #7e0000 #f8000000 #1 #7e0 #1f8000 #7e000000', 
    ' #0 #1f8 #7e000 #1f800000 #0 #7e #1f800', 
    ' #7e00000 #80000000 #1f #7e00 #1f80000 #e0000000 #7', 
    ' #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000 #7c000000', 
    ' #0 #1f0 #7c000 #1f000000 #0 #7c #1f000', 
    ' #7c00000 #0 #1f #7c00 #1f00000 #c0000000 #7', 
    ' #1f00 #7c0000 #e0000000 #1 #780 #1e0000 #0:15', 
    ' #1800 #7e0000 #f8000000 #1 #7e0 #1f8000 #7e000000', 
    ' #0 #1f8 #7e000 #1f800000 #0 #7e #1f800', 
    ' #7c00000 #0 #1f #7c00 #1f00000 #c0000000 #7', 
    ' #1f00 #7c0000 #f0000000 #1 #7c0 #1f0000 #7c000000', 
    ' #0 #1f0 #7c000 #1f000000 #0 #7c #1f000', 
    ' #7c00000 #0 #1f #7c00 #1e00000 #0:24 #3e0000', 
    ' #f8000000 #1 #7e0 #1f8000 #7e000000 #0 #1f8', 
    ' #7c000 #1f000000 #0 #7c #1f000 #7c00000 #0', 
    ' #1f #7c00 #1f00000 #c0000000 #7 #1f00 #7c0000', 
    ' #f0000000 #1 #7c0 #1f0000 #7c000000 #0 #1f0', 
    ' #7c000 #1e000000 #0:31 #180 #7e0000 #f0000000 #1', 
    ' #7c0 #1f0000 #7c000000 #0 #1f0 #7c000 #1f000000', 
    ' #0 #7c #1f000 #7c00000 #0 #1f #7c00', 
    ' #1f00000 #c0000000 #7 #1f00 #7c0000 #f0000000 #1', 
    ' #0:36 #c0000000 #1 #1f00 #7c0000 #f0000000 #1', 
    ' #7c0 #1f0000 #7c000000 #0 #1f0 #7c000 #1f000000', 
    ' #0 #7c #1f000 #7c00000 #0 #1f #0:42', 
    ' #3c00 #1f00000 #c0000000 #7 #1f00 #7c0000 #f0000000', 
    ' #1 #7c0 #1f0000 #7c000000 #0 #1f0 #0:46', 
    ' #7000 #7c00000 #0 #1f #7c00 #1f00000 #c0000000', 
    ' #7 #1f00 #0:50 #1c000 #1f000000 #0 #7c', 
    ' #1f000 #0:54 #30000 #0:1047 #7fffffe #0:12 #7fffffe0', 
    ' #0:12 #fffffe00 #f #0:11 #ffffe000 #ff #0:11', 
    ' #fffe0000 #8fff #0:11 #ffe00000 #8ffff #0:11 #fe000000', 
    ' #9fffff #0:11 #e0000000 #19ffffff #0:12 #9ffffffe #1', 
    ' #0:11 #ffffffe0 #19 #0:11 #fffffe00 #3bf #0:11', 
    ' #ffffe000 #3bff #0:11 #fffe0000 #3bfff #0:11 #ffe00000', 
    ' #7fffff #0:11 #fe000000 #7ffffff #0:11 #e0000000 #7fffffff', 
    ' #0:12 #fffffffe #f #0:11 #ffffffe0 #ff #0:11', 
    ' #fffffe00 #1fff #0:11 #ffffe000 #21ffff #0:11 #f87e0000', 
    ' #21f87e1 #0:12 #60180200 #0:1503 #ff800000 #3 #7ff', 
    ' #ffe00 #1ffc0000 #f8000000 #3f #7ff0 #ffe000 #ffc00000', 
    ' #80000001 #3ff #7ff00 #ffe0000 #fc000000 #1f #3ffc', 
    ' #f800 #0:1126 #ff #1fe00 #3fc0000 #f8000000 #7', 
    ' #ff0 #1fe000 #3fc00000 #80000000 #7f #ff00 #1fe0000', 
    ' #fc000000 #3 #7f8 #0:38 #fc000000 #3 #7f8', 
    ' #ff000 #1fe00000 #c0000000 #3f #7f80 #ff0000 #fe000000', 
    ' #1 #3fc #7f800 #ff80000 #f0000000 #1f #0:38', 
    ' #ff80000 #f0000000 #1f #3fe0 #7fc000 #ff800000 #0', 
    ' #1ff #3fe00 #7fc0000 #f8000000 #f #1ff0 #3fe000', 
    ' #7fc00000 #80000000 #7 #0:37 #3fe000 #7fc00000 #80000000', 
    ' #ff #1ff00 #3fe0000 #fc000000 #7 #ff8 #1ff000', 
    ' #3fe00000 #c0000000 #7f #ff80 #1ff0000 #7e000000 #0:38', 
    ' #ff80 #1ff0000 #fe000000 #3 #7fc #ff800 #1ff00000', 
    ' #e0000000 #3f #7fc0 #ff8000 #ff000000 #1 #3fe', 
    ' #7fc00 #7fc0000 #0:38 #3fe #7fc00 #ffc0000 #f8000000', 
    ' #1f #3ff0 #7fe000 #ffc00000 #80000000 #1ff #3ff00', 
    ' #7fe0000 #fc000000 #f #1ff8 #3ff000 #0:37 #fc000000', 
    ' #f #1ff8 #3ff000 #7fe00000 #c0000000 #ff #1ff80', 
    ' #3ff0000 #fe000000 #7 #ffc #1ff800 #3ff00000 #e0000000', 
    ' #7f #ffc0 #0:37 #3ff00000 #e0000000 #7f #ffc0', 
    ' #1ff8000 #ff000000 #3 #7fe #ffc00 #1ff80000 #f0000000', 
    ' #3f #7fe0 #ffc000 #ffc00000 #80000001 #3ff #300', 
    ' #0:36 #ffc000 #ff800000 #1 #3ff #7fe00 #ffc0000', 
    ' #fc000000 #1f #3ff8 #7ff000 #ffe00000 #c0000000 #1ff', 
    ' #3ff80 #7ff0000 #fe000000 #f #1c #0:36 #3ff00', 
    ' #7ff0000 #fe000000 #f #1ffc #3ff800 #7ff00000 #e0000000', 
    ' #ff #1ffc0 #3ff8000 #ff000000 #7 #ffe #1ffc00', 
    ' #3ff80000 #f0000000 #0:37 #1fc0 #7f0000 #fc000000 #1', 
    ' #7f0 #1fc000 #7f000000 #0 #1fc #7f000 #1fc00000', 
    ' #0 #7f #1fc00 #7f00000 #c0000000 #1f #0:37', 
    ' #7f #1fc00 #7f00000 #c0000000 #1f #7f00 #1fc0000', 
    ' #f0000000 #7 #1fc0 #7f0000 #fc000000 #1 #7f0', 
    ' #1fc000 #7f000000 #0:37 #fc000000 #1 #7f0 #1fc000', 
    ' #7f000000 #0 #1fc #7f000 #1fc00000 #0 #7f', 
    ' #1fc00 #7f00000 #c0000000 #1f #7f00 #1fc0000 #0:37', 
    ' #7f00000 #c0000000 #1f #7f00 #1fc0000 #f0000000 #7', 
    ' #1fc0 #7f0000 #fc000000 #1 #7f0 #1fc000 #7f000000', 
    ' #0 #1fc #7f000 #0:37 #1fc000 #7f000000 #0', 
    ' #1fc #7f000 #1fc00000 #0 #7f #1fc00 #7f00000', 
    ' #c0000000 #1f #7f00 #1fc0000 #f0000000 #7 #1fe0', 
    ' #0:37 #7f00 #1fc0000 #f0000000 #7 #1fc0 #7f0000', 
    ' #fc000000 #1 #7f0 #1fc000 #7f000000 #0 #1fe', 
    ' #7f800 #1fe00000 #0 #78 #0:37 #1fc #7f000', 
    ' #1fc00000 #0 #7f #1fc00 #7f80000 #e0000000 #1f', 
    ' #7f80 #1fe0000 #f8000000 #7 #1fe0 #7f8000 #0:38', 
    ' #f0000000 #7 #1fe0 #7f8000 #fe000000 #1 #7f8', 
    ' #1fe000 #7f800000 #0 #1fe #7f800 #1fe00000 #80000000', 
    ' #7f #1fe00 #0:38 #1fe00000 #80000000 #7f #1fe00', 
    ' #7f80000 #e0000000 #1f #7f80 #1fe0000 #f8000000 #7', 
    ' #1fe0 #7f8000 #fe000000 #1 #7f8 #0:38 #7f8000', 
    ' #fe000000 #1 #7f8 #1fe000 #7f800000 #0 #1fe', 
    ' #7f800 #1fe00000 #80000000 #7f #1fe00 #7f80000 #e0000000', 
    ' #1f #0:38 #1fe00 #7f80000 #e0000000 #1f #7f80', 
    ' #1fe0000 #f8000000 #7 #1fe0 #7f8000 #fe000000 #1', 
    ' #7f8 #1fe000 #7f800000 #0:39 #7f8 #1fe000 #7f800000', 
    ' #0 #1fe #7f800 #1fe00000 #80000000 #7f #1fe00', 
    ' #7f80000 #e0000000 #1f #7f80 #1fe0000 #0:38 #e0000000', 
    ' #1f #7f80 #1fe0000 #f8000000 #7 #1fe0 #7f8000', 
    ' #fe000000 #1 #7f8 #1fe000 #7f800000 #0 #1fe', 
    ' #7f800 #0:38 #7f800000 #0 #1fe #7f800 #1fe00000', 
    ' #80000000 #7f #1fe00 #7f80000 #e0000000 #1f #7f80', 
    ' #1fe0000 #f8000000 #7 #1ff0 #0:38 #1fe0000 #f8000000', 
    ' #7 #1fe0 #7f8000 #fe000000 #1 #7f8 #1fe000', 
    ' #7f800000 #0 #1ff #7fc00 #1ff00000 #c0000000 #7f', 
    ' #0:38 #7f800 #1fe00000 #80000000 #7f #1fe00 #7f80000', 
    ' #f0000000 #1f #7fc0 #1ff0000 #fc000000 #7 #1ff0', 
    ' #7fc000 #ff000000 #1 #0:38 #1fe0 #7f8000 #ff000000', 
    ' #1 #7fc #1ff000 #7fc00000 #0 #1ff #7fc00', 
    ' #1ff00000 #c0000000 #7f #1ff00 #7fc0000 #0:38 #c0000000', 
    ' #7f #1ff00 #7fc0000 #f0000000 #1f #7fc0 #1ff0000', 
    ' #fc000000 #7 #1ff0 #7fc000 #ff000000 #1 #7fc', 
    ' #7f000 #0:38 #ff000000 #1 #7fc #1ff000 #7fc00000', 
    ' #0 #1ff #7fc00 #1ff00000 #c0000000 #7f #1ff00', 
    ' #7fc0000 #f0000000 #1f #3c0 #0:38 #7fc0000 #f0000000', 
    ' #1f #7fc0 #1ff0000 #fc000000 #7 #1ff0 #7fc000', 
    ' #ff000000 #1 #7fc #1ff000 #7fc00000 #0 #3', 
    ' #0:38 #1ff000 #7fc00000 #0 #1ff #7fc00 #1ff00000', 
    ' #c0000000 #7f #1ff00 #7fc0000 #f0000000 #1f #7fc0', 
    ' #1ff0000 #2000000 #0:39 #7fc0 #1ff0000 #fc000000 #7', 
    ' #1ff0 #7fc000 #ff000000 #1 #7fc #1ff000 #7fc00000', 
    ' #80000000 #1ff #7fe00 #0:40 #1ff #7fc00 #1ff00000', 
    ' #c0000000 #7f #1ff00 #7fc0000 #f8000000 #1f #7fe0', 
    ' #1ff8000 #fe000000 #7 #1ff8 #0:39 #fc000000 #7', 
    ' #1ff0 #7fc000 #ff000000 #1 #7fe #1ff800 #7fe00000', 
    ' #80000000 #1ff #7fe00 #1ff80000 #e0000000 #7f #0:39', 
    ' #1ff00000 #e0000000 #7f #1ff80 #7fe0000 #f8000000 #1f', 
    ' #7fe0 #1ff8000 #fe000000 #7 #1ff8 #7fe000 #ff800000', 
    ' #1 #0:39 #7fe000 #ff800000 #1 #7fe #1ff800', 
    ' #7fe00000 #80000000 #1ff #7fe00 #1ff80000 #e0000000 #7f', 
    ' #1ff80 #7fe0000 #0:40 #1ff80 #7fe0000 #f8000000 #1f', 
    ' #7fe0 #1ff8000 #fe000000 #7 #1ff8 #7fe000 #ff800000', 
    ' #1 #7fe #1ff800 #0:40 #7fe #1ff800 #7fe00000', 
    ' #80000000 #1ff #7fe00 #1ff80000 #e0000000 #7f #1ff80', 
    ' #7fe0000 #fc000000 #1f #7ff0 #0:39 #f8000000 #1f', 
    ' #7fe0 #1ff8000 #fe000000 #7 #1ff8 #7fe000 #ffc00000', 
    ' #1 #7ff #1ffc00 #7ff00000 #c0000000 #1ff #0:39', 
    ' #7fe00000 #80000000 #1ff #7fe00 #1ff80000 #f0000000 #7f', 
    ' #1ffc0 #7ff0000 #fc000000 #1f #7ff0 #1ffc000 #ff000000', 
    ' #7 #0:39 #1ff8000 #ff000000 #7 #1ffc #7ff000', 
    ' #ffc00000 #1 #7ff #1ffc00 #7ff00000 #c0000000 #1ff', 
    ' #7ff00 #1ffc0000 #0:40 #7ff00 #1ffc0000 #f0000000 #7f', 
    ' #1ffc0 #7ff0000 #fc000000 #1f #7ff0 #1ffc000 #ff000000', 
    ' #7 #1ffc #7ff000 #0:40 #1ffc #7ff000 #ffc00000', 
    ' #1 #7ff #1ffc00 #7ff00000 #c0000000 #1ff #7ff00', 
    ' #1ffc0000 #f8000000 #7f #1ffe0 #0:39 #f0000000 #7f', 
    ' #1ffc0 #7ff0000 #fc000000 #1f #7ff0 #1ffc000 #ff800000', 
    ' #7 #1ffe #7ff800 #ffe00000 #80000001 #7ff #0:39', 
    ' #ffc00000 #1 #7ff #1ffc00 #7ff00000 #e0000000 #1ff', 
    ' #7ff80 #1ffe0000 #f8000000 #7f #1ffe0 #7ff8000 #fe000000', 
    ' #1f #0:39 #7ff0000 #fe000000 #1f #7ff8 #1ffe000', 
    ' #ff800000 #7 #1ffe #7ff800 #ffe00000 #80000001 #7ff', 
    ' #1ffe00 #7ff80000 #20000000 #0:39 #1ffe00 #7ff80000 #e0000000', 
    ' #1ff #7ff80 #1ffe0000 #f8000000 #7f #1ffe0 #7ff8000', 
    ' #fe000000 #1f #7ff8 #1fff000 #c00000 #0:39 #7ff8', 
    ' #1ffe000 #ff800000 #7 #1ffe #7ff800 #ffe00000 #80000001', 
    ' #7ff #1fff00 #7ffc0000 #f0000000 #1ff #7ffc0 #30000', 
    ' #0:38 #e0000000 #1ff #7ff80 #1ffe0000 #f8000000 #7f', 
    ' #1ffe0 #7ffc000 #ff000000 #1f #7ffc #1fff000 #ffc00000', 
    ' #7 #1fff #1c00 #0:38 #ff800000 #7 #1ffe', 
    ' #7ffc00 #fff00000 #c0000001 #7ff #1fff00 #7ffc0000 #f0000000', 
    ' #1ff #7ffc0 #1fff0000 #fc000000 #7f #70 #0:38', 
    ' #1fff0000 #fc000000 #7f #1fff0 #7ffc000 #ff000000 #1f', 
    ' #7ffc #1fff000 #ffc00000 #7 #1fff #7ffc00 #fff80000', 
    ' #e0000001 #1 #0:38 #7ffc00 #fff00000 #c0000001 #7ff', 
    ' #1fff00 #7ffc0000 #f0000000 #1ff #7ffc0 #1fff0000 #fe000000', 
    ' #7f #1fff8 #7ffe000 #3800000 #0:43 #1ffffe0 #ffff8000', 
    ' #fe000007 #1fff #0:198 #7ffff #1ffffc00 #0:51 #fc000000', 
    ' #1fff #7ffff0 #0:51 #fff00000 #c000007f #1ffff #0:51', 
    ' #ffffc000 #ff000001 #7ff #0:51 #7ffff00 #fffe0000 #1f', 
    ' #0:51 #1ffffe #7ffff800 #0:51 #f8000000 #7fff #1ffffe0', 
    ' #0:51 #ffe00000 #800001ff #7ffff #1f8ffe00 #0:50 #ffff8000', 
    ' #fe000007 #1fff #7ffff8 #0:50 #1ffffe00 #fff80000 #e000007f', 
    ' #1ffff #0:1138 #fe000000 #ffffffff:3 #7fffff #fffffe00 #1', 
    ' #7c0 #0:46 #fff80000 #ffffffff:3 #1ffff #7fffff8 #0', 
    ' #1f #0:46 #ffffe000 #ffffffff:3 #e00007ff #1fffff #78000000', 
    ' #0:47 #ffffff80 #ffffffff:3 #ff80001f #7fff #1e00000 #0:47', 
    ' #fffffffe #ffffffff:2 #7fffffff #fffe0000 #1ff #70000 #0:46', 
    ' #f8000000 #ffffffff:3 #1ffffff #fffff800 #7 #1c00 #0:46', 
    ' #ffe00000 #ffffffff:3 #7ffff #1fffffc0 #0 #70 #0:46', 
    ' #ffff8000 #ffffffff:3 #1fff #7fffff #80000000 #1 #0:46', 
    ' #fffffe00 #ffffffff:3 #fc00007f #1ffff #6000000 #0:47 #fffffff8', 
    ' #ffffffff:3 #fff00001 #7ff #100000 #0:46 #e0000000 #ffffffff:3', 
    ' #7ffffff #ffffc000 #1f #4000 #0:46 #ff800000 #3fffffff', 
    ' #fffffffe #fffff8ff #3ffff #fffff00 #0:48 #fffe0000 #f800ffff', 
    ' #7ffffff #ffffffe0 #1f #7ffe #0:48 #fffff800 #ffe0000f', 
    ' #80003fff #1ffffff #f8000000 #7 #0:48 #1ffffe0 #ffff8000', 
    ' #fe000007 #3fff #e00000 #0:48 #80000000 #3fff #1fffe00', 
    ' #fff80000 #7 #0:49 #fe000000 #f #7ff8 #1ffe000', 
    ' #0:50 #7f80000 #e0000000 #1f #ff80 #0:50 #3e000', 
    ' #f800000 #0 #7e #0:50 #180 #60000 #38000000', 
    ' #0:1294 #e00 #380000 #e0000000 #0:143 #80000000 #ffffffff:5', 
    ' #ff80007f #1ffff #7ffc000 #0 #18 #0:45 #fffffff8', 
    ' #ffffffff:4 #f80007ff #1fffff #7ffc0000 #0 #180 #0:45', 
    ' #ffffff80 #ffffffff:4 #c0007fff #1ffffff #ffc00000 #7 #1800', 
    ' #0:45 #f0000000 #1fffff #7fffffe0 #ffffc000 #ffc001ff #7ffff', 
    ' #1ffffffc #fc000000 #7f #10000 #0:46 #1f80000 #e0000000', 
    ' #7 #1f80 #7f0000 #fc000000 #1 #7f8 #100000', 
    ' #0:2031 #1800 #600000 #80000000 #1 #600 #1c0000', 
    ' #70000000 #0 #1c0 #70000 #1c000000 #0 #70', 
    ' #18000 #6000000 #0 #18 #6000 #1c00000 #0', 
    ' #7 #1c00 #700000 #c0000000 #1 #700 #0:8', 
    ' #4000 #7000000 #0 #1c #7000 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-right_twist', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#2 #0:4 #1c0 #0 #3c000000 #0:16 #f00', 
    ' #0:8 #3c00000 #0:68 #20 #0:189 #1e00000 #0', 
    ' #6 #6000 #2000000 #0:660 #780 #1c0000 #60000000', 
    ' #0 #100 #0:220 #78000000 #0 #e0 #18000', 
    ' #2000000 #0:718 #f000 #1c00000 #0 #3 #400', ' #0:2946 #1 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-right_twist', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#2 #0:4 #1c0 #0 #3c000000 #0:16 #f00', 
    ' #0:8 #3c00000 #0:68 #20 #0:189 #1e00000 #0', 
    ' #6 #6000 #2000000 #0:660 #780 #1c0000 #60000000', 
    ' #0 #100 #0:220 #78000000 #0 #e0 #18000', 
    ' #2000000 #0:718 #f000 #1c00000 #0 #3 #400', ' #0:2946 #1 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-4', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#ffffffa3 #fffffff #fffffe00 #1ffff #ffffffc0 #ffffffff #fffffff', 
    ' #fc000000 #7fffffff #0:4 #fffffffc #ffc03fff #ffffffff #7ff', 
    ' #fff8000 #0:2 #ffffffe0 #7ffff #0 #ffffffc0 #ffffffff:2', 
    ' #3 #0 #fff00000 #fffc0007 #ffffffff #ffe0001f #ffffffff:3', 
    ' #1fffffff #0 #ffffffe0 #7f #fffffff8 #0 #ff800000', 
    ' #ffffffff:54 #fc1fffff #7ffffff #ffffffe0 #ffff0003 #ffffffff:12 #3fffffff', 
    ' #0:4 #40000000 #30040100 #3c0700c0 #3f07c0f0 #7fcff1fc #ffffffff:5', 
    ' #ffffe3ff #ff1fffff #7fffffff #fffffff8 #ffffc3ff #fe1fffff #ffffffff', 
    ' #fffffff0 #ffff87ff #fc3fffff #ffffffff #ffffffe1 #ffff0fff #f87fffff', 
    ' #ffffffff #ffffffc3 #fffe1fff #f0ffffff #ffffffff #ffffff87 #fffc3fff', 
    ' #e1ffffff #ffffffff #ffffff0f #fff87fff #c3ffffff #ffffffff #fffffe1f', 
    ' #fff1ffff #8fffffff #ffffffff #fffffc7f #ffe3ffff #1fffffff #ffffffff', 
    ' #fffff8ff #ffcfffff #7fffffff #fffffffe #fffff3ff #3fffff #fffffff0', 
    ' #ffe00001 #1fff #fffff0 #fff80000 #7 #3ffe #1ffc000', 
    ' #f8000000 #f #7f00 #3e00000 #0 #1e #e000', 
    ' #0:10 #3004010 #7c0f01c #1c1f #0:12 #ff800000 #ffffffff:42', 
    ' #ff0001ff #7fff #3ffff8 #1fffc000 #fe000000 #3f #3ff0', 
    ' #7f8000 #fc000000 #0 #3e0 #70000 #18000000 #0', 
    ' #ffffffc0 #ffffffff:11 #e03f0ff3 #200 #0:12 #ffffc000 #ffffffff:50', 
    ' #ffff3fff #f803ffff #ffffff #3fffffc0 #fffe0000 #3f #fc000000', 
    ' #3f #fff0 #3ffc000 #ff000000 #f #3ffc #fff000', 
    ' #ffc00000 #3 #fff #3ffc00 #fff00000 #c0000000 #3ff', 
    ' #fff00 #3ffc0000 #f8000000 #ff #3ffe0 #fff8000 #fe000000', 
    ' #3f #fff8 #3fff000 #ffc00000 #f #3fff #fffc00', 
    ' #fff80000 #e0000003 #fff #3fffc0 #ffff0000 #fe000000 #3ff', 
    ' #ffff8 #3ffff000 #ffe00000 #800000ff #3ffff #fffff00 #fffe0000', 
    ' #fc00003f #ffff #3fffff8 #fffff000 #fff0000f #e0003fff #ffffff', 
    ' #ffffffe0 #ffff8003 #e0000fff #3fffff #fffff800 #0:31 #10000', 
    ' #4000000 #0 #10 #c000 #3000000 #0 #1c', 
    ' #f000 #3c00000 #0 #1f #fc00 #7f00000 #c0000000', 
    ' #3f #1ff00 #1ffc0000 #f0000000 #ff #fffc0 #ffff0000', 
    ' #fc000000 #fff #ffffff80 #fffc7fff #e3ffffff #ffffffff #ffffff1f', 
    ' #fff8ffff #c7ffffff #ffffffff #fffffe3f #fff1ffff #8fffffff #ffffffff', 
    ' #fffffc7f #fff3ffff #9fffffff #ffffffff #fffffcff #ffe7ffff #3fffffff', 
    ' #ffffffff #fffff9ff #ffefffff #7fffffff #ffffffff #fffffbff #ffdfffff', 
    ' #ffffffff:30 #1007ffff #4010040 #1004010 #401004 #40100401 #30040100', 
    ' #c0300c0 #701c030 #3c0f01c #c3f07c1f #f3fc7f0f #ffff7fdf #ffffffff:2', 
    ' #7f #1fe00 #7fc0000 #f8000000 #1f #7ff0 #1ffe000', 
    ' #ffc00000 #80000007 #3fff #1ffff00 #fffe0000 #fc00000f #ffffffff:56', 
    ' #100401ff #4010040 #1004010 #401004 #40100401 #10040100 #4010040', 
    ' #300c030 #1c0701c #c1f03c0f #f1fc3f07 #fdff3fc7 #ffffffff:14 #fff8ffff', 
    ' #87ffffff #ffffffff #fffffc3f #ffe1ffff #fffffff #ffffffff #fffff87f', 
    ' #ff83ffff #1fffffff #fffffffc #ffffe0ff #ff07ffff #3fffffff #fffffff8', 
    ' #ffffc1ff #fe0fffff #7fffffff #ffffffe0 #ffff03ff #f81fffff #ffffffff', 
    ' #ffffffc0 #fffe07ff #f03fffff #ffffffff #ffffff81 #fffc0fff #e07fffff', 
    ' #ffffffff #ffffff03 #fff81fff #c0ffffff #ffffffff #fffffe07 #fff03fff', 
    ' #81ffffff #ffffffff #fffffc0f #fff07fff #83ffffff #ffffffff #fffffc1f', 
    ' #ffe0ffff #7ffffff #ffffffff #fffffc3f #ffe1ffff #fffffff #ffffffff', 
    ' #fffffc7f #ffe3ffff #1fffffff #ffffffff #fffffcff #ffe7ffff #3fffffff', 
    ' #ffffffff #1ff #0:12 #ff800000 #ffffffff:10 #9fffffff #e0783e3f', 
    ' #80 #80000000 #3f #1fc00 #fe00000 #0 #7f', 
    ' #3f800 #1fc00000 #0 #fe #7f000 #3f800000 #0', 
    ' #1fc #fe000 #7f000000 #0 #3f8 #1fc000 #fe000000', 
    ' #0 #7f0 #3f8000 #fe000000 #1 #ff0 #7f8000', 
    ' #fe000000 #3 #1ff0 #ff8000 #fe000000 #7 #3ff0', 
    ' #1ffc000 #fe000000 #f #7ff8 #3ffe000 #ff800000 #1f', 
    ' #fffc #7fff800 #ffe00000 #8000003f #1ffff #fffff00 #fffe0000', 
    ' #fe00007f #3ffff #ffffffff:7 #3ffffff #e0000000 #7 #fc0', 
    ' #1f8000 #1f000000 #0 #3e #7c00 #f80000 #f0000000', 
    ' #1 #3e0 #7c000 #f800000 #0 #1f #3e00', 
    ' #7c0000 #f8000000 #0 #1f0 #3e000 #7c00000 #80000000', 
    ' #f #1f00 #3e0000 #7c000000 #0 #f8 #1f000', 
    ' #3e00000 #c0000000 #7 #1f80 #3f0000 #7e000000 #0', 
    ' #fc #3f800 #7f00000 #e0000000 #f #3fc0 #7f8000', 
    ' #ff000000 #1 #3fe #ffc00 #3ff80000 #f0000000 #ff', 
    ' #3ffe0 #fffc000 #ff800000 #ffffffff:43 #ffffc1ff #f803ffff #7ffffff', 
    ' #ffffff00 #fff0000f #1fff #3fffff #7ffff800 #ffc00000 #ff', 
    ' #fffffffe #ffffffff:69 #180601f #80601806 #e0180601 #380e0380 #1e0781e0', 
    ' #1f83e0f8 #8fe3f87e #effbfe7f #ffffffff:62 #80000001 #fff #3ffe00', 
    ' #fff80000 #e0000000 #3ff #fff80 #7ffe0000 #f8000000 #1ff', 
    ' #7ffe0 #1fff8000 #fe000000 #ff #3fff8 #fffe000 #ff800000', 
    ' #7f #1fffe #ffff800 #ffe00000 #8000003f #1ffff #ffffe00', 
    ' #fff80000 #e000003f #1ffff #fffff80 #fffe0000 #f800003f #1ffff', 
    ' #fffffe0 #ffff8000 #fe00007f #7ffff #3ffffff8 #ffffe000 #ff8001ff', 
    ' #1fffff #fffffffe #fffff801 #ffe01fff #81ffffff #ffffffff #fffffe3f', 
    ' #ffffffff:9 #1ffffff #fff80000 #e0000007 #1fff #7fff80 #fffe0000', 
    ' #f8000001 #7ff #1fffe0 #7fff8000 #fe000000 #1ff #7fff8', 
    ' #1fffe000 #ff800000 #7f #1fffe #7fffc00 #fff00000 #c000001f', 
    ' #7fff #1ffff00 #fffe0000 #f8000007 #1fff #7fffe0 #ffffc000', 
    ' #ff000001 #7ff #1ffffe #7ffff800 #fff00000 #e00001ff #7ffff', 
    ' #1fffffc0 #ffff8000 #ff00007f #1ffff #7fffffe #fffffc00 #fff8001f', 
    ' #f8007fff #1ffffff #fffffff8 #fffff807 #fffc1fff #ffffffff:9 #1fffffff', 
    ' #0:54 #80000000 #0 #400 #fc300000 #7fffffff #fffffff8', 
    ' #fffff0ff #ffe1ffff #c3ffffff #ffffffff #ffffff87 #ffff0fff #fe1fffff', 
    ' #3fffffff #fffffffc #fffff87f #fff0ffff #e1ffffff #ffffffff #ffffffc3', 
    ' #ffff87ff #ff0fffff #1fffffff #fffffffe #fffffc3f #fff87fff #f0ffffff', 
    ' #ffffffff #ffffffe1 #ffffc3ff #ff87ffff #fffffff #ffffffff #ffffff1f', 
    ' #fffe3fff #fc7fffff #ffffffff #fffffff8 #fffff1ff #ffe3ffff #e7ffffff', 
    ' #ffffffff #ffffffcf #ffff9fff #ff3fffff #7fffffff #fffffffe #fffffeff', 
    ' #fffdffff #fbffffff #ffffffff:8 #1ffffff #3fffc0 #7fff8000 #ff800000', 
    ' #ff #1ffff #3fffe00 #fffe0000 #fc000007 #fff #1ffffc', 
    ' #3ffff800 #fff80000 #f80000ff #1ffff #3fffff8 #fffff800 #fffc0007', 
    ' #fe000fff #3fffff #7fffffff #fffffe00 #fffc00ff #f801ffff #7ffffff', 
    ' #fffffff0 #ffffe00f #ffc01fff #807fffff #ffffffff #ffffff00 #fffe01ff', 
    ' #fc07ffff #fffffff #fffffff8 #fffff01f #ffe07fff #c0ffffff #ffffffff', 
    ' #ffffff81 #ffff07ff #fe0fffff #3fffffff #fffffffc #fffff87f #fff1ffff', 
    ' #e3ffffff #ffffffff #ffffffcf #ffff9fff #ff7fffff #ffffffff:3 #7ffff', 
    ' #0:14 #fffff000 #ffe003ff #c007ffff #fffffff #ffffff80 #ffff001f', 
    ' #fe003fff #7fffff #fffffffc #fffff800 #fff001ff #e001ffff #3ffffff', 
    ' #ffffffc0 #ffff8007 #ff000fff #1fffff #3ffffffe #fffffc00 #fff8007f', 
    ' #f000ffff #1ffffff #ffffffe0 #ffffc003 #ff8007ff #fffff #1fffffff', 
    ' #fffffe00 #fffc003f #f8007fff #ffffff #fffffff0 #ffffe003 #ffc007ff', 
    ' #800fffff #1fffffff #ffffff00 #fffe003f #fc007fff #ffffff #fffffff8', 
    ' #fffff003 #ffe007ff #c00fffff #1fffffff #ffffff80 #ffff007f #fe00ffff', 
    ' #1ffffff #fffffffc #fffff807 #fff00fff #e01fffff #3fffffff #ffffffc0', 
    ' #fe7f807f #7f9fe7f9 #bfeffbfe #fffbfeff #ffffffff:5 #f9ffffff #181e1', 
    ' #0:2 #fffffe00 #ffffffff:70 #fcffffff #ff3fcff3 #3fcff3fc #dff7fdff', 
    ' #ffffff7f #ffffffff:80 #3fffff #ffffffe0 #ffff800f #ffffffff:66 #fe7f9fff', 
    ' #7f9fe7f9 #9fe7f9fe #e7f9fe7f #f9fe7f9f #ff7fdff7 #fffffffd #ffffffff:6', 
    ' #1807ffff #6018060 #1806018 #80601806 #e0380e03 #781e0780 #7e0f83e0', 
    ' #3f8fe1f8 #ffeff9fe #ffffffff:61 #3ffffff #ffffe000 #ff80000f #3fff', 
    ' #fffffe #fffff800 #ffe00003 #80000fff #3fffff #fffffe00 #fff80000', 
    ' #e00007ff #1fffff #7fffff80 #fffe0000 #f80003ff #fffff #7fffffe0', 
    ' #ffff8000 #fe0001ff #fffff #7ffffff8 #ffffe000 #ff8003ff #1fffff', 
    ' #fffffffe #fffff801 #ffe01fff #8fffffff #ffffffff:26 #7f #1e000', 
    ' #7800000 #0 #1e #7c00 #1f00000 #c0000000 #7', 
    ' #1f00 #7e0000 #f8000000 #1 #7e0 #1fc000 #7f000000', 
    ' #0 #1fc #7f800 #1fe00000 #c0000000 #7f #1ff80', 
    ' #7fe0000 #fc000000 #1f #7ff8 #1fff000 #ffe00000 #c0000007', 
    ' #1fff #7fffc0 #ffff8000 #ff800001 #c00007ff #1fffff #fffffff0', 
    ' #ffffffff:19 #ffc0003f #1ffff #ffffffe #fffff000 #ff80007f #3ffff', 
    ' #1ffffffc #ffffe000 #ff0000ff #7ffff #3ffffff8 #ffffc000 #fe0003ff', 
    ' #1fffff #fffffff0 #ffff8000 #fc000fff #ffffff #ffffffe0 #ffff0007', 
    ' #f8007fff #7ffffff #ffffffc0 #fffe007f #f007ffff #ffffffff #ffffff80', 
    ' #fffc1fff #ffffffff:28 #7f #3fff8 #fffe000 #ff800000 #3f', 
    ' #1fffe #7fff800 #ffe00000 #8000001f #ffff #3fffe00 #fff80000', 
    ' #e000001f #7fff #3ffff80 #fffe0000 #f800000f #7fff #3ffffe0', 
    ' #ffff8000 #fe00000f #7fff #3fffff8 #ffffe000 #ff80001f #1ffff', 
    ' #ffffffe #fffff800 #ffe000ff #8007ffff #ffffffff #fffffe00 #fff80fff', 
    ' #e3ffffff #ffffffff:76 #fffffc01 #ffe00fff #7fffff #ffffffff #fffff003', 
    ' #ff801fff #ffffff #fffffffc #ffffe007 #ff003fff #1ffffff #fffffff8', 
    ' #ffffc00f #fe007fff #3ffffff #fffffff8 #ffffc01f #fe00ffff #7ffffff', 
    ' #fffffff0 #ffff803f #fc01ffff #fffffff #ffffffe0 #ffff007f #f803ffff', 
    ' #1fffffff #ffffffe0 #ffff00ff #f807ffff #3fffffff #ffffffc0 #ffff01ff', 
    ' #f80fffff #7fffffff #ffffffc0 #fffe03ff #f81fffff #ffffffff #ffffffc0', 
    ' #ffff00ff #f8000fff #7ffff #3ffffc0 #ffff0000 #f8000001 #1ff', 
    ' #3ffe0 #3ff0000 #fc000000 #7 #fe0 #1f8000 #3e000000', 
    ' #0 #f0 #0:52 #80000000 #0 #e00 #80000', 
    ' #0:54 #ff800000 #1fffff #7ffffffe #fffff800 #ffe003ff #800fffff', 
    ' #7fffffff #fffffe00 #fff801ff #e00fffff #3fffffff #ffffff80 #fffe01ff', 
    ' #f807ffff #1fffffff #0:14 #fff80000 #ffffffff:38 #ffe007ff #fff', 
    ' #1fe00 #f80000 #60000000 #0:10 #ffffe000 #ffffffff:38 #7fffffff', 
    ' #ff800000 #1f #7fc #7e000 #7000000 #0:12 #ffffe000', 
    ' #ff80001f #7fff #1ffffff #fffffc00 #fff80007 #e0001fff #7fffff', 
    ' #ffffffc0 #ffff8001 #ff0007ff #1fffff #7ffffffe #fffffe00 #fffe01ff', 
    ' #ff07ffff #ffffffff:20 #7ffff #1fffffc0 #ff800000 #7f #1ffc0', 
    ' #7f80000 #0 #1f #6000 #0:65 #fffffff8 #ffffffff:3', 
    ' #fff #600000 #80000000 #1 #e00 #380000 #e0000000', 
    ' #1 #780 #3e0000 #f8000000 #0 #7e0 #1f8000', 
    ' #fe000000 #0 #3f8 #1fe000 #ff800000 #0 #3fe', 
    ' #1ff800 #ffe00000 #80000000 #3ff #1ffe00 #fff80000 #e0000000', 
    ' #7ff #3fff80 #fffe0000 #f8000001 #fff #7fffe0 #ffff8000', 
    ' #fe000003 #1fff #fffff8 #ffffe000 #ff800007 #7fff #3fffffe', 
    ' #fffff800 #ffe0003f #8001ffff #1fffffff #fffffe00 #fff801ff #e01fffff', 
    ' #ffffffff #ffffff81 #fffe3fff #fbffffff #ffffffff:57 #fff8003f #e000ffff', 
    ' #3ffffff #ffffff80 #fffe000f #f8003fff #ffffff #ffffffe0 #ffff8003', 
    ' #fe000fff #3fffff #fffffff8 #ffffe001 #ff8007ff #1fffff #fffffffe', 
    ' #fffff800 #ffe003ff #800fffff #7fffffff #fffffe00 #fff801ff #e007ffff', 
    ' #3fffffff #ffffff80 #fffe00ff #f807ffff #1fffffff #ffffffe0 #ffff80ff', 
    ' #fe07ffff #1fffffff #fffffff8 #ffffe0ff #ff87ffff #1fffffff #fffffffe', 
    ' #fffff8ff #ffe7ffff #bfffffff #ffffffff:13 #3ffffff #ffffe000 #ff80007f', 
    ' #7ffff #fffffffe #fffff800 #ffe01fff #81ffffff #ffffffff #fffffe3f', 
    ' #fffbffff #ffffffff:15 #81e0780f #e0f83e07 #f87e1f87 #fe3f8fe3 #ff9fe7f9', 
    ' #ffeffbfe #ffffffff:60 #83ffffff #7fffffff #fffffe00 #ffffffff:52 #3fffffff', 
    ' #fffffff8 #ffffe007 #ffffffff:53 #ffffff81 #fffe007f #ffffffff:53 #fffff81f', 
    ' #ffe007ff #ffffffff:52 #ffffffef #ffff81ff #fe007fff #ffffffff:52 #fffffeff', 
    ' #fff81fff #e007ffff #ffffffff:52 #ffffe7ff #ff81ffff #7fffff #fffffffe', 
    ' #ffffffff:51 #fffe7fff #f81fffff #7ffffff #ffffffe0 #ffffffff:51 #ffe7ffff', 
    ' #81ffffff #7fffffff #fffffe00 #ffffffff:51 #fe7fffff #1fffffff #fffffff8', 
    ' #ffffe00f #ffffffff:51 #e7ffffff #ffffffff #ffffff81 #fffe00ff #ffffffff:51', 
    ' #7fffffff #fffffffe #fffff81f #ffe00fff #ffffffff:52 #ffffffe7 #ffff81ff', 
    ' #fe00ffff #ffffffff:52 #fffffe7f #fff83fff #e01fffff #ffffffff:52 #ffffe7ff', 
    ' #ff83ffff #1ffffff #fffffffe #ffffffff:51 #fffeffff #f83fffff #1fffffff', 
    ' #ffffffe0 #ffffffff:51 #ffefffff #87ffffff #ffffffff #fffffe03 #ffffffff:51', 
    ' #feffffff #7fffffff #fffffff8 #ffffe03f #ffffffff:51 #efffffff #ffffffff', 
    ' #ffffff87 #fffe03ff #ffffffff:53 #fffff8ff #ffe07fff #ffffffff:53 #ffff8fff', 
    ' #fe07ffff #ffffffff:53 #fff9ffff #e0ffffff #ffffffff:53 #ff9fffff #fffffff', 
    ' #fffffffe #ffffffff:52 #fbffffff #ffffffff #ffffffe1 #ffffffff:52 #bfffffff', 
    ' #ffffffff #fffffe3f #ffffffff:54 #ffffe3ff #ffffffff:54 #fffe7fff #ffffffff:54', 
    ' #ffefffff #ffffffff:165 #1fffffff #fffff800 #ffe000ff #8007ffff #3fffffff', 
    ' #fffffe00 #fff801ff #e00fffff #ffffffff #ffffff80 #fffe07ff #f83fffff', 
    ' #ffffffff #ffffffe1 #ffff8fff #fe7fffff #ffffffff #fffffffb #ffffffff:37', 
    ' #fffffff #ffff8000 #fe00003f #1ffff #ffffff8 #ffffe000 #ff80007f', 
    ' #3ffff #1ffffffe #fffff800 #ffe000ff #8007ffff #3fffffff #fffffe00', 
    ' #fff801ff #e00fffff #7fffffff #ffffff80 #fffe03ff #f83fffff #ffffffff', 
    ' #ffffffe1 #ffff8fff #fe7fffff #ffffffff:31 #7ffffff #fff80000 #e000003f', 
    ' #1ffff #fffff80 #fffe0000 #f800007f #1ffff #fffffe0 #ffff8000', 
    ' #fe00007f #3ffff #1ffffff8 #ffffe000 #ff8000ff #7ffff #3ffffffe', 
    ' #fffff800 #ffe001ff #800fffff #7fffffff #fffffe00 #fff803ff #e03fffff', 
    ' #ffffffff #ffffff81 #fffe0fff #f8ffffff #ffffffff #ffffffe7 #ffffbfff', 
    ' #ffffffff:24 #fffffff #ff800000 #7f #1fffe #ffff800 #ffe00000', 
    ' #8000007f #3ffff #1ffffe00 #fff80000 #e000007f #3ffff #1fffff80', 
    ' #fffe0000 #f80000ff #7ffff #3fffffe0 #ffff8000 #fe0001ff #fffff', 
    ' #7ffffff8 #ffffe000 #ff8003ff #1fffff #fffffffe #fffff800 #ffe007ff', 
    ' #807fffff #ffffffff #fffffe03 #fff81fff #e1ffffff #ffffffff #ffffff8f', 
    ' #fffeffff #ffffffff:20 #1fffffff #f8000000 #ff #7ffe0 #1fff8000', 
    ' #fe000000 #ff #7fff8 #1fffe000 #ff800000 #ff #7fffe', 
    ' #3ffff800 #ffe00000 #800000ff #7ffff #3ffffe00 #fff80000 #e00001ff', 
    ' #fffff #7fffff80 #fffe0000 #f80003ff #1fffff #ffffffe0 #ffff8000', 
    ' #fe0007ff #7fffff #fffffff8 #ffffe003 #ff801fff #ffffff #fffffffe', 
    ' #fffff80f #ffe07fff #87ffffff #ffffffff #fffffe3f #fffbffff #ffffffff:16', 
    ' #7fffffff #80000000 #1ff #ffe00 #7ff80000 #e0000000 #1ff', 
    ' #fff80 #7ffe0000 #f8000000 #1ff #fffe0 #7fff8000 #fe000000', 
    ' #3ff #ffff8 #7fffe000 #ff800000 #3ff #1ffffe #fffff800', 
    ' #ffe00000 #800007ff #3fffff #fffffe00 #fff80001 #e0000fff #7fffff', 
    ' #ffffff80 #fffe0003 #f8001fff #1ffffff #ffffffe0 #ffff800f #fe007fff', 
    ' #7ffffff #fffffff8 #ffffe03f #ff83ffff #1fffffff #fffffffe #fffff9ff', 
    ' #ffffffff:14 #1 #7f8 #3fe000 #ff800000 #0 #7fe', 
    ' #3ff800 #ffe00000 #80000000 #7ff #3ffe00 #fff80000 #e0000000', 
    ' #7ff #3fff80 #fffe0000 #f8000000 #7ff #3fffe0 #ffff8000', 
    ' #fe000001 #fff #7ffff8 #ffffe000 #ff800003 #1fff #fffffe', 
    ' #fffff800 #ffe00007 #80003fff #1ffffff #fffffe00 #fff8000f #e000ffff', 
    ' #7ffffff #ffffff80 #fffe003f #f803ffff #3fffffff #ffffffe0 #ffff81ff', 
    ' #fe1fffff #ffffffff #fffffff9 #ffffffff:11 #7 #1f80 #fe0000', 
    ' #f8000000 #3 #1fe0 #ff8000 #fe000000 #3 #1ff8', 
    ' #7fe000 #ff800000 #3 #1ffe #7ff800 #ffe00000 #80000003', 
    ' #1fff #fffe00 #fff80000 #e0000003 #1fff #ffff80 #fffe0000', 
    ' #f8000007 #3fff #1ffffe0 #ffff8000 #fe00000f #7fff #3fffff8', 
    ' #ffffe000 #ff80001f #ffff #ffffffe #fffff800 #ffe0007f #8007ffff', 
    ' #3fffffff #fffffe00 #fff803ff #e01fffff #ffffffff #ffffff81 #fffe1fff', 
    ' #f9ffffff #ffffffff:9 #1f #f800 #3e00000 #80000000 #1f', 
    ' #7e00 #3f80000 #e0000000 #f #7f80 #1fe0000 #f8000000', 
    ' #f #7fe0 #1ff8000 #fe000000 #f #7ff8 #1ffe000', 
    ' #ff800000 #f #7ffe #3fff800 #ffe00000 #8000001f #7fff', 
    ' #3fffe00 #fff80000 #e000001f #ffff #7ffff80 #fffe0000 #f800003f', 
    ' #3ffff #1fffffe0 #ffff8000 #fe0000ff #7ffff #7ffffff8 #ffffe000', 
    ' #ff8003ff #3fffff #fffffffe #fffff803 #ffe01fff #81ffffff #ffffffff', 
    ' #fffffe1f #fff9ffff #ffffffff:6 #ff #38000 #1e000000 #0', 
    ' #78 #3e000 #f800000 #0 #7e #1f800 #fe00000', 
    ' #80000000 #3f #1fe00 #ff80000 #e0000000 #3f #1ff80', 
    ' #7fe0000 #f8000000 #3f #1ffe0 #fff8000 #fe000000 #3f', 
    ' #1fff8 #fffe000 #ff800000 #7f #3fffe #1ffff800 #ffe00000', 
    ' #800000ff #7ffff #3ffffe00 #fff80000 #e00001ff #1fffff #ffffff80', 
    ' #fffe0000 #f80007ff #7fffff #ffffffe0 #ffff8007 #fe003fff #3ffffff', 
    ' #fffffff8 #ffffe03f #ff83ffff #3fffffff #fffffffe #ffffffff:504 #fffff81f', 
    ' #ffe7ffff #ffffffff:11 #ffff800f #fe01ffff #3fffffff #fffffff8 #ffffe7ff', 
    ' #ffffffff:8 #fff80007 #e000ffff #1fffffff #ffffff80 #fffe03ff #f87fffff', 
    ' #ffffffff #ffffffe7 #ffffffff:4 #1fff #0:4 #802000 #80e01802', 
    ' #e0781e03 #f8fe1f83 #ffffbfe7 #ffffffff:3 #1ffff #0:4 #8020000', 
    ' #e018060 #f81e038 #8fe1f83e #fffbfe7f #ffffffff:3 #1fffff #0:4', 
    ' #80200000 #e0180600 #f81e0380 #fe1f83e0 #ffbfe7f8 #ffffffff:3 #1ffffff', 
    ' #0:4 #2000000 #1806008 #81e0380e #e1f83e0f #fbfe7f8f #ffffffff:3', 
    ' #1fffffff #0:4 #20000000 #18060080 #1e0380e0 #1f83e0f8 #bfe7f8fe', 
    ' #ffffffff:4 #1 #0:4 #80600802 #e0380e01 #f83e0f81 #fe7f8fe1', 
    ' #fffffffb #ffffffff:3 #1f #0:4 #6008020 #780e018 #87e0f81e', 
    ' #e7f8fe1f #ffffffbf #ffffffff:3 #1ff #0:3 #80000000 #60080200', 
    ' #780e0180 #7e0f81e0 #7f8fe1f8 #fffffbfe #ffffffff:3 #1fff #0:4', 
    ' #1802008 #80e03806 #e0f81e07 #f8fe3f87 #ffffbfe7 #ffffffff:3 #1ffff', 
    ' #0:4 #18020080 #e038060 #f83e078 #8fe3f87e #fffbfe7f #ffffffff:3', 
    ' #1fffff #0:4 #80200800 #e0380601 #f83e0780 #fe3f87e0 #ffbfe7f9', 
    ' #ffffffff:3 #1ffffff #0:4 #2008020 #3806018 #83e0781e #e3f87e0f', 
    ' #fbfeff9f #ffffffff:3 #1fffffff #0:4 #60080200 #380e0180 #3e0781e0', 
    ' #3f87e1f8 #ffeff9fe #ffffffff:4 #1 #0:3 #802000 #80e01806', 
    ' #e0781e03 #f87e1f83 #feff9fe3 #ffffffff:4 #1f #0:3 #8020080', 
    ' #e018060 #f81e078 #8fe1f83e #eff9fe3f #ffffffff:4 #1ff #0:3', 
    ' #80200800 #e0380601 #f81e0780 #fe1f87e0 #ff9fe7f8 #fffffffe #ffffffff:3', 
    ' #1fff #0:3 #2008020 #3806018 #81e0780e #e1f87e0f #fbfe7f8f', 
    ' #ffffffef #ffffffff:3 #1ffff #0:3 #60080200 #380e0180 #3e0781e0', 
    ' #3f87e0f8 #bfe7f8fe #ffffffff:4 #1fffff #0:3 #802000 #80e01806', 
    ' #e0781e03 #f87e1f83 #fe7f9fe3 #fffffffb #ffffffff:3 #1ffffff #0:3', 
    ' #18020080 #e038060 #f81e078 #87e1f83e #e7f9fe3f #ffffffbf #ffffffff:3', 
    ' #1fffffff #0:3 #80200800 #e0380601 #f81e0780 #fe1f83e0 #ff9fe3f8', 
    ' #fffffbfe #ffffffff:4 #1 #0:2 #6008020 #380e018 #83e0781e', 
    ' #e1f87e0f #f9fe7f8f #ffffffef #ffffffff:4 #1f #0 #80000000', 
    ' #60080200 #380e0180 #3e0781e0 #3f87e0f8 #bfe7f8fe #fffffeff #ffffffff:4', 
    ' #1ff #0:2 #1802008 #80e03806 #e0f81e07 #f87e1f83 #fe7f9fe3', 
    ' #fffffffb #ffffffff:4 #1fff #0 #20000000 #18060080 #e0380e0', 
    ' #f83e078 #8fe1f87e #eff9fe3f #ffffffbf #ffffffff:4 #1ffff #0', 
    ' #800000 #80600802 #e0380e01 #f83e0781 #fe1f87e0 #ff9fe7f8 #fffffffe', 
    ' #ffffffff:4 #1fffff #0 #8000000 #6018020 #780e038 #83e0f81e', 
    ' #e3f87e1f #fbfe7f8f #ffffffef #ffffffff:4 #1ffffff #0 #80200000', 
    ' #e0180600 #781e0380 #7e0f83e0 #3f8fe1f8 #bfe7f9fe #ffffffff:5 #1fffffff', 
    ' #0 #2008000 #3806018 #81e0780e #e1f83e0f #f8fe3f87 #feff9fe7', 
    ' #fffffffb #ffffffff:5 #1 #60080200 #380e0180 #1e0781e0 #1f83e0f8', 
    ' #9fe3f8fe #effbfe7f #ffffffff:6 #1f #1802008 #80e03806 #e0781e07', 
    ' #f87e0f83 #fe7f8fe1 #ffbfeff9 #ffffffff:6 #200001ff #18060080 #1e0380e0', 
    ' #f83e078 #87e1f83e #e7f8fe3f #fffeffbf #ffffffff:6 #801fff #80601802', 
    ' #e0780e03 #f83e0f81 #fe3f87e1 #ff9fe7f8 #fffffbfe #ffffffff:6 #803ffff', 
    ' #e018060 #781e038 #87e0f83e #e3f8fe1f #fbfe7f9f #ffffffef #ffffffff:6', 
    ' #803fffff #e0380601 #f81e0780 #7e1f83e0 #7f8fe3f8 #bfeff9fe #ffffffff:7', 
    ' #7ffffff #780e038 #83e0f81e #e1f87e1f #f9fe3f8f #feffbfe7 #ffffffff:8', 
    ' #781e0380 #7e0f83e0 #3f8fe1f8 #bfe7f9fe #fffffeff #ffffffff:8 #83e0781f', 
    ' #e1f87e0f #f9fe3f8f #feff9fe7 #fffffffb #ffffffff:8 #7e0f83ff #3f8fe1f8', 
    ' #9fe7f8fe #fffbfeff #ffffffff:9 #e1f87fff #f9fe3f8f #feff9fe7 #fffffffb', 
    ' #ffffffff:9 #f83ffff #8fe1f87e #e3f8fe3f #f9fe7f9f #feffbfef #ffffffff:8', 
    ' #1ffff #0:24 #8000 #0:11 #200 #80000 #0:11', 
    ' #2000 #1800000 #0:10 #80 #20000 #18000000 #0:10', 
    ' #800 #600000 #80000000 #3 #0:9 #8000 #6000000', 
    ' #0 #38 #0:8 #200 #180000 #e0000000 #0', 
    ' #780 #0:8 #2000 #1800000 #0 #e #7800', 
    ' #0:7 #80 #20000 #18000000 #0 #e0 #f8000', 
    ' #0:7 #800 #600000 #80000000 #3 #1e00 #f80000', 
    ' #0:7 #8000 #6000000 #0 #38 #1e000 #1f800000', 
    ' #0:6 #200 #180000 #e0000000 #0 #780 #3e0000', 
    ' #f8000000 #1 #0:5 #2000 #1800000 #0 #e', 
    ' #7800 #3e00000 #80000000 #3f #0:4 #80 #20000', 
    ' #18000000 #0 #e0 #f8000 #7e000000 #0 #3f8', 
    ' #0:4 #800 #600000 #80000000 #3 #1e00 #f80000', 
    ' #e0000000 #7 #7f80 #0:4 #8000 #6000000 #0', 
    ' #38 #1e000 #1f800000 #0 #fe #7f800 #0:3', 
    ' #200 #180000 #e0000000 #0 #780 #3e0000 #f8000000', 
    ' #1 #fe0 #ff8000 #0:3 #2000 #1800000 #0', 
    ' #e #7800 #3e00000 #80000000 #3f #1fe00 #1ff80000', 
    ' #0:3 #20000 #18000000 #0 #e0 #f8000 #7e000000', 
    ' #0 #3f8 #3fe000 #ff800000 #1 #0 #800', 
    ' #600000 #80000000 #3 #1e00 #f80000 #e0000000 #7', 
    ' #7f80 #3fe0000 #f8000000 #3f #0 #8000 #6000000', 
    ' #0 #38 #1e000 #1f800000 #0 #fe #ff800', 
    ' #7fe00000 #80000000 #7ff #200 #180000 #e0000000 #0', 
    ' #780 #3e0000 #f8000000 #1 #1fe0 #ff8000 #fe000000', 
    ' #f #fff8 #2000 #1800000 #0 #e #7800', 
    ' #7e00000 #80000000 #3f #1fe00 #1ff80000 #e0000000 #1ff', 
    ' #1fff80 #60000 #38000000 #0 #1e0 #f8000 #7e000000', 
    ' #0 #7f8 #3fe000 #ff800000 #3 #3ffe #1fff800', 
    ' #600000 #80000000 #3 #1e00 #1f80000 #e0000000 #f', 
    ' #7f80 #7fe0000 #f8000000 #7f #3ffe0 #3fff8000 #6000000', 
    ' #0 #78 #3e000 #1f800000 #0 #1fe #ff800', 
    ' #ffe00000 #80000000 #fff #7ffe00 #fff80000 #e0000007 #0', 
    ' #780 #7e0000 #f8000000 #3 #1fe0 #1ff8000 #fe000000', 
    ' #1f #fff8 #fffe000 #ff800000 #1ff #1e #f800', 
    ' #7e00000 #80000000 #7f #3fe00 #3ff80000 #e0000000 #3ff', 
    ' #1fff80 #fffe0000 #f8000003 #3fff #1e0 #1f8000 #fe000000', 
    ' #0 #ff8 #7fe000 #ff800000 #7 #7ffe #7fff800', 
    ' #ffe00000 #8000007f #7ffff #3e00 #1f80000 #e0000000 #1f', 
    ' #ff80 #ffe0000 #f8000000 #ff #fffe0 #ffff8000 #fe000000', 
    ' #fff #fffff8 #7e000 #3f800000 #0 #3fe #1ff800', 
    ' #ffe00000 #80000001 #1fff #1fffe00 #fff80000 #e000001f #1ffff', 
    ' #3fffff80 #fe0000 #f8000000 #7 #7fe0 #3ff8000 #fe000000', 
    ' #3f #3fff8 #3fffe000 #ff800000 #3ff #7ffffe #fffff800', 
    ' #1fe00007 #80000000 #ff #ffe00 #fff80000 #e0000000 #fff', 
    ' #ffff80 #fffe0000 #f800000f #ffff #fffffe0 #ffff8000 #fe0001ff', 
    ' #3 #1ff8 #1ffe000 #ff800000 #1f #1fffe #1ffff800', 
    ' #ffe00000 #800001ff #3fffff #fffffe00 #fff80003 #e0007fff #7f', 
    ' #3ff80 #3ffe0000 #f8000000 #3ff #3fffe0 #ffff8000 #fe000007', 
    ' #7fff #7fffff8 #ffffe000 #ff8000ff #fffff #ffe #fff800', 
    ' #ffe00000 #8000000f #ffff #ffffe00 #fff80000 #e00000ff #1fffff', 
    ' #ffffff80 #fffe0001 #f8003fff #7ffffff #1ffe0 #1fff8000 #fe000000', 
    ' #3ff #3ffff8 #ffffe000 #ff800003 #7fff #7fffffe #fffff800', 
    ' #ffe000ff #800fffff #ffffffff #7ffe01 #fff80000 #e0000007 #7fff', 
    ' #fffff80 #fffe0000 #f80000ff #1fffff #ffffffe0 #ffff8001 #fe003fff', 
    ' #3ffffff #fffffff8 #1fffe07f #ff800000 #1ff #3ffffe #fffff800', 
    ' #ffe00003 #80007fff #7ffffff #fffffe00 #fff800ff #e00fffff #ffffffff', 
    ' #ffffff81 #fffe1fff #f8000007 #ffff #fffffe0 #ffff8000 #fe0001ff', 
    ' #3fffff #fffffff8 #ffffe003 #ff807fff #7ffffff #fffffffe #fffff8ff', 
    ' #ffefffff #800003ff #3fffff #fffffe00 #fff80007 #e000ffff #1fffffff', 
    ' #ffffff80 #fffe03ff #f83fffff #ffffffff #ffffffe3 #ffffbfff #ffffffff:3', 
    ' #ffffefff #ffffffff:54 #7ffffff #ffff8000 #ff00000f #1fff #3ffffe', 
    ' #7ffffc00 #fff80000 #f00000ff #1ffff #3ffffe0 #ffffc000 #ff800007', 
    ' #80000fff #1fffff #3fffff00 #fffe0000 #fc00007f #ffff #1fffff8', 
    ' #fffff000 #fff00003 #e00007ff #fffff #1fffffc0 #ffffc000 #ff80003f', 
    ' #7fff #ffffff #ffffff00 #fffe0001 #fc0003ff #7ffff #ffffffc', 
    ' #fffff800 #fff8001f #f0003fff #7fffff #fffffff0 #fffff000 #ffe001ff', 
    ' #e003ffff #7ffffff #ffffffe0 #ffffe00f #ffc01fff #c03fffff #7fffffff', 
    ' #ffffffc0 #ffffc0ff #ffc1ffff #c3ffffff #ffffffff #ffffffc7 #ffffcfff', 
    ' #ffffffff:82 #3ffff #1ffffc00 #fff80000 #f00001ff #1fffff #ffffffe0', 
    ' #ffffc001 #ff800fff #ffffff #ffffffff #fffffe07 #fffc3fff #e1ffffff', 
    ' #ffffffff #ffffff9f #fffe7fff #f9ffffff #ffffffff #ffffffe7 #ffff9fff', 
    ' #fe7fffff #ffffffff #fffffff9 #ffffe7ff #ff9fffff #7fffffff #fffffffe', 
    ' #fffffdff #fff7ffff #dfffffff #ffffffff #ffffff7f #fffdffff #ffffffff:33', 
    ' #ff1fffff #7fffffff #fffffffc #fffff9ff #ffe7ffff #9fffffff #ffffffff', 
    ' #fffffe7f #fff9ffff #e7ffffff #ffffffff #ffffff9f #fffe7fff #f9ffffff', 
    ' #ffffffff #fffffff7 #ffffdfff #ff7fffff #ffffffff #fffffffd #fffff7ff', 
    ' #ffffffff:33 #fffc7fff #f1ffffff #ffffffff #ffffffc7 #ffff1fff #fc7fffff', 
    ' #ffffffff #fffffff9 #ffffe7ff #ff9fffff #7fffffff #fffffffe #fffff9ff', 
    ' #ffe7ffff #9fffffff #ffffffff #ffffff7f #fffdffff #f7ffffff #ffffffff', 
    ' #ffffffdf #ffffffff:33 #fffff1ff #ffc7ffff #1fffffff #ffffffff #fffffc7f', 
    ' #fff1ffff #c7ffffff #ffffffff #ffffff9f #fffe7fff #f9ffffff #ffffffff', 
    ' #ffffffe7 #ffff9fff #fe7fffff #ffffffff #fffffffd #fffff7ff #ffdfffff', 
    ' #7fffffff #ffffffff #fffffdff #ffffffff:32 #ffffffc7 #ffff1fff #fc7fffff', 
    ' #ffffffff #fffffff1 #ffffc7ff #ff1fffff #7fffffff #fffffffc #fffff9ff', 
    ' #ffe7ffff #9fffffff #ffffffff #fffffe7f #fff9ffff #e7ffffff #ffffffff', 
    ' #ffffffdf #ffff7fff #fdffffff #ffffffff #fffffff7 #ffffffff:31 #1fffffff', 
    ' #ffffffff #fffffc7f #fff1ffff #c7ffffff #ffffffff #ffffff1f #fffc7fff', 
    ' #f1ffffff #ffffffff #ffffffc7 #ffff9fff #fe7fffff #ffffffff #fffffff9', 
    ' #ffffe7ff #ff9fffff #7fffffff #ffffffff #fffffdff #fff7ffff #dfffffff', 
    ' #ffffffff:32 #f87fffff #ffffffff #fffffff1 #ffffc7ff #ff1fffff #7fffffff', 
    ' #fffffffc #fffff1ff #ffc7ffff #1fffffff #ffffffff #fffffe7f #fff9ffff', 
    ' #e7ffffff #ffffffff #ffffff9f #fffe7fff #fdffffff #ffffffff #fffffff7', 
    ' #ffffdfff #ff7fffff #ffffffff:32 #ffe1ffff #87ffffff #ffffffff #ffffff1f', 
    ' #fffc7fff #f1ffffff #ffffffff #ffffffc7 #ffff1fff #fc7fffff #ffffffff', 
    ' #fffffff1 #ffffe7ff #ff9fffff #7fffffff #fffffffe #fffff9ff #fff7ffff', 
    ' #dfffffff #ffffffff #ffffff7f #fffdffff #ffffffff:32 #ffff87ff #fe1fffff', 
    ' #7fffffff #fffffff8 #fffff1ff #ffc7ffff #1fffffff #ffffffff #fffffc7f', 
    ' #fff1ffff #c7ffffff #ffffffff #ffffff9f #fffe7fff #f9ffffff #ffffffff', 
    ' #ffffffe7 #ffffdfff #ff7fffff #ffffffff #fffffffd #fffff7ff #ffffffff:32', 
    ' #fffffe1f #fff87fff #e1ffffff #ffffffff #ffffff87 #ffff1fff #fc7fffff', 
    ' #ffffffff #fffffff1 #ffffc7ff #ff1fffff #7fffffff #fffffffe #fffff9ff', 
    ' #ffe7ffff #9fffffff #ffffffff #ffffff7f #fffdffff #f7ffffff #ffffffff', 
    ' #ffffffdf #ffffffff:31 #7fffffff #fffffff8 #ffffe1ff #ff87ffff #1fffffff', 
    ' #fffffffe #fffffc7f #fff1ffff #c7ffffff #ffffffff #ffffff1f #fffc7fff', 
    ' #f9ffffff #ffffffff #ffffffe7 #ffff9fff #fe7fffff #ffffffff #fffffffd', 
    ' #fffff7ff #ffdfffff #ffffffff:33 #e1ffffff #ffffffff #ffffff87 #fffe1fff', 
    ' #f87fffff #ffffffff #ffffffe1 #ffffc7ff #ff1fffff #7fffffff #fffffffc', 
    ' #fffff1ff #ffe7ffff #9fffffff #ffffffff #fffffe7f #fff9ffff #f7ffffff', 
    ' #ffffffff #ffffffdf #ffff7fff #ffffffff:33 #ff87ffff #1fffffff #fffffffe', 
    ' #fffff87f #ffe1ffff #87ffffff #ffffffff #ffffff1f #fffc7fff #f1ffffff', 
    ' #ffffffff #ffffffc7 #ffff9fff #fe7fffff #ffffffff #fffffff9 #ffffe7ff', 
    ' #ffdfffff #7fffffff #ffffffff #fffffdff #ffffffff:33 #fffe1fff #f87fffff', 
    ' #ffffffff #ffffffe1 #ffff87ff #fe1fffff #7fffffff #fffffffc #fffff1ff', 
    ' #ffc7ffff #1fffffff #ffffffff #fffffe7f #fff9ffff #e7ffffff #ffffffff', 
    ' #ffffff9f #ffff7fff #fdffffff #ffffffff #fffffff7 #ffffffff:33 #fffff07f', 
    ' #ffe1ffff #87ffffff #ffffffff #fffffe1f #fff87fff #f1ffffff #ffffffff', 
    ' #ffffffc7 #ffff1fff #fc7fffff #ffffffff #fffffff9 #ffffe7ff #ff9fffff', 
    ' #7fffffff #fffffffe #fffffdff #fff7ffff #dfffffff #ffffffff:34 #ffffffc1', 
    ' #ffff87ff #fe1fffff #7fffffff #fffffff8 #ffffe1ff #ff87ffff #1fffffff', 
    ' #ffffffff #fffffc7f #fff1ffff #e7ffffff #ffffffff #ffffff9f #fffe7fff', 
    ' #f9ffffff #ffffffff #fffffff7 #ffffdfff #ff7fffff #ffffffff:33 #7ffffff', 
    ' #ffffffff #fffffe1f #fff87fff #e1ffffff #ffffffff #ffffff87 #fffe1fff', 
    ' #fc7fffff #ffffffff #fffffff1 #ffffc7ff #ff9fffff #7fffffff #fffffffe', 
    ' #fffff9ff #ffe7ffff #dfffffff #ffffffff #ffffff7f #ffffffff:34 #fc1fffff', 
    ' #7fffffff #fffffff8 #ffffe1ff #ff87ffff #1fffffff #fffffffe #fffff87f', 
    ' #fff1ffff #c7ffffff #ffffffff #ffffff1f #fffe7fff #f9ffffff #ffffffff', 
    ' #ffffffe7 #ffffdfff #ff7fffff #ffffffff #fffffffd #ffffffff:34 #fff07fff', 
    ' #e1ffffff #ffffffff #ffffff87 #fffe1fff #f87fffff #ffffffff #fffffff1', 
    ' #ffffc7ff #ff1fffff #7fffffff #fffffffc #fffff9ff #ffe7ffff #9fffffff', 
    ' #ffffffff #ffffff7f #fffdffff #f7ffffff #ffffffff:35 #ffffc1ff #ff07ffff', 
    ' #1fffffff #fffffffe #fffff87f #ffe1ffff #c7ffffff #ffffffff #ffffff1f', 
    ' #fffc7fff #f1ffffff #ffffffff #ffffffe7 #ffff9fff #fe7fffff #ffffffff', 
    ' #fffffffd #fffff7ff #ffdfffff #ffffffff:35 #ffffff07 #fffc1fff #f87fffff', 
    ' #ffffffff #ffffffe1 #ffff87ff #ff1fffff #7fffffff #fffffffc #fffff1ff', 
    ' #ffc7ffff #9fffffff #ffffffff #fffffe7f #fff9ffff #f7ffffff #ffffffff', 
    ' #ffffffdf #ffffffff:35 #1fffffff #fffffffc #fffff87f #ffe1ffff #87ffffff', 
    ' #ffffffff #fffffe1f #fffc7fff #f1ffffff #ffffffff #ffffffc7 #ffff9fff', 
    ' #fe7fffff #ffffffff #fffffff9 #fffff7ff #ffdfffff #7fffffff #ffffffff:36', 
    ' #f07fffff #ffffffff #ffffffe1 #ffff87ff #fe1fffff #7fffffff #fffffff8', 
    ' #fffff1ff #ffc7ffff #1fffffff #ffffffff #fffffe7f #fff9ffff #e7ffffff', 
    ' #ffffffff #ffffffdf #ffff7fff #fdffffff #ffffffff:36 #ffc1ffff #87ffffff', 
    ' #ffffffff #fffffe1f #fff87fff #e1ffffff #ffffffff #ffffffc7 #ffff1fff', 
    ' #fc7fffff #ffffffff #fffffff9 #ffffe7ff #ffdfffff #7fffffff #ffffffff', 
    ' #fffffdff #ffffffff:37 #ffff07ff #fe1fffff #7fffffff #fffffff8 #ffffe1ff', 
    ' #ffc7ffff #1fffffff #ffffffff #fffffc7f #fff9ffff #e7ffffff #ffffffff', 
    ' #ffffff9f #ffff7fff #fdffffff #ffffffff #fffffff7 #ffffffff:37 #fffffc1f', 
    ' #fff87fff #e1ffffff #ffffffff #ffffff87 #ffff1fff #fc7fffff #ffffffff', 
    ' #fffffff1 #ffffe7ff #ff9fffff #7fffffff #fffffffe #fffffdff #fff7ffff', 
    ' #ffffffff:38 #7fffffff #fffffff8 #ffffe1ff #ff87ffff #1fffffff #fffffffe', 
    ' #fffffc7f #fff1ffff #e7ffffff #ffffffff #ffffff9f #fffe7fff #fdffffff', 
    ' #ffffffff #fffffff7 #ffffdfff #ffffffff:38 #e1ffffff #ffffffff #ffffff87', 
    ' #fffe1fff #fc7fffff #ffffffff #fffffff1 #ffffc7ff #ff9fffff #7fffffff', 
    ' #fffffffe #fffff9ff #fff7ffff #dfffffff #ffffffff:40 #ff87ffff #1fffffff', 
    ' #fffffffe #fffff87f #fff1ffff #c7ffffff #ffffffff #ffffff9f #fffe7fff', 
    ' #f9ffffff #ffffffff #fffffff7 #ffffdfff #ff7fffff #ffffffff:40 #fffe1fff', 
    ' #f87fffff #ffffffff #fffffff1 #ffffc7ff #ff1fffff #7fffffff #fffffffe', 
    ' #fffff9ff #ffe7ffff #dfffffff #ffffffff #ffffff7f #ffffffff:41 #fffff87f', 
    ' #ffe1ffff #c7ffffff #ffffffff #ffffff1f #fffe7fff #f9ffffff #ffffffff', 
    ' #ffffffe7 #ffffdfff #ff7fffff #ffffffff:43 #ffffffe1 #ffffc7ff #ff1fffff', 
    ' #7fffffff #fffffffc #fffff9ff #ffe7ffff #dfffffff #ffffffff #ffffff7f', 
    ' #fffdffff #ffffffff:42 #87ffffff #ffffffff #ffffff1f #fffc7fff #f9ffffff', 
    ' #ffffffff #ffffffe7 #ffff9fff #ff7fffff #ffffffff #fffffffd #ffffffff:43', 
    ' #ff1fffff #7fffffff #fffffffc #fffff9ff #ffe7ffff #9fffffff #ffffffff', 
    ' #ffffff7f #fffdffff #ffffffff:45 #fffc7fff #f1ffffff #ffffffff #ffffffe7', 
    ' #ffff9fff #ff7fffff #ffffffff #fffffffd #ffffffff:46 #fffff1ff #ffe7ffff', 
    ' #9fffffff #ffffffff #ffffff7f #fffdffff #f7ffffff #ffffffff:47 #ffffffe7', 
    ' #ffff9fff #ff7fffff #ffffffff #fffffffd #fffff7ff #ffffffff:47 #9fffffff', 
    ' #ffffffff #ffffff7f #fffdffff #f7ffffff #ffffffff:49 #fe7fffff #ffffffff', 
    ' #fffffffd #fffff7ff #ffffffff:50 #fffdffff #f7ffffff #ffffffff:52 #fffff7ff', 
    ' #ffffffff:107 #20080200 #8020080 #2008020 #802008 #80200802 #60180600', 
    ' #38060180 #1e0380e0 #f83e078 #8fe1f87e #eff9fe7f #ffffffff:2 #80200f', 
    ' #80200802 #20080200 #8020080 #2008020 #1806008 #80601806 #e0380e03', 
    ' #f83e0781 #fe1f87e0 #ff9fe7f8 #fffffffe #ffffffff #80200ff #2008020', 
    ' #802008 #80200802 #20080200 #18060080 #e018060 #380e038 #83e0781e', 
    ' #e1f87e0f #f9fe7f8f #ffffffef #ffffffff #80200fff #20080200 #8020080', 
    ' #2008020 #802008 #80601802 #e0180601 #780e0380 #3e0781e0 #1f87e0f8', 
    ' #9fe7f8fe #fffffeff #ffffffff #200ffff #802008 #80200802 #20080200', 
    ' #8020080 #6018020 #1806018 #80e0380e #e0781e07 #f87e0f83 #fe7f8fe1', 
    ' #ffffeff9 #ffffffff #200fffff #8020080 #2008020 #802008 #80200802', 
    ' #60180200 #18060180 #e0380e0 #781e078 #87e0f83e #e7f8fe1f #fffeff9f', 
    ' #ffffffff #ffffff #80200802 #20080200 #8020080 #2008020 #1806008', 
    ' #80601806 #e0380e03 #f81e0780 #7e0f83e0 #7f8fe3f8 #ffeff9fe #ffffffff', 
    ' #fffffff #2008020 #802008 #80200802 #20080200 #18060080 #6018060', 
    ' #380e038 #81e0781e #e1f83e0f #f8fe3f87 #feff9fe7 #ffffffff:2 #20080200', 
    ' #8020080 #2008020 #802008 #80601802 #e0180601 #380e0380 #1e0781e0', 
    ' #1f83e0f8 #8fe3f87e #eff9fe7f #ffffffff:2 #80200f #80200802 #20080200', 
    ' #8020080 #6018020 #1806018 #80e0380e #e0781e03 #f83e0f83 #fe3f87e1', 
    ' #ffbfe7f8 #fffffffe #ffffffff #80200ff #2008020 #802008 #80200802', 
    ' #60180600 #38060180 #e0380e0 #781e078 #83e0f83e #e3f87e1f #fbfe7f8f', 
    ' #ffffffef #ffffffff #80200fff #20080200 #8020080 #2008020 #1806018', 
    ' #80601806 #e0380e03 #781e0780 #7e0f83e0 #3f8fe1f8 #bfe7f9fe #fffffeff', 
    ' #ffffffff #200ffff #802008 #80200802 #20080200 #18060180 #e018060', 
    ' #380e038 #81e0781e #e0f83e0f #f8fe1f87 #fe7f9fe3 #ffffeffb #ffffffff', 
    ' #200fffff #8020080 #2008020 #802008 #80601806 #e0380601 #380e0380', 
    ' #1e0781e0 #f83e0f8 #8fe1f87e #e7f9fe3f #ffffffbf #ffffffff #ffffff', 
    ' #80200802 #20080200 #18020080 #6018060 #3806018 #80e0380e #e0781e07', 
    ' #f83e0f83 #fe1f87e1 #7f9fe3f8 #fffffbfe #ffffffff #fffffff #2008020', 
    ' #802008 #80600802 #60180601 #380e0180 #1e0380e0 #781e078 #83e0f83e', 
    ' #e3f87e1f #f9fe7f8f #ffffbfef #ffffffff:2 #20080200 #8020080 #6018020', 
    ' #1806018 #80e03806 #e0380e03 #f81e0781 #7e0f83e0 #3f87e1f8 #9fe7f8fe', 
    ' #fffbfeff #ffffffff:2 #80200f #80200802 #60180601 #18060180 #e0380e0', 
    ' #780e038 #81e0781e #e0f83e0f #f8fe1f87 #fe7f8fe3 #ffbfeff9 #ffffffff:2', 
    ' #80200ff #6008020 #1806018 #80601806 #e0380e03 #781e0380 #3e0781e0', 
    ' #1f83e0f8 #8fe1f87e #e7f9fe3f #fffeffbf #ffffffff:2 #80200fff #60180600', 
    ' #18060180 #e018060 #380e038 #81e0780e #e0f81e07 #f87e0f83 #fe3f87e1', 
    ' #7f9fe3f8 #ffeffbfe #ffffffff:2 #200ffff #1806018 #80601806 #e0380e01', 
    ' #380e0380 #1e0781e0 #f83e078 #87e0f83e #e3f87e1f #f9fe7f8f #feffbfe7', 
    ' #ffffffff:2 #601fffff #18060180 #6018060 #380e038 #80e0380e #e0781e07', 
    ' #f83e0f81 #7e1f83e0 #3f8fe1f8 #9fe7f8fe #fffbfeff #ffffffff:2 #1ffffff', 
    ' #80601806 #e0380601 #380e0380 #1e0780e0 #781e078 #83e0f83e #e1f87e0f', 
    ' #f8fe3f87 #fe7f9fe3 #ffbfeffb #ffffffff:2 #1fffffff #6018060 #380e038', 
    ' #80e0380e #e0781e03 #f81e0781 #3e0f83e0 #1f87e1f8 #8fe3f8fe #e7f9fe7f', 
    ' #fffeffbf #ffffffff:3 #e0380601 #380e0380 #1e0380e0 #781e078 #83e0f81e', 
    ' #e0f83e0f #f87e1f87 #fe3f8fe3 #ff9fe7f9 #ffeffbfe #ffffffff:3 #380e03f', 
    ' #80e0380e #e0781e03 #781e0781 #3e0f83e0 #1f87e0f8 #8fe1f87e #e3f8fe3f', 
    ' #fbfe7f9f #ffffbfef #ffffffff:3 #380e03ff #1e0380e0 #781e078 #83e0781e', 
    ' #e0f83e0f #f87e1f83 #fe3f87e1 #7f8fe3f8 #bfe7f9fe #fffffeff #ffffffff:3', 
    ' #80e03fff #e0781e07 #781e0781 #3e0f83e0 #1f83e0f8 #87e1f87e #e3f8fe1f', 
    ' #f9fe7f8f #feff9fe7 #ffffeffb #ffffffff:3 #1e07ffff #781e078 #83e0f81e', 
    ' #e0f83e0f #f87e1f83 #fe1f87e1 #3f8fe3f8 #9fe7f9fe #effbfe7f #ffffffbf', 
    ' #ffffffff:3 #e07fffff #f83e0781 #3e0f83e0 #1f83e0f8 #87e1f87e #e3f8fe1f', 
    ' #f8fe3f8f #fe7f9fe7 #ffbfeffb #fffffffe #ffffffff:3 #fffffff #83e0f83e', 
    ' #e0f83e0f #f87e1f87 #fe1f87e1 #3f8fe3f8 #9fe7f8fe #eff9fe7f #fffeffbf', 
    ' #ffffffff:5 #7e1f83e0 #1f87e1f8 #87e1f87e #e3f8fe3f #f8fe3f8f #fe7f9fe7', 
    ' #ffbfeff9 #fffffbfe #ffffffff:5 #e1f87e1f #f87e1f87 #fe3f8fe3 #3f8fe3f8', 
    ' #9fe7f9fe #eff9fe7f #fbfeffbf #ffffffef #ffffffff:5 #3f8fe3ff #8fe3f8fe', 
    ' #e3f8fe3f #f9fe7f8f #fe7f9fe7 #ffbfeff9 #ffeffbfe #ffffffff:6 #f8fe3fff', 
    ' #fe7f9fe3 #7f9fe7f9 #9fe7f9fe #effbfe7f #fbfeffbf #ffffffff:7 #9fe7ffff', 
    ' #e7f9fe7f #fbfe7f9f #feffbfef #ffbfeffb #fffffffe #ffffffff:7 #feffffff', 
    ' #ffbfeffb #bfeffbfe #effbfeff #ffffffff:75 #3fff #ff0000 #fe000000', 
    ' #3 #ffc #3ff800 #fff00000 #e0000000 #3ff #1fffc0', 
    ' #ffff8000 #ff000000 #7ff #fe #3fc00 #ff80000 #f0000000', 
    ' #3f #ffe0 #3ffc000 #ff800000 #f #7fff #3fffe00', 
    ' #fffc0000 #f800001f #3 #ff0 #1fe000 #ffc00000 #80000000', 
    ' #3ff #fff00 #3ffe0000 #fc000000 #1ff #ffff8 #7ffff000', 
    ' #7e00000 #c0000000 #1f #7f80 #1ff0000 #fe000000 #f', 
    ' #3ffc #fff800 #fff00000 #e0000007 #3fff #1ffffc0 #1f8000', 
    ' #7f000000 #0 #1fe #7fc00 #1ff80000 #f0000000 #ff', 
    ' #3ffe0 #1fffc000 #ff800000 #ff #7ffff #7e00 #1fc0000', 
    ' #f8000000 #7 #1ff0 #7fe000 #ffc00000 #80000003 #fff', 
    ' #7fff00 #fffe0000 #fc000003 #1fff #1f8 #7f000 #1fe00000', 
    ' #c0000000 #7f #1ff80 #fff0000 #fe000000 #3f #1fffc', 
    ' #ffff800 #fff00000 #e000007f #7 #1fc0 #7f8000 #ff000000', 
    ' #1 #7fe #3ffc00 #fff80000 #f0000000 #7ff #3fffe0', 
    ' #ffffc000 #1f800001 #0 #7f #1fe00 #7fc0000 #f8000000', 
    ' #1f #fff0 #3ffe000 #ffc00000 #8000001f #ffff #7ffff00', 
    ' #7e0000 #fc000000 #1 #7f8 #1ff000 #7fe00000 #c0000000', 
    ' #3ff #fff80 #7fff0000 #fe000000 #3ff #1ffffc #1f800', 
    ' #7f00000 #e0000000 #1f #7fc0 #1ff8000 #ff000000 #f', 
    ' #3ffe #1fffc00 #fff80000 #f000000f #7fff #7e0 #1fc000', 
    ' #7f800000 #0 #1ff #7fe00 #3ffc0000 #f8000000 #1ff', 
    ' #7fff0 #3fffe000 #ffc00000 #800001ff #1f #7f00 #1fe0000', 
    ' #fc000000 #7 #3ff8 #fff000 #ffe00000 #c0000007 #1fff', 
    ' #ffff80 #ffff0000 #7e00000f #0 #1fc #7f800 #1ff00000', 
    ' #e0000000 #ff #3ffc0 #1fff8000 #ff000000 #ff #7fffe', 
    ' #3ffffc00 #1f80000 #f0000000 #7 #1fe0 #7fc000 #ff800000', 
    ' #3 #fff #7ffe00 #fffc0000 #f8000003 #1fff #fffff0', 
    ' #7e000 #1fc00000 #80000000 #7f #1ff00 #ffe0000 #fc000000', 
    ' #3f #1fff8 #ffff000 #ffe00000 #c000007f #3ffff #1f80', 
    ' #7f0000 #fe000000 #1 #7fc #3ff800 #fff00000 #e0000001', 
    ' #7ff #3fffc0 #ffff8000 #ff000001 #1fff #7e #1fc00', 
    ' #7f80000 #f0000000 #3f #ffe0 #7ffc000 #ff800000 #3f', 
    ' #ffff #ffffe00 #fffc0000 #f800007f #1 #7f0 #1fe000', 
    ' #ffc00000 #80000000 #3ff #1fff00 #fffe0000 #fc000000 #7ff', 
    ' #3ffff8 #fffff000 #7e00001 #c0000000 #1f #7f80 #3ff0000', 
    ' #fe000000 #f #7ffc #3fff800 #fff00000 #e000001f #ffff', 
    ' #7ffffc0 #1f8000 #7f000000 #0 #3fe #ffc00 #7ff80000', 
    ' #f0000000 #1ff #fffe0 #7fffc000 #ff800000 #3ff #3fffff', 
    ' #7e00 #1fc0000 #f8000000 #f #3ff0 #1ffe000 #ffc00000', 
    ' #8000000f #7fff #3ffff00 #fffe0000 #fc00001f #ffff #1f8', 
    ' #7f000 #3fe00000 #c0000000 #ff #7ff80 #3fff0000 #fe000000', 
    ' #1ff #ffffc #7ffff800 #fff00000 #e00007ff #7 #3fc0', 
    ' #ff8000 #ff000000 #7 #1ffe #fffc00 #fff80000 #f0000007', 
    ' #3fff #3ffffe0 #ffffc000 #1f80001f #0 #ff #3fe00', 
    ' #1ffc0000 #f8000000 #ff #7fff0 #3fffe000 #ffc00000 #800001ff', 
    ' #fffff #7fffff00 #fe0000 #fc000000 #3 #1ff8 #7ff000', 
    ' #ffe00000 #c0000003 #1fff #ffff80 #ffff0000 #fe000007 #7fff', 
    ' #3fffffc #3f800 #ff00000 #e0000000 #7f #3ffc0 #fff8000', 
    ' #ff000000 #7f #3fffe #3ffffc00 #fff80000 #f00001ff #fffff', 
    ' #fe0 #7fc000 #ff800000 #1 #fff #7ffe00 #fffc0000', 
    ' #f8000003 #1fff #fffff0 #ffffe000 #ffc0000f #80007fff #3f', 
    ' #1ff00 #ffe0000 #fc000000 #3f #1fff8 #ffff000 #ffe00000', 
    ' #c000007f #7ffff #3fffff80 #ffff0000 #fe0003ff #1 #7fc', 
    ' #3ff800 #fff00000 #e0000001 #fff #7fffc0 #ffff8000 #ff000003', 
    ' #1fff #1fffffe #fffffc00 #7f8000f #f0000000 #3f #ffe0', 
    ' #7ffc000 #ff800000 #3f #1ffff #1ffffe00 #fffc0000 #f80000ff', 
    ' #7ffff #7ffffff0 #1fe000 #ffc00000 #80000000 #7ff #3fff00', 
    ' #fffe0000 #fc000001 #fff #7ffff8 #fffff000 #ffe00007 #c0003fff', 
    ' #3ffffff #ff80 #3ff0000 #fe000000 #1f #fffc #7fff800', 
    ' #fff00000 #e000007f #3ffff #1fffffc0 #ffff8000 #ff0001ff #fffff', 
    ' #3fe #1ffc00 #fff80000 #f0000000 #7ff #3fffe0 #ffffc000', 
    ' #ff800001 #1fff #ffffff #fffffe00 #fffc000f #f8007fff #1f', 
    ' #7ff0 #3ffe000 #ffc00000 #8000003f #1ffff #fffff00 #fffe0000', 
    ' #fc0000ff #7ffff #7ffffff8 #fffff000 #7fe003ff #c0000000 #3ff', 
    ' #1fff80 #ffff0000 #fe000000 #fff #7ffffc #fffff800 #fff00007', 
    ' #e0003fff #3ffffff #ffffffc0 #3ff801f #ff000000 #1f #fffe', 
    ' #7fffc00 #fff80000 #f000007f #3ffff #3fffffe0 #ffffc000 #ff8001ff', 
    ' #1fffff #ffffffff #ffe00 #7ffc0000 #f8000000 #7ff #3ffff0', 
    ' #ffffe000 #ffc00001 #80001fff #1ffffff #ffffff00 #fffe000f #fc00ffff', 
    ' #7ffffff #7ff8 #3fff000 #ffe00000 #c000003f #1ffff #1fffff80', 
    ' #ffff0000 #fe0000ff #fffff #7ffffffc #fffff800 #fff007ff #e03fffff', 
    ' #3ff #1fffc0 #ffff8000 #ff000001 #fff #fffffe #fffffc00', 
    ' #fff80007 #f0007fff #7ffffff #ffffffe0 #ffffc03f #ff81ffff #1f', 
    ' #ffff #ffffe00 #fffc0000 #f800007f #7ffff #7ffffff0 #ffffe000', 
    ' #ffc003ff #803fffff #ffffffff #ffffff01 #fffe0fff #fc000000 #fff', 
    ' #7ffff8 #fffff000 #ffe00007 #c0007fff #3ffffff #ffffff80 #ffff003f', 
    ' #fe03ffff #1fffffff #fffffffc #fffff8ff #ffffffff:448 #ffbfeff9 #fffffbfe', 
    ' #ffffffff:10 #e3ffffff #f9fe7f8f #feff9fe7 #ffbfeffb #ffffffff:9 #1f87ffff', 
    ' #8fe3f87e #e7f9fe3f #fbfe7f9f #ffffbfef #ffffffff:8 #f83e07ff #7e1f87e0', 
    ' #3f8fe3f8 #9fe7f9fe #effbfe7f #ffffffbf #ffffffff:7 #81e0780f #e0f83e07', 
    ' #f87e1f87 #fe3f8fe3 #ff9fe7f9 #ffeffbfe #ffffffff:6 #1fffffff #e038060', 
    ' #f81e078 #87e0f83e #e3f87e1f #f9fe3f8f #feff9fe7 #ffffeffb #ffffffff:5', 
    ' #801fffff #e0180600 #781e0380 #3e0f81e0 #1f87e1f8 #8fe3f8fe #e7f9fe7f', 
    ' #fbfeffbf #ffffffff:64 #7ffffff #ffffff00 #fffc001f #f8007fff #1ffffff', 
    ' #ffffffe0 #ffffc007 #ff801fff #7fffff #fffffffe #fffffc01 #fff007ff', 
    ' #e01fffff #7fffffff #ffffffc0 #ffff01ff #fe07ffff #1fffffff #fffffffc', 
    ' #fffff87f #fff1ffff #e7ffffff #ffffffff #ffffffdf #ffffffff:123 #fff9ffff', 
    ' #e7ffffff #ffffffff #ffffff9f #fffe7fff #fdffffff #ffffffff #fffffff7', 
    ' #ffffdfff #ff7fffff #ffffffff #fffffffd #ffffffff:43 #ff9fffff #7fffffff', 
    ' #fffffffe #fffff9ff #ffe7ffff #dfffffff #ffffffff #ffffff7f #fffdffff', 
    ' #f7ffffff #ffffffff #ffffffdf #ffffffff:43 #f9ffffff #ffffffff #ffffffe7', 
    ' #ffff9fff #ff7fffff #ffffffff #fffffffd #fffff7ff #ffdfffff #7fffffff', 
    ' #ffffffff:45 #9fffffff #ffffffff #fffffe7f #fff9ffff #f7ffffff #ffffffff', 
    ' #ffffffdf #ffff7fff #fdffffff #ffffffff #fffffff7 #ffffffff:45 #fffffff9', 
    ' #ffffe7ff #ff9fffff #7fffffff #ffffffff #fffffdff #fff7ffff #dfffffff', 
    ' #ffffffff:47 #ffffff9f #fffe7fff #fdffffff #ffffffff #fffffff7 #ffffdfff', 
    ' #ff7fffff #ffffffff #fffffffd #ffffffff:46 #fffff9ff #ffe7ffff #dfffffff', 
    ' #ffffffff #ffffff7f #fffdffff #f7ffffff #ffffffff:48 #ffff9fff #ff7fffff', 
    ' #ffffffff #fffffffd #fffff7ff #ffdfffff #7fffffff #ffffffff:48 #fffdffff', 
    ' #f7ffffff #ffffffff #ffffffdf #ffff7fff #fdffffff #ffffffff:49 #ffdfffff', 
    ' #7fffffff #ffffffff #fffffdff #fff7ffff #ffffffff:50 #fdffffff #ffffffff', 
    ' #fffffff7 #ffffdfff #ff7fffff #ffffffff:50 #dfffffff #ffffffff #ffffff7f', 
    ' #fffdffff #ffffffff:52 #fffffffd #fffff7ff #ffffffff:53 #ffffffdf #ffffffff:54', 
    ' #fffffdff #ffffffff:2026 #3f #1fff8 #fffe000 #ff800000 #7f', 
    ' #3fffe #3ffff800 #ffe00000 #800001ff #1fffff #fffffe00 #fff80001', 
    ' #e0001fff #3ff #1fff80 #fffe0000 #f8000000 #fff #7fffe0', 
    ' #ffff8000 #fe000003 #3fff #1fffff8 #ffffe000 #ff80001f #3ffff', 
    ' #7ffe #3fff800 #ffe00000 #8000001f #ffff #7fffe00 #fff80000', 
    ' #e000003f #3ffff #3fffff80 #fffe0000 #f80003ff #3fffff #7ffe0', 
    ' #3fff8000 #fe000000 #1ff #ffff8 #7fffe000 #ff800000 #7ff', 
    ' #3ffffe #fffff800 #ffe00003 #80003fff #7ffffff #7ffe00 #fff80000', 
    ' #e0000003 #1fff #ffff80 #fffe0000 #f800000f #7fff #7ffffe0', 
    ' #ffff8000 #fe00003f #7ffff #7ffffff8 #7ffe000 #ff800000 #3f', 
    ' #1fffe #1ffff800 #ffe00000 #800000ff #fffff #7ffffe00 #fff80000', 
    ' #e00007ff #7fffff #ffffff80 #fffe000f #f8000000 #7ff #3fffe0', 
    ' #ffff8000 #fe000001 #fff #fffff8 #ffffe000 #ff80000f #7fff', 
    ' #ffffffe #fffff800 #ffe000ff #8000000f #7fff #3fffe00 #fff80000', 
    ' #e000001f #1ffff #fffff80 #fffe0000 #f80000ff #fffff #ffffffe0', 
    ' #ffff8000 #fe001fff #ff #7fff8 #7fffe000 #ff800000 #3ff', 
    ' #1ffffe #fffff800 #ffe00001 #80001fff #1ffffff #fffffe00 #fff8001f', 
    ' #e001ffff #1fff #ffff80 #fffe0000 #f8000007 #3fff #3ffffe0', 
    ' #ffff8000 #fe00001f #1ffff #1ffffff8 #ffffe000 #ff8001ff #3fffff', 
    ' #1fffe #ffff800 #ffe00000 #8000007f #7ffff #3ffffe00 #fff80000', 
    ' #e00003ff #3fffff #ffffff80 #fffe0003 #f8003fff #7ffffff #1fffe0', 
    ' #ffff8000 #fe000000 #fff #7ffff8 #ffffe000 #ff800007 #3fff', 
    ' #3fffffe #fffff800 #ffe0003f #8007ffff #7fffffff #3fffe00 #fff80000', 
    ' #e000001f #ffff #fffff80 #fffe0000 #f800007f #7ffff #7fffffe0', 
    ' #ffff8000 #fe0007ff #7fffff #fffffff8 #3fffe00f #ff800000 #1ff', 
    ' #1ffffe #fffff800 #ffe00000 #80000fff #ffffff #fffffe00 #fff8000f', 
    ' #e000ffff #fffffff #ffffff80 #fffe01ff #f8000007 #3fff #1ffffe0', 
    ' #ffff8000 #fe00001f #1ffff #ffffff8 #ffffe000 #ff8000ff #1fffff', 
    ' #fffffffe #fffff801 #ffe03fff #8000007f #3ffff #3ffffe00 #fff80000', 
    ' #e00003ff #1fffff #ffffff80 #fffe0001 #f8001fff #1ffffff #ffffffe0', 
    ' #ffff803f #fe07ffff #fff #7ffff8 #ffffe000 #ff800007 #3fff', 
    ' #3fffffe #fffff800 #ffe0003f #8003ffff #3fffffff #fffffe00 #fff807ff', 
    ' #e07fffff #ffff #fffff80 #fffe0000 #f800007f #7ffff #7fffffe0', 
    ' #ffff8000 #fe0007ff #7fffff #fffffff8 #ffffe007 #ff80ffff #fffffff', 
    ' #1ffffe #fffff800 #ffe00000 #80000fff #ffffff #fffffe00 #fff8000f', 
    ' #e000ffff #fffffff #ffffff80 #fffe00ff #f81fffff #ffffffff #3ffffe1', 
    ' #ffff8000 #fe00001f #1ffff #1ffffff8 #ffffe000 #ff8000ff #1fffff', 
    ' #fffffffe #fffff801 #ffe01fff #83ffffff #ffffffff #3ffffe3f #fff80000', 
    ' #e00003ff #3fffff #ffffff80 #fffe0001 #f8001fff #3ffffff #ffffffe0', 
    ' #ffff803f #fe03ffff #7fffffff #fffffff8 #ffffefff #ff800007 #7fff', 
    ' #7fffffe #fffff800 #ffe0003f #8003ffff #7fffffff #fffffe00 #fff807ff', 
    ' #e07fffff #ffffffff #ffffff8f #ffffffff #f80000ff #fffff #ffffffe0', 
    ' #ffff8000 #fe0007ff #ffffff #fffffff8 #ffffe00f #ff80ffff #fffffff', 
    ' #fffffffe #fffff9ff #ffffffff #80001fff #1ffffff #fffffe00 #fff8001f', 
    ' #e001ffff #1fffffff #ffffff80 #fffe01ff #f81fffff #ffffffff #ffffffe3', 
    ' #ffffbfff #ffffffff #3ffff #3ffffff8 #ffffe000 #ff8003ff #3fffff', 
    ' #fffffffe #fffff803 #ffe03fff #87ffffff #ffffffff #fffffe7f #ffffffff:2', 
    ' #7fffff #ffffff80 #fffe0007 #f8007fff #7ffffff #ffffffe0 #ffff807f', 
    ' #fe0fffff #ffffffff #fffffff8 #ffffffff:3 #fffffff #fffff800 #ffe000ff', 
    ' #800fffff #ffffffff #fffffe01 #fff81fff #e1ffffff #ffffffff #ffffffbf', 
    ' #ffffffff:4 #ffff8003 #fe003fff #3ffffff #fffffff8 #ffffe03f #ff87ffff', 
    ' #7fffffff #fffffffe #ffffffff:5 #fff8007f #e007ffff #ffffffff #ffffff80', 
    ' #fffe0fff #f8ffffff #ffffffff:7 #ff801fff #1ffffff #fffffffe #fffff83f', 
    ' #ffe3ffff #bfffffff #ffffffff:7 #f807ffff #7fffffff #ffffffe0 #ffff8fff', 
    ' #feffffff #ffffffff:8 #81ffffff #ffffffff #fffffe3f #fffbffff #ffffffff:10', 
    ' #fffffff8 #ffffefff #ffffffff:114 #3fffffff #18060180 #6018060 #3806018', 
    ' #80e0380e #e0781e07 #f87e0f83 #fe3f8fe1 #ffbfeff9 #ffffffff:5 #80600803', 
    ' #60180601 #38060180 #e0380e0 #781e078 #87e0f83e #e3f8fe1f #fbfeff9f', 
    ' #ffffffff:5 #600803f #1806018 #80601806 #e0380e03 #781e0780 #7e0f83e0', 
    ' #3f8fe1f8 #bfeff9fe #ffffffff:5 #200803ff #18060180 #6018060 #380e038', 
    ' #81e0780e #e0f83e07 #f8fe1f87 #feff9fe3 #fffffffb #ffffffff:4 #803fff', 
    ' #80601802 #60180601 #380e0380 #1e0780e0 #f83e078 #8fe1f87e #eff9fe3f', 
    ' #ffffffbf #ffffffff:4 #803ffff #6018020 #1806018 #80e03806 #e0781e03', 
    ' #f83e0f81 #fe1f87e0 #ff9fe3f8 #fffffbfe #ffffffff:4 #803fffff #60180200', 
    ' #18060180 #e038060 #781e038 #83e0f81e #e1f87e0f #f9fe3f8f #ffffbfef', 
    ' #ffffffff:4 #3ffffff #1802008 #80601806 #e0380e01 #781e0380 #3e0f81e0', 
    ' #1f87e1f8 #9fe7f8fe #fffbfeff #ffffffff:4 #3fffffff #18020080 #6018060', 
    ' #380e018 #81e0380e #e0f81e07 #f87e1f83 #fe7f8fe3 #ffbfeff9 #ffffffff:5', 
    ' #80200803 #60180601 #380e0180 #1e0780e0 #f83e078 #87e1f83e #e7f8fe3f', 
    ' #fffeff9f #ffffffff:5 #200803f #1806018 #80e03806 #e0780e03 #f83e0781', 
    ' #7e1f83e0 #7f8fe3f8 #ffeff9fe #ffffffff:5 #600803ff #18060180 #e038060', 
    ' #780e038 #83e0781e #e1f87e0f #f8fe3f87 #feffbfe7 #ffffffff:5 #803fff', 
    ' #80601806 #e0380601 #781e0380 #3e0f81e0 #1f87e0f8 #9fe3f8fe #effbfe7f', 
    ' #ffffffff:5 #803ffff #6018060 #380e018 #81e0380e #e0f81e07 #f87e0f83', 
    ' #fe3f8fe1 #ffbfe7f9 #fffffffe #ffffffff:4 #803fffff #60180601 #380e0180', 
    ' #1e0780e0 #f83e078 #87e1f83e #e3f8fe3f #fbfe7f9f #ffffffff:5 #3ffffff', 
    ' #1806018 #80e03806 #e0780e03 #f83e0781 #7e1f83e0 #7f8fe3f8 #bfeff9fe', 
    ' #ffffffff:5 #7fffffff #18060180 #e0380e0 #781e038 #83e0f81e #e1f87e0f', 
    ' #f8fe3f8f #feff9fe7 #fffffffb #ffffffff:5 #80601807 #e0380e01 #781e0780', 
    ' #3e0f81e0 #1f87e1f8 #9fe3f8fe #effbfe7f #ffffffff:6 #601807f #380e038', 
    ' #81e0781e #e0f83e07 #f87e1f83 #fe3f8fe3 #ffbfe7f9 #fffffffe #ffffffff:5', 
    ' #e01807ff #380e0380 #1e0781e0 #f83e0f8 #87e1f87e #e7f8fe3f #fbfeff9f', 
    ' #ffffffff:6 #3807fff #80e0380e #e0781e07 #f83e0f83 #fe1f87e1 #7f9fe3f8', 
    ' #bfeff9fe #ffffffff:6 #380fffff #1e0380e0 #f81e078 #87e0f83e #e3f87e1f', 
    ' #f9fe3f8f #feffbfe7 #ffffffff:6 #80ffffff #e0780e03 #f83e0781 #7e1f83e0', 
    ' #3f8fe1f8 #9fe7f8fe #fffbfeff #ffffffff:6 #fffffff #781e078 #83e0f81e', 
    ' #e1f87e0f #f8fe3f87 #fe7f9fe3 #ffbfeffb #ffffffff:7 #781e0781 #3e0f83e0', 
    ' #1f87e1f8 #8fe3f8fe #e7f9fe7f #fffeffbf #ffffffff:7 #83e0781f #e0f83e0f', 
    ' #f87e1f87 #fe3f8fe3 #ff9fe7f9 #fffffbfe #ffffffff:7 #3e0f81ff #1f87e0f8', 
    ' #8fe1f87e #e7f8fe3f #fbfeff9f #ffffffef #ffffffff:7 #e0f83fff #f87e1f83', 
    ' #fe3f8fe1 #7f9fe7f8 #bfeffbfe #ffffffff:8 #1f83ffff #8fe1f87e #e3f8fe3f', 
    ' #f9fe7f9f #feffbfef #ffffffff:8 #f87fffff #fe3f87e1 #7f9fe3f8 #bfeff9fe', 
    ' #fffffeff #ffffffff:8 #8fffffff #e3f8fe3f #f9fe7f9f #feffbfef #fffffffb', 
    ' #ffffffff:9 #7f9fe3f8 #bfeff9fe #fffbfeff #ffffffff:10 #f9fe7f9f #feffbfef', 
    ' #ffffffff:11 #bfeffbff #fffffeff #ffffffff:117 #fc00007f #ffffffff:2 #1fff', 
    ' #0:5 #80200000 #e0180600 #780e0380 #3e0f81e0 #3f87e1f8 #9fe7f8fe', 
    ' #fffbfeff #1ffff #4000000 #0 #18 #6000 #1800000', 
    ' #0 #6 #1c00 #700000 #c0000000 #1 #700', 
    ' #1e0000 #78000000 #0 #1e0 #78000 #1f000000 #0', 
    ' #7c #1f000 #7e00000 #80000000 #1f #7e00 #1fc0000', 
    ' #f0000000 #7 #1fe0 #7f8000 #fe000000 #1 #7fc', 
    ' #1ff000 #7fe00000 #80000000 #1ff #7ff00 #1ffe0000 #f8000000', 
    ' #7f #1fff0 #7ffe000 #ffc00000 #1f #7fff #1fffe00', 
    ' #fffc0000 #f8000007 #1fff #7ffff0 #ffffe000 #ffe00001 #800007ff', 
    ' #807fffff #e0380601 #380e0380 #1e0780e0 #781e078 #83e0f81e #e0f83e0f', 
    ' #f87e1f87 #fe3f87e1 #3f8fe3f8 #9fe7f9fe #effbfe7f #ffffffbf #ffffffff:46', 
    ' #ff8fffff #fffffff #fffffffe #fffff807 #ffe003ff #8003ffff #3ffffff', 
    ' #fffffe00 #fff80003 #ffffffff:66 #7f #0:25 #20 #0:12', 
    ' #200 #0:12 #2000 #0:12 #20000 #0:12 #600000', 
    ' #0:12 #6008000 #0:12 #60080000 #0:12 #800000 #6', 
    ' #0:11 #8000000 #60 #0:11 #80200000 #e01 #0:11', 
    ' #2000000 #e018 #0:11 #20000000 #e0180 #0:12 #e01802', 
    ' #0:11 #8000000 #e018060 #0:11 #80000000 #e0380600 #1', 
    ' #0:11 #3806008 #1e #0:10 #20000000 #38060080 #1e0', 
    ' #0:11 #80601802 #1e03 #0:11 #e018020 #1e038 #0:10', 
    ' #80000000 #e0180200 #3e0780 #0:11 #1806008 #3e0780e #0:11', 
    ' #38060080 #3e0780e0 #0:11 #80600802 #e0781e03 #3 #0:10', 
    ' #6018020 #f81e038 #3e #0:9 #80000000 #e0180200 #f81e0380', 
    ' #7e0 #0:10 #1806008 #81e0380e #7e0f #0:9 #20000000', 
    ' #18060080 #1e0780e0 #7e0f8 #0:10 #80600802 #e0780e03 #7e0f83', 
    ' #0:9 #8000000 #6018020 #781e038 #fe1f83e #0:9 #80000000', 
    ' #e0180600 #f81e0380 #fe1f83e0 #0:9 #2000000 #1806008 #81e0780e', 
    ' #e1f87e0f #f #0:8 #20080000 #38060180 #1e0780e0 #3f87e0f8', 
    ' #fe #0:8 #800000 #80601802 #e0781e03 #f87e0f83 #1fe3', 
    ' #0:8 #8020000 #e018060 #f81e038 #87e1f83e #1fe3f #0:8', 
    ' #80200800 #e0380601 #f81e0780 #fe1f83e0 #1fe3f8 #0:8 #6008020', 
    ' #380e018 #83e0781e #e1f87e0f #1fe7f8f #0:7 #80000000 #60180200', 
    ' #380e0380 #3e0781e0 #3f87e1f8 #3fe7f8fe #0:7 #2000000 #1806008', 
    ' #80e03806 #e0f81e07 #f8fe1f83 #fe7f9fe3 #3 #0:6 #20080000', 
    ' #18060180 #1e0380e0 #f83e078 #8fe1f87e #eff9fe7f #7f #0:6', 
    ' #802000 #80e01806 #e0780e03 #f83e0f81 #fe3f87e1 #ffbfe7f8 #7fe', 
    ' #0:6 #18020080 #e038060 #781e078 #87e0f83e #e3f8fe1f #fbfeff9f', 
    ' #ffffffff:41 #ffffffe1 #ffff8000 #fe00001f #7ff #3fff8 #1ffe000', 
    ' #ff800000 #1 #fe #1f800 #1e00000 #80000000 #1', 
    ' #fffffe00 #ffffffff:39 #81ffffff #3ffffff #7ffffe00 #fff80000 #e000001f', 
    ' #fff #7ff80 #7fe0000 #f8000000 #7 #7e0 #78000', 
    ' #e000000 #0 #fffffff8 #ffffffff:39 #fe03ffff #fffff #1fffff8', 
    ' #7fffe000 #ff800000 #3f #1ffe #1ff800 #1fe00000 #80000000', 
    ' #1f #1e00 #380000 #e0000000 #ffffffff:40 #fff80fff #e0003fff', 
    ' #fffff #3ffff80 #fffe0000 #f8000000 #ff #7fe0 #7f8000', 
    ' #7e000000 #0 #f8 #e000 #ff800000 #ffffffff:40 #ffffe01f', 
    ' #ff8001ff #3fff #ffffe #7fff800 #ffe00000 #80000003 #3ff', 
    ' #3fe00 #3f80000 #e0000000 #3 #780 #fffe0000 #ffffffff:39', 
    ' #7fffffff #ffffff80 #fffe0007 #f80000ff #3fff #1fffe0 #fff8000', 
    ' #fe000000 #f #ff8 #fe000 #f800000 #0 #1e', 
    ' #fffff800 #ffffffff:39 #1ffffff #1ffffffe #fffff800 #ffe00003 #800000ff', 
    ' #7fff #7ffe00 #3ff80000 #e0000000 #3f #3f80 #7e0000', 
    ' #78000000 #0 #ffffffe0 #ffffffff:39 #f807ffff #7fffff #fffffe0', 
    ' #ffff8000 #fe000007 #3ff #1fff8 #1ffe000 #ff800000 #1', 
    ' #1fe #1f800 #1e00000 #80000000 #ffffffff:40 #ffe01fff #8001ffff', 
    ' #7fffff #1ffffe00 #fff80000 #e000000f #7ff #7ff80 #7fe0000', 
    ' #f8000000 #7 #7e0 #f8000 #fe000000 #ffffffff:40 #ffff807f', 
    ' #fe0007ff #1ffff #7ffff8 #3fffe000 #ff800000 #3f #1ffe', 
    ' #1ff800 #1fe00000 #80000000 #3f #3e00 #fff80000 #ffffffff:38', 
    ' #bfffffff #ffffffff #fffffe01 #fff8001f #e00007ff #3ffff #1ffff80', 
    ' #fffe0000 #f8000000 #ff #ffe0 #ff8000 #fe000000 #0', 
    ' #f8 #ffffe000 #ffffffff:38 #feffffff #7ffffff #fffffff8 #ffffe000', 
    ' #ff80003f #fff #7fffe #3fff800 #ffe00000 #80000003 #3ff', 
    ' #3fe00 #3f80000 #e0000000 #7 #ffffff80 #ffffffff:38 #fffbffff', 
    ' #e01fffff #3ffffff #ffffff80 #fffe0000 #f800003f #1fff #1fffe0', 
    ' #fff8000 #fe000000 #f #ff8 #1fe000 #1f800000 #0', 
    ' #fffffffe #ffffffff:38 #ffffefff #ff807fff #fffff #3fffffe #fffff800', 
    ' #ffe00001 #800000ff #7fff #7ffe00 #7ff80000 #e0000000 #7f', 
    ' #7f80 #7e0000 #f8000000 #ffffffff:39 #ffffff9f #fffe01ff #f8007fff', 
    ' #1fffff #7ffffe0 #ffff8000 #fe000003 #3ff #1fff8 #1ffe000', 
    ' #ff800000 #1 #1fe #3f800 #ffe00000 #ffffffff:38 #7fffffff', 
    ' #fffffffe #fffff80f #ffe001ff #80007fff #3fffff #1ffffe00 #fff80000', 
    ' #e000000f #fff #7ff80 #7fe0000 #f8000000 #f #fe0', 
    ' #ffff8000 #ffffffff:38 #fbffffff #3fffffff #ffffffe0 #ffff8007 #fe0001ff', 
    ' #ffff #7ffff8 #3fffe000 #ff800000 #3f #3ffe #3ff800', 
    ' #3fe00000 #80000000 #3f #fffffe00 #ffffffff:38 #ffefffff #80ffffff', 
    ' #3fffffff #fffffe00 #fff8000f #e00007ff #3ffff #1ffff80 #fffe0000', 
    ' #f8000000 #ff #ffe0 #ff8000 #fe000000 #1 #fffffff8', 
    ' #ffffffff:38 #ffffbfff #fe07ffff #ffffff #3ffffff8 #ffffe000 #ff80001f', 
    ' #fff #7fffe #7fff800 #ffe00000 #80000007 #7ff #7fe00', 
    ' #7f80000 #e0000000 #ffffffff:39 #fffffeff #fff81fff #e007ffff #1ffffff', 
    ' #7fffff80 #fffe0000 #f800003f #3fff #1fffe0 #1fff8000 #fe000000', 
    ' #1f #1ff8 #1fe000 #ff800000 #ffffffff:39 #fffffffb #ffffe07f', 
    ' #ff801fff #7ffff #3fffffe #fffff800 #ffe00001 #800000ff #ffff', 
    ' #fffe00 #fff80000 #e0000000 #ff #ff80 #fffe0000 #ffffffff:40', 
    ' #ffffff83 #fffe00ff #f8003fff #1fffff #fffffe0 #ffff8000 #fe000007', 
    ' #3ff #3fff8 #3ffe000 #ff800000 #3 #3fe #fffff800', 
    ' #ffffffff:39 #fffffff #fffffffe #fffff803 #ffe000ff #80007fff #3fffff', 
    ' #1ffffe00 #fff80000 #e000001f #1fff #1fff80 #1ffe0000 #f8000000', 
    ' #1f #ffffffe0 #ffffffff:39 #f87fffff #1fffffff #ffffffe0 #ffff8007', 
    ' #fe0003ff #1ffff #fffff8 #7fffe000 #ff800000 #7f #7ffe', 
    ' #7ff800 #7fe00000 #80000000 #ffffffff:40 #ffe1ffff #807fffff #3fffffff', 
    ' #fffffe00 #fff8000f #e00007ff #7ffff #3ffff80 #fffe0000 #f8000003', 
    ' #3ff #3ffe0 #3ff8000 #fe000000 #ffffffff:40 #ffff8fff #fe03ffff', 
    ' #ffffff #7ffffff8 #ffffe000 #ff80003f #1fff #1ffffe #ffff800', 
    ' #ffe00000 #8000000f #fff #ffe00 #fff80000 #ffffffff:40 #fffffe3f', 
    ' #fff80fff #e007ffff #3ffffff #ffffff80 #fffe0001 #f80000ff #7fff', 
    ' #7fffe0 #7fff8000 #fe000000 #7f #7ff8 #ffffe000 #ffffffff:40', 
    ' #fffffff9 #ffffe07f #ff801fff #fffff #7fffffe #fffff800 #ffe00007', 
    ' #800003ff #3ffff #1fffe00 #fff80000 #e0000001 #1ff #ffffff80', 
    ' #ffffffff:39 #efffffff #ffffffff #ffffff83 #fffe00ff #f8007fff #3fffff', 
    ' #1fffffe0 #ffff8000 #fe00001f #fff #ffff8 #fffe000 #ff800000', 
    ' #f #fffffffe #ffffffff:39 #ffbfffff #fffffff #fffffffe #fffff807', 
    ' #ffe003ff #8001ffff #ffffff #7ffffe00 #fff80000 #e000007f #7fff', 
    ' #7fff80 #7ffe0000 #f8000000 #ffffffff:41 #f87fffff #3fffffff #ffffffe0', 
    ' #ffff801f #fe000fff #7ffff #3fffff8 #ffffe000 #ff800003 #3ff', 
    ' #1fffe #1fff800 #ffe00000 #ffffffff:41 #ffe3ffff #81ffffff #7fffffff', 
    ' #fffffe00 #fff8003f #e0003fff #1fffff #1fffff80 #fffe0000 #f800000f', 
    ' #fff #fffe0 #ffff8000 #ffffffff:41 #ffff9fff #fe07ffff #3ffffff', 
    ' #fffffff8 #ffffe001 #ff8001ff #ffff #7ffffe #7ffff800 #ffe00000', 
    ' #8000007f #7fff #fffffe00 #ffffffff:41 #fffffeff #fff83fff #e01fffff', 
    ' #fffffff #ffffff80 #fffe0007 #f80007ff #3ffff #3ffffe0 #ffff8000', 
    ' #fe000003 #3ff #fffffff8 #ffffffff:42 #ffffe1ff #ff80ffff #7fffff', 
    ' #3ffffffe #fffff800 #ffe0003f #80001fff #1fffff #1ffffe00 #fff80000', 
    ' #e000000f #ffffffff:43 #ffffff8f #fffe07ff #f803ffff #1ffffff #ffffffe0', 
    ' #ffff8001 #fe0000ff #ffff #fffff8 #7fffe000 #ff800000 #ffffffff:42', 
    ' #7fffffff #fffffffe #fffff83f #ffe01fff #801fffff #fffffff #fffffe00', 
    ' #fff80007 #e00007ff #7ffff #3ffff80 #fffe0000 #ffffffff:42 #fbffffff', 
    ' #ffffffff #ffffffe1 #ffff80ff #fe00ffff #7fffff #3ffffff8 #ffffe000', 
    ' #ff80003f #3fff #1ffffe #fffff800 #ffffffff:43 #8fffffff #ffffffff', 
    ' #fffffe0f #fff807ff #e003ffff #3ffffff #ffffff80 #fffe0001 #f80001ff', 
    ' #1ffff #ffffffe0 #ffffffff:43 #feffffff #7fffffff #fffffff8 #ffffe03f', 
    ' #ff801fff #1fffff #ffffffe #fffff800 #ffe0000f #80000fff #ffffffff:45', 
    ' #e3ffffff #ffffffff #ffffff81 #fffe00ff #f800ffff #7fffff #7fffffe0', 
    ' #ffff8000 #fe00007f #ffffffff:45 #ff8fffff #fffffff #fffffffe #fffff807', 
    ' #ffe003ff #8003ffff #3ffffff #fffffe00 #ffc00001 #8fffffff #ffffffff', 
    ' #ffffff9f #ffff3fff #ff7fffff #ffffffff #fffffffe #ffffffff:5 #ffff1fff', 
    ' #fe3fffff #7fffffff #fffffffe #fffffcff #fffdffff #fbffffff #ffffffff:6', 
    ' #fffffc7f #fff8ffff #f9ffffff #ffffffff #fffffff3 #fffff7ff #ffefffff', 
    ' #ffffffff:6 #ffffffe1 #ffffe3ff #ffe7ffff #cfffffff #ffffffff #ffffffdf', 
    ' #ffffbfff #ffffffff:5 #87ffffff #ffffffff #ffffff8f #ffff9fff #ff3fffff', 
    ' #7fffffff #ffffffff #fffffeff #ffffffff:5 #fe1fffff #3fffffff #fffffffe', 
    ' #fffffe7f #fffcffff #fdffffff #ffffffff #fffffffb #ffffffff:5 #fff87fff', 
    ' #f8ffffff #ffffffff #fffffff9 #fffff3ff #fff7ffff #ffffffff:7 #ffffe1ff', 
    ' #ffe3ffff #e7ffffff #ffffffff #ffffffcf #ffffdfff #ffffffff:7 #ffffff87', 
    ' #ffff8fff #ff9fffff #3fffffff #ffffffff #ffffff7f #ffffffff:6 #1fffffff', 
    ' #fffffffe #fffffe3f #fffe7fff #fcffffff #ffffffff #fffffffd #ffffffff:6', 
    ' #f87fffff #ffffffff #fffffff8 #fffff9ff #fff3ffff #f7ffffff #ffffffff:7', 
    ' #ffe1ffff #e3ffffff #ffffffff #ffffffe7 #ffffefff #ffdfffff #ffffffff:7', 
    ' #ffff87ff #ff8fffff #9fffffff #ffffffff #ffffffbf #ffff7fff #ffffffff:7', 
    ' #ffffff1f #fffe3fff #fe7fffff #ffffffff #fffffffe #ffffffff:7 #7fffffff', 
    ' #fffffffc #fffff8ff #fff9ffff #fbffffff #ffffffff:8 #f1ffffff #ffffffff', 
    ' #ffffffe3 #ffffe7ff #ffefffff #ffffffff:8 #ffc7ffff #8fffffff #ffffffff', 
    ' #ffffff9f #ffffbfff #ffffffff:8 #ffff1fff #ff3fffff #7fffffff #fffffffe', 
    ' #fffffeff #ffffffff:8 #fffffc7f #fffcffff #f9ffffff #ffffffff #fffffffb', 
    ' #ffffffff:8 #fffffff1 #fffff3ff #fff7ffff #efffffff #ffffffff:8 #c7ffffff', 
    ' #ffffffff #ffffffcf #ffffdfff #ffffffff:9 #ff1fffff #3fffffff #ffffffff', 
    ' #ffffff7f #ffffffff:9 #fffc7fff #fcffffff #ffffffff #fffffffd #ffffffff:9', 
    ' #fffff1ff #fff3ffff #f7ffffff #ffffffff:10 #ffffffe7 #ffffcfff #ffdfffff', 
    ' #ffffffff:9 #9fffffff #ffffffff #ffffffbf #ffffffff:10 #fe7fffff #ffffffff', 
    ' #fffffffe #ffffffff:10 #fff9ffff #fbffffff #ffffffff:11 #ffffe7ff #ffefffff', 
    ' #ffffffff:11 #ffffff9f #ffffbfff #ffffffff:10 #7fffffff #ffffffff:12 #fdffffff', 
    ' #ffffffff:12 #fff7ffff #ffffffff:12 #ffffdfff #ffffffff:114 #7fffffff #9fe7f9fe', 
    ' #effbfe7f #fbfeffbf #ffffffff:6 #383e3fb #2 #0 #f9fe0000', 
    ' #fe7f9fe7 #ffbfeff9 #fffffbfe #ffffffff:5 #efffffff #80e0f8f #0:2', 
    ' #9fe7f800 #eff9fe7f #fbfeffbf #ffffffef #ffffffff:5 #3fbfffff #60787e', 
    ' #0:2 #fe7f9fe0 #ffbfe7f9 #bfeffbfe #ffffffff:6 #f9feffff #20381e1', 
    ' #0 #80000000 #e7f9fe7f #fbfeffbf #ffffbfef #ffffffff:6 #87e7ffff', 
    ' #80e0f #0 #fe000000 #ffbfe7f9 #bfeffbfe #fffffeff #ffffffff:6', 
    ' #3e3f9fff #6078 #0 #e7f80000 #fbfeffbf #feffbfef #ffffffff:7', 
    ' #e0f8fe7f #20181 #0 #ffbfe000 #bfeffbfe #fffffeff #ffffffff:7', 
    ' #787e3fb #80e #0 #fbfeff80 #feffbfef #ffffffff:7 #efffffff', 
    ' #383e1f9f #60 #0 #bfeffbfe #fffffeff #ffffffff:7 #7fbfffff', 
    ' #81e0f87e #201 #f8000000 #feffbfef #ffffffff:8 #f9ffffff #e0783e3', 
    ' #18 #bfe00000 #ffffffff:9 #8fe7ffff #60383e1f #0 #ffff8000', 
    ' #ffffffff:9 #7e3fbfff #181e0f8 #2 #fffffe00 #ffffffff:9 #e1f9feff', 
    ' #180e0783 #0 #fffffff8 #ffffffff:9 #1f8fe7fb #8060381e #e0000000', 
    ' #ffffffff:10 #f87e3f9f #20381e0 #ff800000 #ffffffff:10 #83e1f9fe #20180e07', 
    ' #fffe0000 #ffffffff:9 #fbffffff #1e1f8fe7 #806038 #fffff800 #ffffffff:9', 
    ' #9fefffff #e0f87e3f #60381 #ffffffe0 #ffffffff:9 #feffffff #783e1f8', 
    ' #8020180e #ffffffff:10 #e7fbffff #783e1f8f #fe0180e0 #ffffffff:10 #3f9fefff', 
    ' #81e0f87e #fff80603 #ffffffff:10 #f8feffff #e0783e1 #ffffe038 #ffffffff:10', 
    ' #8fe7fbff #e0783e1f #ffffff80 #ffffffff:10 #7e3f9fef #381e0f8 #fffffffe', 
    ' #ffffffff:10 #e3f9feff #f81e0f87 #ffffffff:11 #1f8fe7fb #ffe0783e #ffffffff:11', 
    ' #f87e3f9f #ffff83e0 #ffffffff:11 #87e3f9fe #fffffe0f #ffffffff:10 #fbffffff', 
    ' #3e1f8fe7 #fffffff8 #ffffffff:10 #bfffffff #e1f8fe7f #ffffffff:11 #feffffff', 
    ' #ff87e3f9 #ffffffff:11 #efffffff #fffe3f9f #ffffffff:11 #7fbfffff #fffff8fe', 
    ' #ffffffff:11 #fbffffff #ffffffe7 #ffffffff:11 #9fefffff #ffffffff:12 #feffffff', 
    ' #ffffffff:12 #fffbffff #ffffffff:3055 #7fffffff #ffff8000 #fe003fff #ffffffff:11', 
    ' #fff80007 #e001ffff #ffffffff:11 #ff80007f #1fffff #fffffffe #ffffffff:10', 
    ' #f80007ff #1ffffff #ffffffe0 #ffffffff:10 #80007fff #1fffffff #fffffe00', 
    ' #ffffffff:10 #7ffff #fffffff8 #ffffe001 #ffffffff:10 #7fffff #ffffff80', 
    ' #fffe003f #ffffffff:10 #fffffff #fffff800 #ffe003ff #ffffffff:11 #ffff8000', 
    ' #fe003fff #ffffffff:11 #fff8000f #e007ffff #ffffffff:11 #ff8001ff #ffffff', 
    ' #fffffffe #ffffffff:10 #f8001fff #1fffffff #ffffffe0 #ffffffff:10 #8003ffff', 
    ' #ffffffff #fffffe03 #ffffffff:10 #7fffff #fffffff8 #ffffe07f #ffffffff:10', 
    ' #fffffff #ffffff80 #fffe3fff #ffffffff:11 #fffff801 #ffffffff:12 #ffff803f', 
    ' #ffffffff:12 #fff80fff #ffffffff:12 #ff87ffff #ffffffff:300 #200803ff #8020080', 
    ' #2008020 #802008 #80200802 #20080200 #18060080 #6018060 #780e038', 
    ' #83e0781e #e3f87e0f #fbfe7f9f #ffffffff #803fff #80200802 #20080200', 
    ' #8020080 #2008020 #802008 #80601802 #e0180601 #780e0380 #3e0f81e0', 
    ' #3f87e1f8 #bfeff9fe #ffffffff #807ffff #2008020 #802008 #80200802', 
    ' #20080200 #8020080 #6018060 #3806018 #81e0380e #e0f81e07 #f8fe1f83', 
    ' #feff9fe3 #ffffffff #807fffff #20080200 #8020080 #2008020 #802008', 
    ' #80600802 #60180601 #380e0180 #1e0780e0 #f83e078 #8fe1f87e #eff9fe7f', 
    ' #ffffffff #7ffffff #802018 #80200802 #20080200 #8020080 #6018060', 
    ' #1806018 #80e03806 #e0781e03 #f83e0f81 #fe3f87e0 #ff9fe7f8 #fffffffe', 
    ' #7fffffff #18060180 #2008020 #802008 #80601802 #60180601 #38060180', 
    ' #e0380e0 #781e038 #83e0f81e #e3f87e1f #fbfe7f8f #ffffffef #ffffffff', 
    ' #80601807 #60180601 #18060180 #6018060 #1806018 #80e01806 #e0380e03', 
    ' #781e0780 #7e0f83e0 #3f8fe1f8 #bfe7f9fe #ffffffff:2 #601807f #1806018', 
    ' #80601806 #60180601 #18060180 #e038060 #380e038 #81e0781e #e0f83e0f', 
    ' #f8fe1f87 #feff9fe3 #fffffffb #ffffffff #601807ff #18060180 #6018060', 
    ' #1806018 #80601806 #e0380e03 #781e0380 #3e0781e0 #1f83e0f8 #8fe3f87e', 
    ' #eff9fe7f #ffffffbf #ffffffff #1807fff #80601806 #60180601 #18060180', 
    ' #e0380e0 #380e038 #81e0780e #e0f81e07 #f87e0f83 #fe3f87e1 #ff9fe7f8', 
    ' #fffffffe #ffffffff #1807ffff #6018060 #1806018 #80e03806 #e0380e03', 
    ' #380e0380 #1e0781e0 #f83e078 #87e1f83e #e3f8fe1f #fbfe7f9f #ffffffef', 
    ' #ffffffff #80ffffff #e0380e03 #380e0380 #e0380e0 #380e038 #81e0380e', 
    ' #e0781e07 #f83e0f81 #7e1f87e0 #7f8fe3f8 #bfe7f9fe #ffffffff:2 #fffffff', 
    ' #380e038 #80e0380e #e0380e03 #380e0380 #1e0781e0 #f81e078 #83e0f83e', 
    ' #e1f87e1f #f8fe3f8f #feff9fe7 #fffffffb #ffffffff:2 #380e0380 #e0380e0', 
    ' #380e038 #81e0780e #e0781e07 #f83e0781 #7e0f83e0 #3f87e1f8 #9fe3f8fe', 
    ' #effbfe7f #ffffffff:3 #80e0380f #e0380e03 #781e0380 #1e0781e0 #781e078', 
    ' #83e0f83e #e1f83e0f #f8fe1f87 #fe7f8fe3 #ffbfe7f9 #fffffffe #ffffffff:2', 
    ' #1e0781ff #781e078 #81e0781e #e0781e07 #f83e0781 #3e0f83e0 #1f87e1f8', 
    ' #8fe3f87e #e7f9fe3f #fbfeff9f #ffffffff:3 #e0781fff #781e0781 #1e0781e0', 
    ' #f81e078 #83e0f83e #e0f83e0f #f87e1f87 #fe3f8fe1 #7f9fe7f8 #ffeffbfe', 
    ' #ffffffff:3 #781ffff #81e0781e #e0f81e07 #f83e0f83 #3e0f83e0 #1f87e0f8', 
    ' #8fe1f87e #e3f8fe3f #f9fe7f9f #ffffbfef #ffffffff:3 #f83fffff #3e0f83e0', 
    ' #f83e0f8 #83e0f83e #e1f83e0f #f87e1f87 #fe3f87e1 #7f8fe3f8 #bfe7f9fe', 
    ' #fffffeff #ffffffff:3 #83ffffff #e0f83e0f #f83e0f83 #7e1f83e0 #1f87e1f8', 
    ' #87e1f87e #e3f8fe3f #f9fe7f8f #feff9fe7 #fffffffb #ffffffff:3 #7fffffff', 
    ' #1f87e1f8 #87e1f87e #e1f87e1f #f87e1f87 #fe3f8fe1 #7f8fe3f8 #9fe7f9fe', 
    ' #effbfeff #ffffffff:5 #f87e1f87 #7e1f87e1 #1f87e1f8 #8fe3f8fe #e3f8fe3f', 
    ' #f9fe7f8f #fe7f9fe7 #ffbfeffb #ffffffff:5 #8fe3f8ff #e3f8fe3f #f8fe3f8f', 
    ' #fe3f8fe3 #7f9fe3f8 #9fe7f9fe #effbfe7f #fffeffbf #ffffffff:5 #fe3f8fff', 
    ' #3f8fe3f8 #8fe3f8fe #e7f9fe3f #f9fe7f9f #feff9fe7 #ffbfeffb #fffffffe', 
    ' #ffffffff:5 #e7f9ffff #f9fe7f9f #fe7f9fe7 #7f9fe7f9 #bfe7f9fe #effbfeff', 
    ' #fffeffbf #ffffffff:6 #ffbfffff #9feffbfe #effbfe7f #fbfeffbf #feffbfef', 
    ' #ffbfeffb #ffffffff:7 #fbffffff #feffbfef #ffbfeffb #bfeffbfe #fffffeff', 
    ' #ffffffff:412 #e000ffff #3ffffff #ffffff80 #fffe000f #f8003fff #ffffff', 
    ' #ffffffe0 #ffff8003 #fe000fff #3fffff #fffffff8 #ffffe001 #ff8007ff', 
    ' #3fffff #fffffffe #fffff800 #ffe007ff #803fffff #ffffffff #fffffe00', 
    ' #fff80fff #e07fffff #ffffffff #ffffff87 #fffeffff #ffffffff:29 #ff807fff', 
    ' #1ffffff #fffffffe #fffff803 #ffe00fff #803fffff #ffffffff #fffffe00', 
    ' #fff807ff #e01fffff #7fffffff #ffffff80 #fffe03ff #f81fffff #7fffffff', 
    ' #ffffffe0 #ffff83ff #fe3fffff #ffffffff #fffffffb #ffffffff:464 #7f', 
    ' #1fffe #7fff800 #ffe00000 #8000003f #ffff #3fffe00 #fff80000', 
    ' #e000001f #7fff #3ffff80 #fffe0000 #f800000f #7fff #1ffffe0', 
    ' #ffff8000 #fe00000f #7fff #3fffff8 #ffffe000 #ff80001f #ffff', 
    ' #7fffffe #fffff800 #ffe0003f #8001ffff #1fffffff #fffffe00 #fff801ff', 
    ' #e01fffff #ffffffff #ffffff83 #fffeffff #ffffffff:22 #fff #3fffe0', 
    ' #ffff8000 #fe000001 #7ff #1ffff8 #ffffe000 #ff800000 #3ff', 
    ' #1ffffe #7ffff800 #ffe00000 #800003ff #1fffff #7ffffe00 #fff80000', 
    ' #e00003ff #1fffff #ffffff80 #fffe0000 #f80007ff #3fffff #ffffffe0', 
    ' #ffff8001 #fe001fff #1ffffff #fffffff8 #ffffe00f #ff81ffff #3fffffff', 
    ' #fffffffe #ffffffff:24 #3ffff #ffffe00 #fff80000 #e000003f #1ffff', 
    ' #7ffff80 #fffe0000 #f800003f #ffff #7ffffe0 #ffff8000 #fe00001f', 
    ' #ffff #7fffff8 #ffffe000 #ff80003f #1ffff #ffffffe #fffff800', 
    ' #ffe0007f #8003ffff #1fffffff #fffffe00 #fff801ff #e00fffff #ffffffff', 
    ' #ffffff80 #fffe1fff #fbffffff #ffffffff:26 #7fffff #ffffe000 #ff800003', 
    ' #fff #7ffffe #fffff800 #ffe00001 #80000fff #3fffff #fffffe00', 
    ' #fff80001 #e0000fff #7fffff #ffffff80 #fffe0001 #f8000fff #7fffff', 
    ' #ffffffe0 #ffff8003 #fe003fff #1ffffff #fffffff8 #ffffe01f #ff80ffff', 
    ' #1fffffff #fffffffe #fffff9ff #ffffffff:28 #1fffffff #fffe0000 #f80000ff', 
    ' #3ffff #1fffffe0 #ffff8000 #fe0000ff #3ffff #1ffffff8 #ffffe000', 
    ' #ff8000ff #3ffff #1ffffffe #fffff800 #ffe000ff #8007ffff #7fffffff', 
    ' #fffffe00 #fff803ff #e01fffff #ffffffff #ffffff81 #fffe1fff #fbffffff', 
    ' #ffffffff:32 #ffe0000f #80003fff #1ffffff #fffffe00 #fff8000f #e0003fff', 
    ' #1ffffff #ffffff80 #fffe000f #f8007fff #3ffffff #ffffffe0 #ffff801f', 
    ' #fe00ffff #7ffffff #fffffff8 #ffffe07f #ff83ffff #3fffffff #fffffffe', 
    ' #ffffffff:35 #fe0007ff #3fffff #fffffff8 #ffffe000 #ff8007ff #3fffff', 
    ' #fffffffe #fffff801 #ffe00fff #807fffff #ffffffff #fffffe03 #fff83fff', 
    ' #e1ffffff #ffffffff #ffffff9f #ffffffff:39 #e007ffff #3fffffff #ffffff80', 
    ' #fffe01ff #f80fffff #7fffffff #ffffffe0 #ffff87ff #fe3fffff #ffffffff', 
    ' #fffffffb #ffffffff:2953 #fff00001 #ffffffff:48 #ffffefff #ff87ffff #7ffffff', 
    ' #fffffffe #fffff803 #ffe003ff #8001ffff #1ffffff #0 #3c000', 
    ' #7e00000 #fc000000 #f #1fff #3ffff0 #7ffffe00 #ffffe000', 
    ' #fffc00ff #ff81ffff #c3ffffff #ffffffff #ff #fe000 #7f800000', 
    ' #0 #ffe #fff800 #ffe00000 #8000000f #ffff #1ffffe00', 
    ' #fff80000 #e00001ff #1fffff #0:23 #8000000 #0 #60', 
    ' #38000 #1e000000 #0 #f8 #7e000 #3f800000 #0', 
    ' #1fe #ff800 #7fe00000 #80000000 #7ff #3ffe00 #fff80000', 
    ' #e0000003 #3fff #3ffff80 #fffe0000 #f800003f #3ffff #7fffffe0', 
    ' #ffff8000 #fe000fff #1ffffff #fffffff8 #ffffe07f #ff9fffff #ffffffff:2', 
    ' #ffff #ffe00000 #80000000 #7fff #3ffffe00 #fff80000 #e0003fff', 
    ' #3fffffff #ffffff80 #fffe3fff #ffffffff:3 #ffffff #ff000000 #1', 
    ' #3fe #ffc00 #1ff80000 #f0000000 #3f #ffe0 #1ffc000', 
    ' #ff800000 #3 #7ff #1ffe00 #3ffc0000 #f8000000 #7f', 
    ' #1fff0 #3ffe000 #ffc00000 #8000000f #1fff #3fff00 #fffe0000', 
    ' #fc000000 #1ff #7fff8 #ffff000 #ffe00000 #c000003f #ffff', 
    ' #1ffff80 #ffff0000 #fe000007 #1fff #3ffffc #fffff800 #fff00000', 
    ' #e00003ff #fffff #3fffffc0 #ffff8000 #ff0000ff #3ffff #1ffffffe', 
    ' #fffffc00 #fff8007f #f001ffff #fffffff #ffffffe0 #ffffc03f #ff81ffff', 
    ' #fffffff #ffffffff #fffe003f #f807ffff #1fffffff #ffffffe0 #ffff807f', 
    ' #fe01ffff #7ffffff #fffffff8 #ffffe01f #ff807fff #1ffffff #fffffffe', 
    ' #fffff807 #ffe01fff #c07fffff #ffffffff #ffffff01 #fffc07ff #f01fffff', 
    ' #7fffffff #ffffffc0 #ffff01ff #fc07ffff #1fffffff #fffffff0 #ffffe07f', 
    ' #ff81ffff #7ffffff #fffffffe #fffff81f #fff07fff #c1ffffff #ffffffff', 
    ' #ffffff07 #fffe1fff #f87fffff #ffffffff #ffffffe1 #ffffc7ff #ff1fffff', 
    ' #1ffffff #3ffffffc #fffff800 #ffe0000f #c00003ff #1ffff #ffff00', 
    ' #fffe0000 #f8000000 #7f #7fe0 #7f8000 #7e000000 #0', 
    ' #fffffc00 #fff01fff #c07fffff #ffffffff #ffffff01 #fffc07ff #f01fffff', 
    ' #7fffffff #ffffffc0 #ffff01ff #fc07ffff #1fffffff #fffffff0 #ffffe07f', 
    ' #ff81ffff #7ffffff #fffffffe #fffff81f #ffe07fff #81ffffff #ffffffff', 
    ' #fffffe07 #fffc1fff #f07fffff #ffffffff #ffffffc1 #ffff07ff #fc1fffff', 
    ' #7fffffff #fffffff8 #ffffe1ff #ff87ffff #1fffffff #ffffffff #fffffc7f', 
    ' #fff1ffff #e7ffffff #ffffffff #ffffff9f #fffe7fff #fc7fffff #7ffffff', 
    ' #fffffff0 #ffffe001 #ff80007f #1fff #1ffffe #ffff800 #ffe00000', 
    ' #80000007 #7ff #7fe00 #7f80000 #0 #fffffff8 #ffffe07f', 
    ' #ff81ffff #7ffffff #fffffffe #fffff81f #ffe07fff #81ffffff #ffffffff', 
    ' #fffffe07 #fff81fff #e07fffff #ffffffff #ffffffc1 #ffff07ff #fc1fffff', 
    ' #7fffffff #fffffff0 #ffffc1ff #ff07ffff #1fffffff #fffffffe #fffff87f', 
    ' #ffe1ffff #87ffffff #ffffffff #ffffff1f #fffc7fff #f1ffffff #ffffffff', 
    ' #ffffffc7 #ffff9fff #fe7fffff #ffffffff #fffffff9 #fffff7ff #ffdfffff', 
    ' #ffffffff:4 #e0ffffff #3fffffff #ffffff80 #fffe000f #f80003ff #1ffff', 
    ' #ffffe0 #ffff8000 #fe000000 #7f #7ff8 #7fe000 #f0000000', 
    ' #ffffffff #ffffffc1 #ffff07ff #fc1fffff #7fffffff #fffffff0 #ffffc1ff', 
    ' #ff07ffff #1fffffff #fffffffc #fffff07f #ffe1ffff #87ffffff #ffffffff', 
    ' #fffffe1f #fff87fff #e1ffffff #ffffffff #ffffff87 #ffff1fff #fc7fffff', 
    ' #ffffffff #fffffff1 #ffffc7ff #ff9fffff #7fffffff #fffffffe #fffff9ff', 
    ' #fff7ffff #dfffffff #ffffffff #ffffff7f #ffffffff:9 #ff9fffff #3ffffff', 
    ' #fffffffe #fffff800 #ffe0007f #80003fff #1fffff #ffffe00 #fff80000', 
    ' #e000000f #7ff #7ff80 #ffc00000 #87ffffff #ffffffff #fffffe1f', 
    ' #fff87fff #e1ffffff #ffffffff #ffffff87 #fffe1fff #f87fffff #ffffffff', 
    ' #ffffffe1 #ffffc7ff #ff1fffff #7fffffff #fffffffc #fffff1ff #ffc7ffff', 
    ' #9fffffff #ffffffff #fffffe7f #fff9ffff #e7ffffff #ffffffff #ffffffdf', 
    ' #ffff7fff #fdffffff #ffffffff:16 #f87fffff #1fffffff #ffffffe0 #ffff800f', 
    ' #fe0003ff #1ffff #1fffff8 #ffffe000 #ff800000 #ff #fffe', 
    ' #ffff8000 #fe1fffff #7fffffff #fffffffc #fffff1ff #ffc7ffff #1fffffff', 
    ' #ffffffff #fffffc7f #fff1ffff #e7ffffff #ffffffff #ffffff9f #fffe7fff', 
    ' #f9ffffff #ffffffff #fffffff7 #ffffdfff #ff7fffff #ffffffff #fffffffd', 
    ' #ffffffff:22 #ffefffff #83ffffff #ffffffff #fffffe00 #fff8007f #e0003fff', 
    ' #1fffff #fffff80 #fffe0000 #f800000f #fff #ffffff00 #fffc7fff', 
    ' #f1ffffff #ffffffff #ffffffe7 #ffff9fff #fe7fffff #ffffffff #fffffff9', 
    ' #fffff7ff #ffdfffff #7fffffff #ffffffff #fffffdff #ffffffff:30 #fe3fffff', 
    ' #1fffffff #fffffff8 #ffffe007 #ff8003ff #3ffff #1fffffe #fffff800', 
    ' #ffe00000 #ff #fffffffe #fffff9ff #ffe7ffff #dfffffff #ffffffff', 
    ' #ffffff7f #fffdffff #f7ffffff #ffffffff:36 #fffbffff #e1ffffff #ffffffff', 
    ' #ffffff80 #fffe007f #f8003fff #1fffff #1fffffe0 #ffff8000 #fc00001f', 
    ' #ffffffff #fffffff7 #ffffdfff #ffffffff:42 #ff9fffff #fffffff #fffffffe', 
    ' #fffff807 #ffe003ff #8001ffff #1ffffff #fffffe00 #fff00001 #ffffffff:45', 
    ' #fffeffff #f87fffff #3fffffff #ffffffe0 #ffff801f #fe001fff #fffff', 
    ' #ffffff8 #0:50 #200 #180000 #e0000000 #0 #1f80', 
    ' #0:49 #8 #e000 #7800000 #0 #7e #ff800', 
    ' #0:46 #80000 #60000000 #0 #780 #3e0000 #f8000000', 
    ' #3 #3fe0 #7ff8000 #0:44 #8 #6000 #3800000', 
    ' #0 #1e #1f800 #1fe00000 #80000000 #1ff #3ffe00', 
    ' #fff80000 #7 #0:40 #80000 #60000000 #0 #380', 
    ' #1e0000 #f8000000 #1 #fe0 #ff8000 #fe000000 #f', 
    ' #1fff8 #3fffe000 #ff800000 #fff #0:38 #8 #6000', 
    ' #3800000 #0 #1e #f800 #fe00000 #80000000 #7f', 
    ' #7fe00 #7ff80000 #e0000000 #fff #1ffff80 #fffe0000 #f800003f', 
    ' #1fffff #0:34 #200 #80000 #60000000 #0 #380', 
    ' #1e0000 #f8000000 #0 #7e0 #7f8000 #fe000000 #3', 
    ' #3ff8 #3ffe000 #ff800000 #7f #ffffe #fffff800 #ffe00001', 
    ' #80007fff #7fffffff #0:31 #2000000 #0 #18 #6000', 
    ' #3800000 #0 #1e #f800 #7e00000 #80000000 #7f', 
    ' #3fe00 #3ff80000 #e0000000 #1ff #1fff80 #fffe0000 #f8000003', 
    ' #7fff #fffffe0 #ffff8000 #fe0001ff #ffffff #fffffff8 #7f', 
    ' #0:28 #200 #180000 #e0000000 #0 #380 #1e0000', 
    ' #f8000000 #0 #7e0 #7f8000 #fe000000 #3 #1ff8', 
    ' #1ffe000 #ff800000 #1f #1fffe #1ffff800 #ffe00000 #800003ff', 
    ' #7fffff #fffffe00 #fff8000f #e003ffff #ffffffff #ffffff80 #ffff', 
    ' #0:25 #2000000 #0 #18 #e000 #7800000 #0', 
    ' #3e #f800 #fe00000 #80000000 #7f #3fe00 #1ff80000', 
    ' #e0000000 #1ff #fff80 #fffe0000 #f8000000 #fff #ffffe0', 
    ' #ffff8000 #fe00001f #3ffff #7ffffff8 #ffffe000 #ff800fff #3ffffff', 
    ' #fffffffe #fffff9ff #1fffff #0:49 #100000 #20000000 #0', 
    ' #c0 #0:45 #400 #80000 #30000000 #0 #60', 
    ' #1c000 #7800000 #0 #1f #0:37 #4000 #800000', 
    ' #0 #1 #600 #c0000 #38000000 #0 #70', 
    ' #1e000 #3c00000 #80000000 #f #3f00 #fe0000 #fc000000', 
    ' #3 #0:25 #800000 #0 #1 #200 #40000', 
    ' #8000000 #0 #10 #6000 #c00000 #80000000 #1', 
    ' #700 #e0000 #1c000000 #0 #78 #f000 #3e00000', 
    ' #c0000000 #7 #1f80 #7f0000 #fe000000 #1 #7fc', 
    ' #1ff800 #fff00000 #0:8 #80000 #10000000 #0 #20', 
    ' #4000 #800000 #0 #1 #200 #40000 #8000000', 
    ' #0 #10 #6000 #c00000 #80000000 #1 #300', 
    ' #60000 #c000000 #0 #38 #7000 #e00000 #c0000000', 
    ' #1 #780 #f0000 #1e000000 #0 #7c #f800', 
    ' #3f00000 #e0000000 #7 #1fc0 #3f8000 #ff000000 #0', 
    ' #3fe #ffc00 #3ff80000 #f0000000 #ff #7ffe0 #1fffc000', 
    ' #1800000 #0 #3 #600 #c0000 #18000000 #0', 
    ' #30 #6000 #c00000 #80000000 #1 #300 #60000', 
    ' #1c000000 #0 #38 #7000 #e00000 #c0000000 #1', 
    ' #380 #70000 #1e000000 #0 #3c #7800 #f00000', 
    ' #e0000000 #1 #7c0 #f8000 #1f000000 #0 #7e', 
    ' #fc00 #3f80000 #f0000000 #7 #1fe0 #3fc000 #ff800000', 
    ' #0 #3ff #7fe00 #1ffc0000 #f8000000 #7f #1fff0', 
    ' #fffe000 #ffc00000 #8000003f #1ffff #fffff00 #e0000 #1c000000', 
    ' #0 #38 #7000 #e00000 #c0000000 #1 #380', 
    ' #f0000 #1e000000 #0 #3c #7800 #f00000 #e0000000', 
    ' #1 #3c0 #f8000 #1f000000 #0 #3e #7c00', 
    ' #f80000 #f0000000 #3 #7e0 #fc000 #3f800000 #0', 
    ' #7f #fe00 #3fc0000 #f8000000 #7 #1ff0 #3fe000', 
    ' #ffc00000 #80000000 #1ff #7ff00 #1ffe0000 #fc000000 #7f', 
    ' #1fff8 #7fff000 #ffe00000 #c000001f #7fff #1ffff80 #ffff0000', 
    ' #fe00000f #7fff #3fffffc #7800 #f00000 #e0000000 #1', 
    ' #7c0 #f8000 #1f000000 #0 #3e #7c00 #f80000', 
    ' #f0000000 #1 #7e0 #fc000 #1f800000 #0 #3f', 
    ' #7e00 #1fc0000 #f8000000 #3 #7f0 #fe000 #3fc00000', 
    ' #80000000 #7f #ff00 #3fe0000 #fc000000 #7 #1ff8', 
    ' #3ff000 #ffe00000 #c0000000 #1ff #7ff80 #1fff0000 #fe000000', 
    ' #3f #fffc #3fff800 #fff00000 #e000000f #3fff #ffffc0', 
    ' #ffff8000 #ff000003 #1fff #7ffffe #fffffc00 #fff80003 #f0001fff', 
    ' #ffffff #7e0 #fc000 #1f800000 #0 #3f #7e00', 
    ' #fc0000 #f8000000 #3 #7f0 #fe000 #1fc00000 #80000000', 
    ' #3f #ff00 #1fe0000 #fc000000 #3 #7f8 #1ff000', 
    ' #3fe00000 #c0000000 #7f #1ff80 #3ff0000 #fe000000 #7', 
    ' #1ffc #3ff800 #fff00000 #e0000000 #1ff #7ffc0 #1fff8000', 
    ' #ff000000 #3f #fffe #3fffc00 #fff80000 #f0000007 #1fff', 
    ' #7fffe0 #ffffc000 #ff800001 #fff #3fffff #fffffe00 #fffc0000', 
    ' #f80007ff #1fffff #fffffff0 #ffffe000 #ffc007ff #803fffff #3f', 
    ' #7f00 #1fe0000 #fc000000 #3 #7f8 #ff000 #1fe00000', 
    ' #c0000000 #7f #ff80 #1ff0000 #fe000000 #3 #ffc', 
    ' #1ff800 #3ff00000 #e0000000 #ff #1ffc0 #3ff8000 #ff000000', 
    ' #f #1ffe #7ffc00 #fff80000 #f0000000 #3ff #7ffe0', 
    ' #1fffc000 #ff800000 #3f #ffff #3fffe00 #fffc0000 #f8000007', 
    ' #1fff #7ffff0 #ffffe000 #ffc00001 #800007ff #1fffff #7fffff00', 
    ' #fffe0000 #fc0001ff #7ffff #3ffffff8 #fffff000 #ffe000ff #c007ffff', 
    ' #3fffffff #ffffff80 #ffff01ff #fe07ffff #ffffffff:39 #7ffff #ff8000', 
    ' #7e000000 #0 #38 #0:9 #fff80000 #ffffffff:39 #7fff', 
    ' #ffe00 #3f80000 #e0000000 #1 #80 #0:8 #ffffe000', 
    ' #ffffffff:39 #7ff #7ff8 #1fe000 #f800000 #0 #6', 
    ' #0:8 #ffffff80 #ffffffff:39 #f000007f #3ff #ff80 #7e0000', 
    ' #38000000 #0:9 #fffffffe #ffffffff:39 #ffe00007 #3f #7fe', 
    ' #3f800 #1e00000 #80000000 #0:7 #f8000000 #ffffffff:40 #ffffc000', 
    ' #f8000001 #3f #1fe0 #f8000 #6000000 #0:7 #ffe00000', 
    ' #ffffffff:39 #1fffffff #1fffffc0 #ffe00000 #80000001 #ff #7e00', 
    ' #380000 #20000000 #0:6 #ffff8000 #ffffffff:40 #ffffff #1fff8000', 
    ' #fe000000 #7 #3f8 #1e000 #1800000 #0:6 #fffffe00', 
    ' #ffffffff:40 #fffff #fffe00 #3ff80000 #e0000000 #1f #f80', 
    ' #e0000 #0:6 #fffffff8 #ffffffff:40 #ffff #ffff8 #1ffe000', 
    ' #ff800000 #0 #7e #7800 #200000 #0:4 #e0000000', 
    ' #ffffffff:41 #e0001fff #7fff #fff80 #7fe0000 #f8000000 #3', 
    ' #3e0 #18000 #0:4 #ff800000 #ffffffff:41 #ff8003ff #7ff', 
    ' #fffe #3ff800 #1fe00000 #80000000 #f #e00 #80000', 
    ' #0:3 #fffe0000 #ffffffff:41 #fffe007f #f800007f #7ff #1ffe0', 
    ' #ff8000 #7e000000 #0 #78 #6000 #0:3 #fffff800', 
    ' #ffffffff:42 #ffe00007 #8000007f #fff #7fe00 #3f80000 #e0000000', 
    ' #3 #380 #0:3 #ffffffe0 #ffffffff:41 #7fffffff #ffff8000', 
    ' #fe000003 #ff #3ff8 #1fe000 #1f800000 #0 #1e', 
    ' #1800 #0 #80000000 #ffffffff:42 #7ffffff #3ffffe00 #fff80000', 
    ' #e0000007 #1ff #ff80 #fe0000 #f8000000 #0 #e0', 
    ' #0 #fe000000 #ffffffff:42 #ffffff #3fffff8 #7fffe000 #ff800000', 
    ' #1f #7fe #7f800 #3e00000 #80000000 #3 #200', 
    ' #fff80000 #ffffffff:42 #e03fffff #3fffff #3ffff80 #fffe0000 #f8000000', 
    ' #7f #3fe0 #1f8000 #1e000000 #0 #18 #ffffe000', 
    ' #ffffffff:42 #ff8fffff #3ffff #3ffffe #7fff800 #ffe00000 #80000003', 
    ' #1ff #fe00 #f80000 #e0000000 #0 #ffffff80 #ffffffff:43', 
    ' #f8007fff #3ffff #7fffe0 #1fff8000 #fe000000 #f #7f8', 
    ' #7e000 #7800000 #0 #fffffffe #ffffffff:43 #ffe007ff #80003fff', 
    ' #7ffff #1fffe00 #7ff80000 #e0000000 #7f #3f80 #3e0000', 
    ' #f8000000 #ffffffff:44 #ffff81ff #fe0003ff #7fff #ffff8 #7ffe000', 
    ' #ff800000 #3 #1fe #1f800 #ffe00000 #ffffffff:44 #fffffe3f', 
    ' #fff8007f #e00003ff #ffff #3fff80 #1ffe0000 #f8000000 #f', 
    ' #fe0 #ffff8000 #ffffffff:45 #ffffe007 #ff80007f #fff #3fffe', 
    ' #fff800 #7fe00000 #80000000 #7f #fffffe00 #ffffffff:45 #ffffff80', 
    ' #fffe0007 #f80000ff #1fff #fffe0 #7ff8000 #fe000000 #3', 
    ' #fffffff8 #ffffffff:44 #1fffffff #7ffffffe #fffff800 #ffe0000f #800001ff', 
    ' #7fff #3ffe00 #1ff80000 #e0000000 #ffffffff:46 #fffffff #ffffffe0', 
    ' #ffff8000 #fe00001f #7ff #3fff8 #1ffe000 #ff800000 #ffffffff:46', 
    ' #81ffffff #fffffff #fffffe00 #fff80001 #e000007f #1fff #fff80', 
    ' #fffe0000 #ffffffff:46 #fe3fffff #1ffffff #1ffffff8 #ffffe000 #ff800007', 
    ' #1ff #fffe #fffff800 #ffffffff:47 #e03fffff #3ffffff #7fffff80', 
    ' #fffe0000 #f800001f #7ff #ffffffe0 #ffffffff:47 #ff87ffff #3fffff', 
    ' #7fffffe #fffff800 #ffe00001 #8000007f #ffffffff:48 #fffeffff #f807ffff', 
    ' #ffffff #1fffffe0 #ffff8000 #fe000007 #ffffffff:49 #ffe0ffff #801fffff', 
    ' #3ffffff #7ffffe00 #fff80000 #ffffffff:49 #ffffbfff #fe01ffff #3fffff', 
    ' #ffffff8 #ffffe000 #ffffffff:50 #fff87fff #e007ffff #ffffff #ffffff80', 
    ' #ffffffff:50 #ffffefff #ff80ffff #1fffff #fffffffe #ffffffff:51 #fffe3fff', 
    ' #f807ffff #ff0001ff #1fffff #fffffffc #fffff801 #ffe01fff #ffffffff:48', 
    ' #3fe0ffff #fe000000 #1ff #ffff0 #7fffc000 #ff000000 #3ff', 
    ' #1ffff8 #ffffe000 #ff800000 #fff #7ffffe #fffff800 #ffe00007', 
    ' #80007fff #7ffffff #fffffe00 #fffc00ff #fe3fffff #ffffffff:35 #1fbfff', 
    ' #7f000000 #0 #3f8 #1fe000 #ff800000 #0 #7fe', 
    ' #3ff800 #ffe00000 #80000001 #fff #7ffe00 #fff80000 #e0000003', 
    ' #1fff #1ffff80 #fffe0000 #f800000f #ffff #7ffffe0 #ffff8000', 
    ' #fe00007f #7ffff #fffffff8 #ffffe000 #ff801fff #7ffffff #fffffffe', 
    ' #ffffffff:25 #fff #780000 #e0000000 #1 #f80 #7e0000', 
    ' #f8000000 #3 #fe0 #7f8000 #fe000000 #3 #1ff8', 
    ' #ffe000 #ff800000 #7 #3ffe #1fff800 #ffe00000 #8000000f', 
    ' #7fff #7fffe00 #fff80000 #e000003f #3ffff #3fffff80 #fffe0000', 
    ' #f80003ff #3fffff #ffffffe0 #ffff8003 #fe007fff #fffffff #fffffff8', 
    ' #ffffe1ff #ffffffff:19 #7 #2000 #1800000 #0 #e', 
    ' #7800 #1e00000 #80000000 #f #7e00 #1f80000 #e0000000', 
    ' #f #7f80 #3fe0000 #f8000000 #1f #7fe0 #3ff8000', 
    ' #fe000000 #1f #1fff8 #fffe000 #ff800000 #7f #3fffe', 
    ' #3ffff800 #ffe00000 #800001ff #1fffff #fffffe00 #fff80001 #e0001fff', 
    ' #3ffffff #ffffff80 #fffe003f #f807ffff #ffffffff #ffffffe1 #ffffffff:14', 
    ' #3fffffff #fc000000 #3fffff #fffc0000 #7fffffff #0:36 #20000000', 
    ' #0 #80 #60000 #38000000 #0 #e0 #78000', 
    ' #3e000000 #0 #1f8 #fe000 #7f800000 #0 #3fe', 
    ' #3ff800 #ffe00000 #80000001 #fff #fffffe00 #ffffffff:43 #9fffffff', 
    ' #ffffffff #ffffc07f #f001ffff #7ffffff #fffffc00 #ff00001f #7fff', 
    ' #1ffffe0 #fff80000 #ffffffff:45 #1fffffff #fffffffe #fffff803 #ffe000ff', 
    ' #80003fff #1fffff #ffffe00 #fff80000 #7 #0:7 #6000000', 
    ' #0 #1f8 #3fe000 #ff800000 #7 #fffffffe #ffffffff:9', 
    ' #7fffffff #1fc7f9ff #7c1f07e #0:9 #8020080 #6018060 #380e018', 
    ' #81e0780e #ffffffff:1599 #fff003ff #800fffff #7fffffff #fffffc00 #ffe003ff', 
    ' #fffff #7fffffff #fffff800 #ff8003ff #fffff #7ffffffc #ffffe000', 
    ' #ff8003ff #1fffff #7ffffffe #fffff800 #ffe003ff #801fffff #ffffffff', 
    ' #fffffe00 #fff807ff #e03fffff #ffffffff #ffffff81 #fffe0fff #f87fffff', 
    ' #ffffffff #ffffffe3 #ffff9fff #feffffff #ffffffff:25 #1f #7ffe', 
    ' #3fff800 #ffe00000 #8000000f #7fff #3fffe00 #fff80000 #e000000f', 
    ' #7fff #3ffff80 #fffe0000 #f800000f #7fff #3ffffe0 #ffff8000', 
    ' #fe00000f #7fff #3fffff8 #ffffe000 #ff80001f #ffff #7fffffe', 
    ' #fffff800 #ffe0003f #8001ffff #fffffff #fffffe00 #fff8007f #e003ffff', 
    ' #1fffffff #ffffff80 #fffe00ff #f80fffff #7fffffff #ffffffe0 #ffff83ff', 
    ' #fe3fffff #ffffffff #fffffff9 #ffffffff:15 #f #3fe0 #1ff8000', 
    ' #fe000000 #7 #3ff8 #1ffe000 #ff800000 #7 #3ffe', 
    ' #fff800 #ffe00000 #80000007 #3fff #fffe00 #fff80000 #e0000007', 
    ' #3fff #ffff80 #fffe0000 #f8000007 #3fff #1ffffe0 #ffff8000', 
    ' #fe00000f #7fff #3fffff8 #ffffe000 #ff80001f #ffff #7fffffe', 
    ' #fffff800 #ffe0003f #8001ffff #fffffff #fffffe00 #fff8007f #e007ffff', 
    ' #3fffffff #ffffff80 #fffe03ff #f81fffff #ffffffff #ffffffe1 #ffff8fff', 
    ' #feffffff #ffffffff:9 #f #7e00 #1f80000 #e0000000 #f', 
    ' #3f80 #1fe0000 #f8000000 #f #3fe0 #1ff8000 #fe000000', 
    ' #7 #3ff8 #ffe000 #ff800000 #7 #3ffe #fff800', 
    ' #ffe00000 #80000007 #3fff #1fffe00 #fff80000 #e0000007 #3fff', 
    ' #1ffff80 #fffe0000 #f800000f #7fff #3ffffe0 #ffff8000 #fe00001f', 
    ' #ffff #7fffff8 #ffffe000 #ff80003f #1ffff #1ffffffe #fffff800', 
    ' #ffe000ff #800fffff #7fffffff #fffffe00 #fff807ff #e03fffff #ffffffff', 
    ' #ffffff83 #fffe3fff #fbffffff #ffffffff:5 #3f #e000 #7800000', 
    ' #0 #1e #f800 #3e00000 #80000000 #1f #7e00', 
    ' #3f80000 #e0000000 #f #7f80 #1fe0000 #f8000000 #f', 
    ' #3fe0 #1ff8000 #fe000000 #f #3ff8 #1ffe000 #ff800000', 
    ' #f #3ffe #1fff800 #ffe00000 #8000000f #7fff #3fffe00', 
    ' #fff80000 #e000001f #ffff #7ffff80 #fffe0000 #f800003f #1ffff', 
    ' #fffffe0 #ffff8000 #fe00007f #7ffff #3ffffff8 #ffffe000 #ff8003ff', 
    ' #1fffff #fffffffe #fffff801 #ffe01fff #81ffffff #ffffffff #fffffe1f', 
    ' #fff8ffff #efffffff #ffffffff #7f #0 #8000000 #0', 
    ' #60 #18000 #e000000 #0 #38 #1e000 #7800000', 
    ' #0 #3e #f800 #7e00000 #80000000 #1f #fe00', 
    ' #3f80000 #e0000000 #1f #ff80 #3fe0000 #f8000000 #1f', 
    ' #7fe0 #3ff8000 #fe000000 #1f #fff8 #3ffe000 #ff800000', 
    ' #1f #fffe #7fff800 #ffe00000 #8000003f #1ffff #ffffe00', 
    ' #fff80000 #e00000ff #7ffff #3fffff80 #fffe0000 #f80003ff #1fffff', 
    ' #ffffffe0 #ffff8001 #fe000fff #ffffff #fffffff8 #ffffe00f #ff80ffff', 
    ' #7ffffff #fffffffe #3f #0:8 #20000 #18000000 #0', 
    ' #60 #38000 #e000000 #0 #78 #1e000 #f800000', 
    ' #0 #7e #1f800 #fe00000 #80000000 #3f #1fe00', 
    ' #ff80000 #e0000000 #3f #1ff80 #ffe0000 #f8000000 #3f', 
    ' #1ffe0 #fff8000 #fe000000 #7f #3fff8 #1fffe000 #ff800000', 
    ' #ff #7fffe #7ffff800 #ffe00000 #800003ff #1fffff #fffffe00', 
    ' #fff80001 #e0000fff #ffffff #ffffff80 #fffe000f #f800ffff #7ffffff', 
    ' #ffffffe0 #3f #0:13 #20000000 #0 #180 #60000', 
    ' #38000000 #0 #e0 #78000 #1e000000 #0 #f8', 
    ' #7e000 #1f800000 #0 #fe #3f800 #1fe00000 #80000000', 
    ' #ff #7fe00 #1ff80000 #e0000000 #ff #7ff80 #3ffe0000', 
    ' #f8000000 #1ff #fffe0 #7fff8000 #fe000000 #7ff #3ffff8', 
    ' #ffffe000 #ff800001 #1fff #fffffe #fffff800 #ffe0000f #8000ffff', 
    ' #7ffffff #fffffe00 #3f #0:19 #200 #180000 #60000000', 
    ' #0 #380 #1e0000 #78000000 #0 #3e0 #f8000', 
    ' #7e000000 #0 #3f8 #fe000 #7f800000 #0 #3fe', 
    ' #1ff800 #7fe00000 #80000000 #3ff #1ffe00 #fff80000 #e0000000', 
    ' #fff #7fff80 #fffe0000 #f8000003 #1fff #1ffffe0 #ffff8000', 
    ' #fe00001f #ffff #ffffff8 #ffffe000 #3f #0:24 #200000', 
    ' #80000000 #1 #e00 #380000 #e0000000 #1 #780', 
    ' #3e0000 #f8000000 #1 #7e0 #3f8000 #fe000000 #1', 
    ' #ff8 #7fe000 #ff800000 #3 #1ffe #fff800 #ffe00000', 
    ' #80000007 #3fff #3fffe00 #fff80000 #e000001f #1ffff #fffff80', 
    ' #fffe0000 #7f #0:28 #800000 #0 #6 #1800', 
    ' #e00000 #80000000 #7 #1e00 #f80000 #e0000000 #7', 
    ' #3f80 #fe0000 #f8000000 #7 #3fe0 #1ff8000 #fe000000', 
    ' #f #fff8 #7ffe000 #ff800000 #3f #3fffe #1ffff800', 
    ' #ffe00000 #ff #0:34 #8 #6000 #3800000 #0', 
    ' #1e #7800 #3e00000 #80000000 #1f #fe00 #7f80000', 
    ' #e0000000 #3f #1ff80 #ffe0000 #f8000000 #7f #7ffe0', 
    ' #3fff8000 #fe000000 #1ff #fffffff8 #ffffffff:380 #1ffff #ffffffff:12', 
    ' #fff #1fffffe0 #ffff8000 #ffffffff:10 #7ff #3fffe00 #fff80000', 
    ' #e00003ff #fffffff #ffffff80 #ffffffff:7 #7ff #1ffe000 #ff800000', 
    ' #ff #7ffffe #fffff800 #ffe000ff #83ffffff #ffffffff:5 #fff', 
    ' #1fe0000 #f8000000 #7f #3fffe0 #ffff8000 #fe00001f #1fffff', 
    ' #fffffff8 #ffffe01f #ff8fffff #ffffffff:2 #1fff #3e00000 #80000000', 
    ' #7f #1ffe00 #fff80000 #e000000f #7ffff #ffffff80 #fffe0003', 
    ' #f803ffff #ffffffff #ffffffe0 #fff #6000000 #0 #f8', 
    ' #3fe000 #ff800000 #f #3fffe #fffff800 #ffe00001 #8000ffff', 
    ' #3fffffff #fffffe00 #7ff #0:2 #180 #7e0000 #f8000000', 
    ' #f #3ffe0 #ffff8000 #fe000001 #7fff #1ffffff8 #ffffe000', 
    ' #3ff #0:3 #e00000 #80000000 #1f #7fe00 #fff80000', 
    ' #e0000001 #7fff #1fffff80 #fffe0000 #3ff #0:5 #38', 
    ' #fe000 #ff800000 #1 #7ffe #1ffff800 #ffe00000 #3ff', 
    ' #0:6 #1e0000 #f8000000 #3 #ffe0 #3fff8000 #fe000000', 
    ' #7ff #0:6 #200000 #80000000 #f #1fe00 #7ff80000', 
    ' #e0000000 #fff #f9fe7f80 #fe7f9fe7 #7f9fe7f9 #bfeff9fe #effbfeff', 
    ' #ffffffff:8 #9fe7ffff #e7f9fe7f #f9fe7f9f #feff9fe7 #ffbfeffb #ffffffff:8', 
    ' #fe7fffff #7f9fe7f9 #9fe7f9fe #effbfe7f #fbfeffbf #ffffffff:8 #e7ffffff', 
    ' #f9fe7f9f #fe7f9fe7 #ffbfeffb #ffeffbfe #ffffffff:8 #7fffffff #9fe7f9fe', 
    ' #effbfe7f #fbfeffbf #ffffbfef #ffffffff:9 #feffbfef #ffbfeffb #bfeffbfe', 
    ' #fffffeff #ffffffff:9 #effbfeff #fbfeffbf #feffbfef #fffffffb #ffffffff:9', 
    ' #ffbfefff #bfeffbfe #effbfeff #ffffffff:10 #fbfeffff #feffbfef #ffffeffb', 
    ' #ffffffff:10 #bfefffff #fffbfeff #ffffffff:261 #fe7f9fe7 #7f9fe7f9 #9fe7f9fe', 
    ' #effbfe7f #fbfeffbf #feffbfef #fffffffb #ffffffff:6 #e1f87e1f #f8fe3f8f', 
    ' #fe3f8fe3 #3f8fe3f8 #9fe7f8fe #e7f9fe7f #fbfe7f9f #feffbfef #fffffffb', 
    ' #ffffffff:4 #f83e0ff #83e0f83e #e1f83e0f #f87e1f87 #7e1f87e1 #3f8fe3f8', 
    ' #8fe3f8fe #e7f9fe7f #fbfe7f9f #feffbfef #ffffffff:3 #380e03ff #1e0380e0', 
    ' #781e078 #83e0f81e #e0f83e0f #f87e1f83 #7e1f87e1 #3f8fe3f8 #9fe3f8fe', 
    ' #e7f9fe7f #fbfeffbf #ffffffff:2 #802007ff #60180600 #380e0180 #e0380e0', 
    ' #781e078 #83e0781e #e0f83e0f #f87e1f83 #fe1f87e1 #3f8fe3f8 #9fe7f9fe', 
    ' #effbfeff #ffffffff #7fff #0 #80200800 #60180600 #380e0380', 
    ' #1e0380e0 #781e078 #83e0f81e #e1f83e0f #f87e1f87 #fe3f8fe3 #7f9fe7f8', 
    ' #bfeffbfe #7ffff #0:2 #800000 #80600802 #e0180601 #380e0380', 
    ' #1e0780e0 #f81e078 #83e0f83e #e1f87e1f #f8fe3f87 #fe7f9fe3 #3feff9', 
    ' #0:4 #802000 #80601802 #e0380e01 #780e0380 #1e0781e0 #f83e0f8', 
    ' #87e1f87e #e3f8fe1f #1fe7f8f #0:5 #2000000 #1802008 #80e01806', 
    ' #e0380e03 #781e0781 #3e0f83e0 #1f87e1f8 #fe3f8fe #0:6 #8000000', 
    ' #6008020 #1806018 #80e0380e #e0781e07 #f83e0f81 #7e1f87e0 #0:7', 
    ' #20000000 #18020080 #6018060 #380e038 #81e0781e #e0f83e0f #3', 
    ' #0:7 #80000000 #60080200 #38060180 #e0380e0 #781e078 #3e', 
    ' #0:418 #2 #0:12 #20 #0:12 #600 #0:12', 
    ' #e000 #0:11 #80 #e0000 #0:11 #1800 #1e00000', 
    ' #0:11 #18000 #3e000000 #0:10 #200 #380000 #e0000000', 
    ' #7 #0:9 #6000 #7800000 #0 #fe #0:9', 
    ' #e0000 #f8000000 #1 #3fe0 #0:8 #800 #1e00000', ' #80000000 #3f #7fe00 ]', 
    ), ))
mdb.models['solidsphere'].rootAssembly.regenerate()
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
del mdb.models['castSeal']
del mdb.models['cylinder']
del mdb.models['plunger']
del mdb.models['rumbleStrip']
del mdb.models['sphere']
del mdb.models['sphere_structured']
# Save by khanfari on 2019_03_21-23.37.16; build Unofficial Packaging Version 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.meshEditOptions.setValues(enableUndo=True, maxUndoCacheElements=0.5)
mdb.models['solidsphere'].parts['Part-1'].deleteMesh()
mdb.models['solidsphere'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.125)
mdb.models['solidsphere'].parts['Part-1'].generateMesh()
mdb.models['solidsphere'].parts['Part-1'].deleteSets(setNames=('Set-4', 
    'Set-leftfixed', 'Set-right_twist', 'Set-righttwist_big'))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-leftfixed', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#20 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-right14', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#70300002 #0 #1c00 #30 #0 #63000000 #c', 
    ' #0:3 #8c600000 #1 #7e00000 #0:5 #7e00 ]', ), ))
mdb.models['solidsphere'].rootAssembly.regenerate()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Y'].setValues(region=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].sets['Set-right14'])
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].setValues(region=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].sets['Set-right14'])
del mdb.jobs['sphere_twist']
del mdb.jobs['sphere_structured_twist_try4']
del mdb.jobs['sphere_structured_twist_try2']
del mdb.jobs['sphere_structured_twist-try3']
del mdb.jobs['sphere_structured-twist']
del mdb.jobs['rumbleStrip_shear-in-X']
del mdb.jobs['rumbleStrip_push-down']
del mdb.jobs['plunger_shear-in-X-cen-thickness']
del mdb.jobs['plunger_shear-in-X-cen-norot']
del mdb.jobs['plunger_shear-in-X-cen-localdir']
del mdb.jobs['plunger_shear-in-X-cen']
del mdb.jobs['plunger_shear-in-X']
del mdb.jobs['plunger_push-down']
del mdb.jobs['castSeal_shear-in-X-less']
del mdb.jobs['castSeal_shear-in-X-integration-thin']
del mdb.jobs['castSeal_shear-in-X-inte-thin-inc']
del mdb.jobs['castSeal_shear-in-X-high-order']
del mdb.jobs['castSealTet_shear-in-X-integration']
del mdb.jobs['castSealTet_shear-in-X']
del mdb.jobs['castSeal-shear-in-X-cen']
del mdb.jobs['castSeal-shear-in-X']
del mdb.jobs['castSeal-pull-down-fix-radius-n-lines']
del mdb.jobs['castSeal-pull-down-fix-radius']
del mdb.jobs['castSeal-pull-down']
del mdb.jobs['Job-22']
del mdb.jobs['Job-21']
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 3376, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 'memory': 38.0})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(JOB_COMPLETED, {
    'time': 'Thu Mar 21 23:44:25 2019', 'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(5)-Y-Z*sin(5)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(5)+Z*cos(5)-Z')
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 14292, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 'memory': 38.0})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 78 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 60 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.46875, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 4, 
    'stepTime': 0.46875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.609375, 
    'attempts': 1, 'timeIncrement': 0.140625, 'increment': 5, 
    'stepTime': 0.609375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 365 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.609375, 
    'attempts': ' 1U', 'timeIncrement': 0.2109375, 'increment': 6, 
    'stepTime': 0.609375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.662109375, 
    'attempts': 2, 'timeIncrement': 0.052734375, 'increment': 6, 
    'stepTime': 0.662109375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.7412109375, 
    'attempts': 1, 'timeIncrement': 0.0791015625, 'increment': 7, 
    'stepTime': 0.7412109375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.85986328125, 
    'attempts': 1, 'timeIncrement': 0.11865234375, 'increment': 8, 
    'stepTime': 0.85986328125, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.14013671875, 'increment': 9, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(JOB_COMPLETED, {
    'time': 'Thu Mar 21 23:46:19 2019', 'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(15)-Y-Z*sin(15)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(15)+Z*cos(15)-Z')
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 14684, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 'memory': 38.0})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 248 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 154 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': ' 1U', 'timeIncrement': 0.09375, 'increment': 4, 
    'stepTime': 0.375, 'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.3984375, 
    'attempts': 2, 'timeIncrement': 0.0234375, 'increment': 4, 
    'stepTime': 0.3984375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.43359375, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 5, 
    'stepTime': 0.43359375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.486328125, 
    'attempts': 1, 'timeIncrement': 0.052734375, 'increment': 6, 
    'stepTime': 0.486328125, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.486328125, 
    'attempts': ' 1U', 'timeIncrement': 0.0791015625, 'increment': 7, 
    'stepTime': 0.486328125, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.506103515625, 
    'attempts': 2, 'timeIncrement': 0.019775390625, 'increment': 7, 
    'stepTime': 0.506103515625, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.5357666015625, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 8, 
    'stepTime': 0.5357666015625, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.58026123046875, 
    'attempts': 1, 'timeIncrement': 0.04449462890625, 'increment': 9, 
    'stepTime': 0.58026123046875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 724 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.58026123046875, 
    'attempts': ' 1U', 'timeIncrement': 0.066741943359375, 'increment': 10, 
    'stepTime': 0.58026123046875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.596946716308594, 
    'attempts': 2, 'timeIncrement': 0.0166854858398438, 'increment': 10, 
    'stepTime': 0.596946716308594, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.621974945068359, 
    'attempts': 1, 'timeIncrement': 0.0250282287597656, 'increment': 11, 
    'stepTime': 0.621974945068359, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.659517288208008, 
    'attempts': 1, 'timeIncrement': 0.0375423431396484, 'increment': 12, 
    'stepTime': 0.659517288208008, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.71583080291748, 
    'attempts': 1, 'timeIncrement': 0.0563135147094727, 'increment': 13, 
    'stepTime': 0.71583080291748, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.800301074981689, 
    'attempts': 1, 'timeIncrement': 0.084470272064209, 'increment': 14, 
    'stepTime': 0.800301074981689, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.927006483078003, 
    'attempts': 1, 'timeIncrement': 0.126705408096313, 'increment': 15, 
    'stepTime': 0.927006483078003, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0729935169219971, 'increment': 16, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(JOB_COMPLETED, {
    'time': 'Thu Mar 21 23:49:41 2019', 'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].rootAssembly.Set(cells=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].cells.getSequenceFromMask(
    ('[#ff ]', ), ), name='Set-bc')
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 16880, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 'memory': 38.0})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 18.0, 
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 2, 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 7, 
    'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 248 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': ' 1U', 'timeIncrement': 0.25, 'increment': 2, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 2, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 154 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': ' 1U', 'timeIncrement': 0.09375, 'increment': 4, 
    'stepTime': 0.375, 'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.3984375, 
    'attempts': 2, 'timeIncrement': 0.0234375, 'increment': 4, 
    'stepTime': 0.3984375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.43359375, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 5, 
    'stepTime': 0.43359375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.486328125, 
    'attempts': 1, 'timeIncrement': 0.052734375, 'increment': 6, 
    'stepTime': 0.486328125, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 14 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.486328125, 
    'attempts': ' 1U', 'timeIncrement': 0.0791015625, 'increment': 7, 
    'stepTime': 0.486328125, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.506103515625, 
    'attempts': 2, 'timeIncrement': 0.019775390625, 'increment': 7, 
    'stepTime': 0.506103515625, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.5357666015625, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 8, 
    'stepTime': 0.5357666015625, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.58026123046875, 
    'attempts': 1, 'timeIncrement': 0.04449462890625, 'increment': 9, 
    'stepTime': 0.58026123046875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 724 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.58026123046875, 
    'attempts': ' 1U', 'timeIncrement': 0.066741943359375, 'increment': 10, 
    'stepTime': 0.58026123046875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.596946716308594, 
    'attempts': 2, 'timeIncrement': 0.0166854858398438, 'increment': 10, 
    'stepTime': 0.596946716308594, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.621974945068359, 
    'attempts': 1, 'timeIncrement': 0.0250282287597656, 'increment': 11, 
    'stepTime': 0.621974945068359, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.659517288208008, 
    'attempts': 1, 'timeIncrement': 0.0375423431396484, 'increment': 12, 
    'stepTime': 0.659517288208008, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.71583080291748, 
    'attempts': 1, 'timeIncrement': 0.0563135147094727, 'increment': 13, 
    'stepTime': 0.71583080291748, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.800301074981689, 
    'attempts': 1, 'timeIncrement': 0.084470272064209, 'increment': 14, 
    'stepTime': 0.800301074981689, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.927006483078003, 
    'attempts': 1, 'timeIncrement': 0.126705408096313, 'increment': 15, 
    'stepTime': 0.927006483078003, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0729935169219971, 'increment': 16, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(JOB_COMPLETED, {
    'time': 'Thu Mar 21 23:59:10 2019', 'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].parts['Part-1'].deleteMesh()
mdb.models['solidsphere'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.625)
mdb.models['solidsphere'].parts['Part-1'].generateMesh()
mdb.models['solidsphere'].parts['Part-1'].deleteMesh()
mdb.models['solidsphere'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.025)
mdb.models['solidsphere'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.05)
mdb.models['solidsphere'].parts['Part-1'].generateMesh()
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-leftfixed', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#20 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-right14', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#2 #80007c00 #d #0:2 #78000000 #0 #80000000', 
    ' #f #0:5 #40000000 #0:7 #3e000000 #7c0f81e0 #3e0', 
    ' #0:33 #c0f80000 #1f03e07 #0:12 #1f0e85c0 #7c3e #0:37', 
    ' #83c00000 #3c1e0f07 #0:13 #200 #0:195 #1000 ]', ), ))
mdb.models['solidsphere'].rootAssembly.regenerate()
mdb.jobs['solidsphere_twist'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist.odb', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 17732, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 0, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist', 'memory': 437.0})
mdb.jobs['solidsphere_twist']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(MINIMUM_MEMORY, {'minimum_memory': 71.0, 
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 34 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 1, 
    'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 54 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 2, 
    'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.0625, 
    'attempts': 3, 'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 4, 
    'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 2, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.125, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 
    'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 'iterations': 3, 
    'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 3, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.21875, 
    'attempts': 1, 'timeIncrement': 0.09375, 'increment': 3, 
    'stepTime': 0.21875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.21875, 
    'attempts': ' 1U', 'timeIncrement': 0.140625, 'increment': 4, 
    'stepTime': 0.21875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 4, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.25390625, 
    'attempts': 2, 'timeIncrement': 0.03515625, 'increment': 4, 
    'stepTime': 0.25390625, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 5, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.306640625, 
    'attempts': 1, 'timeIncrement': 0.052734375, 'increment': 5, 
    'stepTime': 0.306640625, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 6, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.3857421875, 
    'attempts': 1, 'timeIncrement': 0.0791015625, 'increment': 6, 
    'stepTime': 0.3857421875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 1 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.3857421875, 
    'attempts': ' 1U', 'timeIncrement': 0.0791015625, 'increment': 7, 
    'stepTime': 0.3857421875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 7, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.405517578125, 
    'attempts': 2, 'timeIncrement': 0.019775390625, 'increment': 7, 
    'stepTime': 0.405517578125, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.models['solidsphere'].rootAssembly.Set(faces=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#cf030 ]', ), ), name='Set-bc')
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 8, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.42529296875, 
    'attempts': 1, 'timeIncrement': 0.019775390625, 'increment': 8, 
    'stepTime': 0.42529296875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 9, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.4549560546875, 
    'attempts': 1, 'timeIncrement': 0.0296630859375, 'increment': 9, 
    'stepTime': 0.4549560546875, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 10, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.49945068359375, 
    'attempts': 1, 'timeIncrement': 0.04449462890625, 'increment': 10, 
    'stepTime': 0.49945068359375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4494 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.49945068359375, 
    'attempts': ' 1U', 'timeIncrement': 0.066741943359375, 'increment': 11, 
    'stepTime': 0.49945068359375, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 11, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.516136169433594, 
    'attempts': 2, 'timeIncrement': 0.0166854858398438, 'increment': 11, 
    'stepTime': 0.516136169433594, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 12, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.541164398193359, 
    'attempts': 1, 'timeIncrement': 0.0250282287597656, 'increment': 12, 
    'stepTime': 0.541164398193359, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 13, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.578706741333008, 
    'attempts': 1, 'timeIncrement': 0.0375423431396484, 'increment': 13, 
    'stepTime': 0.578706741333008, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 14, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.63502025604248, 
    'attempts': 1, 'timeIncrement': 0.0563135147094727, 'increment': 14, 
    'stepTime': 0.63502025604248, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 15, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.691333770751953, 
    'attempts': 1, 'timeIncrement': 0.0563135147094727, 'increment': 15, 
    'stepTime': 0.691333770751953, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 16, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.747647285461426, 
    'attempts': 1, 'timeIncrement': 0.0563135147094727, 'increment': 16, 
    'stepTime': 0.747647285461426, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 17, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.832117557525635, 
    'attempts': 1, 'timeIncrement': 0.084470272064209, 'increment': 17, 
    'stepTime': 0.832117557525635, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 18, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 0.916587829589844, 
    'attempts': 1, 'timeIncrement': 0.084470272064209, 'increment': 18, 
    'stepTime': 0.916587829589844, 'step': 1, 'jobName': 'solidsphere_twist', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 
    'step': 0, 'frame': 19, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.0834121704101563, 'increment': 19, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'solidsphere_twist', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist']._Message(END_STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'solidsphere_twist'})
mdb.jobs['solidsphere_twist']._Message(JOB_COMPLETED, {
    'time': 'Fri Mar 22 00:09:48 2019', 'jobName': 'solidsphere_twist'})
mdb.models['solidsphere'].ConstrainedSketch(name='__profile__', sheetSize=
    200.0)
mdb.models['solidsphere'].sketches['__profile__'].ConstructionLine(point1=(0.0, 
    -100.0), point2=(0.0, 100.0))
mdb.models['solidsphere'].sketches['__profile__'].FixedConstraint(entity=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[2])
mdb.models['solidsphere'].sketches['__profile__'].CircleByCenterPerimeter(
    center=(0.0, 0.0), point1=(0.675, 0.0))
mdb.models['solidsphere'].sketches['__profile__'].Line(point1=(0.0, 
    0.675000000745058), point2=(0.0, -0.675000000745058))
mdb.models['solidsphere'].sketches['__profile__'].VerticalConstraint(
    addUndoState=False, entity=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[4])
mdb.models['solidsphere'].sketches['__profile__'].ParallelConstraint(
    addUndoState=False, entity1=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[2], entity2=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[4])
mdb.models['solidsphere'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['solidsphere'].sketches['__profile__'].vertices[2], entity2=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[2])
mdb.models['solidsphere'].sketches['__profile__'].CoincidentConstraint(
    addUndoState=False, entity1=
    mdb.models['solidsphere'].sketches['__profile__'].vertices[3], entity2=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[2])
mdb.models['solidsphere'].sketches['__profile__'].autoTrimCurve(curve1=
    mdb.models['solidsphere'].sketches['__profile__'].geometry[3], point1=(
    -0.477274894714355, -0.434000968933105))
mdb.models['solidsphere'].Part(dimensionality=THREE_D, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['solidsphere'].parts['Part-2'].BaseSolidRevolve(angle=360.0, 
    flipRevolveDirection=OFF, sketch=
    mdb.models['solidsphere'].sketches['__profile__'])
del mdb.models['solidsphere'].sketches['__profile__']
mdb.models['solidsphere'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D8R, elemLibrary=STANDARD, secondOrderAccuracy=OFF, 
    kinematicSplit=AVERAGE_STRAIN, hourglassControl=DEFAULT, 
    distortionControl=DEFAULT), ElemType(elemCode=C3D6, elemLibrary=STANDARD), 
    ElemType(elemCode=C3D4, elemLibrary=STANDARD)), regions=(
    mdb.models['solidsphere'].parts['Part-2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['solidsphere'].parts['Part-2'].setMeshControls(regions=
    mdb.models['solidsphere'].parts['Part-2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=SYSTEM_ASSIGN)
mdb.models['solidsphere'].parts['Part-2'].setMeshControls(elemShape=TET, 
    regions=
    mdb.models['solidsphere'].parts['Part-2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), technique=FREE)
mdb.models['solidsphere'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=C3D20R, elemLibrary=STANDARD), ElemType(elemCode=C3D15, 
    elemLibrary=STANDARD), ElemType(elemCode=C3D10, elemLibrary=STANDARD)), 
    regions=(
    mdb.models['solidsphere'].parts['Part-2'].cells.getSequenceFromMask((
    '[#1 ]', ), ), ))
mdb.models['solidsphere'].parts['Part-2'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.095)
mdb.models['solidsphere'].parts['Part-2'].generateMesh()
del mdb.models['solidsphere'].parts['Part-2']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='solidsphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='solidsphere_twist_small', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-rightsmall', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#2 #80000400 #0:3 #8000000 #0:2 #8 #0:13', 
    ' #20000000 #0:49 #400 #0:38 #2000000 #0:159 #20000 ]', ), ))
mdb.models['solidsphere'].rootAssembly.regenerate()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].setValues(region=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].sets['Set-rightsmall'])
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Y'].setValues(region=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].sets['Set-rightsmall'])
mdb.jobs['solidsphere_twist_small'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphere_twist_small']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphere_twist_small.odb', 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'whitestones', 'handle': 22640, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STEP, {'phase': STANDARD_PHASE, 
    'stepId': 1, 'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphere_twist_small', 
    'memory': 437.0})
mdb.jobs['solidsphere_twist_small']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 71.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(WARNING, {'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 2777 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphere_twist_small', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphere_twist_small', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.0625, 
    'attempts': 3, 'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 
    'step': 1, 'jobName': 'solidsphere_twist_small', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.125, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 
    'step': 1, 'jobName': 'solidsphere_twist_small', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.1875, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.1875, 
    'step': 1, 'jobName': 'solidsphere_twist_small', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 4, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'solidsphere_twist_small', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 5, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'solidsphere_twist_small', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 6, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'solidsphere_twist_small', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': ' 1U', 'timeIncrement': 0.0625, 'increment': 7, 
    'stepTime': 0.375, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.390625, 
    'attempts': 2, 'timeIncrement': 0.015625, 'increment': 7, 
    'stepTime': 0.390625, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.40625, 
    'attempts': 1, 'timeIncrement': 0.015625, 'increment': 8, 
    'stepTime': 0.40625, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.421875, 
    'attempts': 1, 'timeIncrement': 0.015625, 'increment': 9, 
    'stepTime': 0.421875, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.4453125, 
    'attempts': 1, 'timeIncrement': 0.0234375, 'increment': 10, 
    'stepTime': 0.4453125, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.48046875, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 11, 
    'stepTime': 0.48046875, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.515625, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 12, 
    'stepTime': 0.515625, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.55078125, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 13, 
    'stepTime': 0.55078125, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.5859375, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 14, 
    'stepTime': 0.5859375, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.62109375, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 15, 
    'stepTime': 0.62109375, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.65625, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 16, 
    'stepTime': 0.65625, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.69140625, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 17, 
    'stepTime': 0.69140625, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.7265625, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 18, 
    'stepTime': 0.7265625, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.76171875, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 19, 
    'stepTime': 0.76171875, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.796875, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 20, 
    'stepTime': 0.796875, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.83203125, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 21, 
    'stepTime': 0.83203125, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.8671875, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 22, 
    'stepTime': 0.8671875, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 23, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.90234375, 
    'attempts': 1, 'timeIncrement': 0.03515625, 'increment': 23, 
    'stepTime': 0.90234375, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 24, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 0.955078125, 
    'attempts': 1, 'timeIncrement': 0.052734375, 'increment': 24, 
    'stepTime': 0.955078125, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphere_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 25, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.044921875, 'increment': 25, 
    'stepTime': 1.0, 'step': 1, 'jobName': 'solidsphere_twist_small', 
    'severe': 0, 'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphere_twist_small']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphere_twist_small'})
mdb.jobs['solidsphere_twist_small']._Message(JOB_COMPLETED, {
    'time': 'Fri Mar 22 01:02:46 2019', 'jobName': 'solidsphere_twist_small'})
mdb.models['solidsphere'].parts['Part-1'].deleteMesh()
mdb.models['solidsphere'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.025)
mdb.models['solidsphere'].parts['Part-1'].generateMesh()
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-leftfixed', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#20 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-right14', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#2 #0 #600000 #c0000000 #0:7 #80000000 #1', 
    ' #0:3 #c0000 #0:64 #300000 #600 #0:157 #180000', 
    ' #200 #0:52 #80001800 #0:172 #600006 #0:1385 #1', ' #0:549 #4 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-rightsmall', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#2 #0 #e00000 #c0000000 #0:7 #80000000 #3', 
    ' #0:3 #e0000 #0:64 #380000 #700 #0:157 #380000', 
    ' #60000700 #0:52 #80001800 #180001 #0:171 #700007 #600', 
    ' #0:1387 #8000 #0:1328 #10000000 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].sets.changeKey(fromName=
    'Set-rightsmall', toName='Set-right11')
mdb.models['solidsphere'].parts['Part-1'].sets.changeKey(fromName='Set-right14'
    , toName='Set-rightsmall')
mdb.models['solidsphere'].parts['Part-1'].sets.changeKey(fromName='Set-right11'
    , toName='Set-right14')
mdb.models['solidsphere'].rootAssembly.regenerate()
mdb.models['solidsphere'].rootAssembly.Set(faces=
    mdb.models['solidsphere'].rootAssembly.instances['Part-1-1'].faces.getSequenceFromMask(
    ('[#cf030 ]', ), ), name='Set-bc')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='solidsphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='solidsphereFine_twist_small', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['solidsphereFine_twist_small'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphereFine_twist_small.odb', 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 22076, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 3 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.0, 
    'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 'stepTime': 0.0, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.0625, 
    'attempts': 3, 'timeIncrement': 0.0625, 'increment': 1, 'stepTime': 0.0625, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.125, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 2, 'stepTime': 0.125, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.1875, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 3, 'stepTime': 0.1875, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 4, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.25, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 4, 'stepTime': 0.25, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 7, 'phase': STANDARD_PHASE, 'equilibrium': 7})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 5, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.3125, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 5, 'stepTime': 0.3125, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 6, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': 1, 'timeIncrement': 0.0625, 'increment': 6, 'stepTime': 0.375, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.375, 
    'attempts': ' 1U', 'timeIncrement': 0.0625, 'increment': 7, 
    'stepTime': 0.375, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 9, 'phase': STANDARD_PHASE, 'equilibrium': 9})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 7, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.40625, 
    'attempts': 2, 'timeIncrement': 0.03125, 'increment': 7, 
    'stepTime': 0.40625, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 8, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.4375, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 8, 
    'stepTime': 0.4375, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 9, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.46875, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 9, 
    'stepTime': 0.46875, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 10, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.5, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 10, 'stepTime': 0.5, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 11, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.53125, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 11, 
    'stepTime': 0.53125, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 12, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.5625, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 12, 
    'stepTime': 0.5625, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 8, 'phase': STANDARD_PHASE, 'equilibrium': 8})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 13, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.59375, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 13, 
    'stepTime': 0.59375, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 14, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.625, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 14, 
    'stepTime': 0.625, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 15, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.65625, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 15, 
    'stepTime': 0.65625, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 16, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.6875, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 16, 
    'stepTime': 0.6875, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 17, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {
    'totalTime': 0.734375, 'attempts': 1, 'timeIncrement': 0.046875, 
    'increment': 17, 'stepTime': 0.734375, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 18, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.78125, 
    'attempts': 1, 'timeIncrement': 0.046875, 'increment': 18, 
    'stepTime': 0.78125, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 19, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {
    'totalTime': 0.828125, 'attempts': 1, 'timeIncrement': 0.046875, 
    'increment': 19, 'stepTime': 0.828125, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small', 'severe': 0, 'iterations': 6, 
    'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 20, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.875, 
    'attempts': 1, 'timeIncrement': 0.046875, 'increment': 20, 
    'stepTime': 0.875, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 6, 'phase': STANDARD_PHASE, 'equilibrium': 6})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 21, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {
    'totalTime': 0.921875, 'attempts': 1, 'timeIncrement': 0.046875, 
    'increment': 21, 'stepTime': 0.921875, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small', 'severe': 0, 'iterations': 5, 
    'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 22, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 0.96875, 
    'attempts': 1, 'timeIncrement': 0.046875, 'increment': 22, 
    'stepTime': 0.96875, 'step': 1, 'jobName': 'solidsphereFine_twist_small', 
    'severe': 0, 'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphereFine_twist_small']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 23, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(STATUS, {'totalTime': 1.0, 
    'attempts': 1, 'timeIncrement': 0.03125, 'increment': 23, 'stepTime': 1.0, 
    'step': 1, 'jobName': 'solidsphereFine_twist_small', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphereFine_twist_small']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small'})
mdb.jobs['solidsphereFine_twist_small']._Message(JOB_COMPLETED, {
    'time': 'Fri Mar 22 06:47:18 2019', 
    'jobName': 'solidsphereFine_twist_small'})
# Save by khanfari on 2019_03_22-13.56.50; build Unofficial Packaging Version 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(5*180/pi)-Y-Z*sin(5*180/pi)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(5*180/pi)+Z*cos(5*180/pi)-Z')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='solidsphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='solidsphereFine_twist_small_less_rot', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['solidsphereFine_twist_small_less_rot'].submit(consistencyChecking=
    OFF)
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphereFine_twist_small_less_rot.odb', 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 14676, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_less_rot', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 4 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(STATUS, {
    'totalTime': 0.0, 'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_less_rot', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(STATUS, {
    'totalTime': 0.0, 'attempts': ' 2U', 'timeIncrement': 0.25, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_less_rot', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(STATUS, {
    'totalTime': 0.0625, 'attempts': 3, 'timeIncrement': 0.0625, 
    'increment': 1, 'stepTime': 0.0625, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_less_rot', 'severe': 0, 
    'iterations': 4, 'phase': STANDARD_PHASE, 'equilibrium': 4})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 2, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(STATUS, {
    'totalTime': 0.125, 'attempts': 1, 'timeIncrement': 0.0625, 'increment': 2, 
    'stepTime': 0.125, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_less_rot', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 3, 
    'jobName': 'solidsphereFine_twist_small_less_rot'})
mdb.jobs['solidsphereFine_twist_small_less_rot']._Message(STATUS, {
    'totalTime': 0.1875, 'attempts': 1, 'timeIncrement': 0.0625, 
    'increment': 3, 'stepTime': 0.1875, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_less_rot', 'severe': 0, 
    'iterations': 5, 'phase': STANDARD_PHASE, 'equilibrium': 5})
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(.5*180/pi)-Y-Z*sin(.5*180/pi)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(.5*180/pi)+Z*cos(.5*180/pi)-Z')
# Save by khanfari on 2019_03_22-16.58.51; build Unofficial Packaging Version 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='solidsphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='solidsphereFine_twist_small_rot_p5', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['solidsphereFine_twist_small_rot_p5'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\solidsphereFine_twist_small_rot_p5.odb', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 117192, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_rot_p5', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
# Save by khanfari on 2019_03_22-17.01.29; build Unofficial Packaging Version 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(.05*180/pi)-Y-Z*sin(.05*180/pi)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(.05*180/pi)+Z*cos(.05*180/pi)-Z')
mdb.jobs['solidsphereFine_twist_small_rot_p5'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphereFine_twist_small_rot_p5.odb', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 96068, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_rot_p5', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(WARNING, {
    'phase': STANDARD_PHASE, 
    'message': 'EXCESSIVE DISTORTION AT A TOTAL OF 7 INTEGRATION POINTS IN SOLID (CONTINUUM) ELEMENTS', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STATUS, {
    'totalTime': 0.0, 'attempts': ' 1U', 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 0.0, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p5', 'severe': 0, 
    'iterations': 1, 'phase': STANDARD_PHASE, 'equilibrium': 1})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].suppress()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].resume()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Y'].suppress()
mdb.models['solidsphere'].boundaryConditions['BC-leftfixed'].suppress()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].suppress()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Y'].resume()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].resume()
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(.005*pi/180)+Z*cos(.005*pi/180)-Z')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(.005*pi/180)-Y-Z*sin(.005*pi/180)')
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].suppress()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Z'].resume()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Y'].suppress()
mdb.models['solidsphere'].boundaryConditions['BC-rightrot-Y'].resume()
mdb.models['solidsphere'].boundaryConditions['BC-leftfixed'].resume()
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-leftfixed', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#20 #0:206 #20000000 #0:192 #20 #0:78 #80000', ' #0:59 #40 ]', ), ))
mdb.models['solidsphere'].rootAssembly.regenerate()
mdb.jobs.changeKey(fromName='solidsphereFine_twist_small_rot_p5', toName=
    'solidsphereFine_twist_small_rot_p05')
mdb.jobs['solidsphereFine_twist_small_rot_p05'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphereFine_twist_small_rot_p05.odb', 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 118952, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_rot_p05', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.models['solidsphere'].steps['Step-1'].setValues(minInc=1e-05)
# Save by khanfari on 2019_03_22-17.24.56; build Unofficial Packaging Version 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.jobs['solidsphereFine_twist_small_rot_p05'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\solidsphereFine_twist_small_rot_p05.odb', 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 120272, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_rot_p05', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p05', 'severe': 0, 
    'iterations': 2, 'phase': STANDARD_PHASE, 'equilibrium': 2})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
mdb.jobs['solidsphereFine_twist_small_rot_p05']._Message(JOB_COMPLETED, {
    'time': 'Fri Mar 22 17:34:00 2019', 
    'jobName': 'solidsphereFine_twist_small_rot_p05'})
# Save by khanfari on 2019_03_22-17.36.23; build Unofficial Packaging Version 2016_09_27-14.54.59 126836
# Save by khanfari on 2019_03_22-17.36.42; build Unofficial Packaging Version 2016_09_27-14.54.59 126836
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(.5*pi/180)-Y-Z*sin(.5*pi/180)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(.5*pi/180)+Z*cos(.5*pi/180)-Z')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='solidsphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='solidsphereFine_twist_small_rot_p5', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['solidsphereFine_twist_small_rot_p5'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphereFine_twist_small_rot_p5.odb', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 121124, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_rot_p5', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p5', 'severe': 0, 
    'iterations': 3, 'phase': STANDARD_PHASE, 'equilibrium': 3})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.jobs['solidsphereFine_twist_small_rot_p5']._Message(JOB_COMPLETED, {
    'time': 'Fri Mar 22 17:47:55 2019', 
    'jobName': 'solidsphereFine_twist_small_rot_p5'})
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Y'].setValues(
    expression='Y*cos(15*pi/180)-Y-Z*sin(15*pi/180)')
mdb.models['solidsphere'].analyticalFields['AnalyticalField-rot-around-X-CCW_Z'].setValues(
    expression='Y*sin(15*pi/180)+Z*cos(15*pi/180)-Z')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='solidsphere', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='solidsphereFine_twist_small_rot_15', 
    nodalOutputPrecision=SINGLE, numCpus=1, numGPUs=0, queue=None, 
    resultsFormat=ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=
    0, waitMinutes=0)
mdb.jobs['solidsphereFine_twist_small_rot_15'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphereFine_twist_small_rot_15.odb', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 122512, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_rot_15', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-leftfixed', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#20 #0:206 #20000000 #0:192 #20 #0:78 #80000', ' #0:59 #40 ]', ), ))
mdb.models['solidsphere'].parts['Part-1'].Set(name='Set-leftfixed', nodes=
    mdb.models['solidsphere'].parts['Part-1'].nodes.getSequenceFromMask(mask=(
    '[#20 ]', ), ))
mdb.models['solidsphere'].rootAssembly.regenerate()
mdb.jobs['solidsphereFine_twist_small_rot_15'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphereFine_twist_small_rot_15.odb', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 123688, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_rot_15', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STATUS, {
    'totalTime': 1.0, 'attempts': 1, 'timeIncrement': 1.0, 'increment': 1, 
    'stepTime': 1.0, 'step': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_15', 'severe': 0, 
    'iterations': 11, 'phase': STANDARD_PHASE, 'equilibrium': 11})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(END_STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(COMPLETED, {
    'phase': STANDARD_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(JOB_COMPLETED, {
    'time': 'Fri Mar 22 18:26:52 2019', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.models['solidsphere'].steps['Step-1'].setValues(minInc=1e-10)
mdb.jobs['solidsphereFine_twist_small_rot_15'].submit(consistencyChecking=OFF)
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STARTED, {
    'phase': BATCHPRE_PHASE, 'clientHost': 'whitestones', 'handle': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(WARNING, {
    'phase': BATCHPRE_PHASE, 
    'message': 'OUTPUT REQUEST DG IS ONLY AVAILABLE FOR *HYPERELASTIC/FOAM AND *USER MATERIAL.', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ODB_FILE, {
    'phase': BATCHPRE_PHASE, 
    'file': 'C:\\AbaqusTemp\\realSimulation\\solidsphereFine_twist_small_rot_15.odb', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(COMPLETED, {
    'phase': BATCHPRE_PHASE, 'message': 'Analysis phase complete', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STARTED, {
    'phase': STANDARD_PHASE, 'clientHost': 'whitestones', 'handle': 127488, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(STEP, {
    'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ODB_FRAME, {
    'phase': STANDARD_PHASE, 'step': 0, 'frame': 0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(MEMORY_ESTIMATE, {
    'phase': STANDARD_PHASE, 'jobName': 'solidsphereFine_twist_small_rot_15', 
    'memory': 7542.0})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(PHYSICAL_MEMORY, {
    'phase': STANDARD_PHASE, 'physical_memory': 65457.0, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(MINIMUM_MEMORY, {
    'minimum_memory': 917.0, 'phase': STANDARD_PHASE, 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ERROR, {
    'phase': STANDARD_PHASE, 
    'message': 'Process terminated by external request (SIGTERM or SIGINT received).', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(INTERRUPTED, {
    'phase': STANDARD_PHASE, 
    'message': 'Analysis interrupted by external signal', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(ERROR, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
mdb.jobs['solidsphereFine_twist_small_rot_15']._Message(JOB_ABORTED, {
    'message': 'Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.', 
    'jobName': 'solidsphereFine_twist_small_rot_15'})
# Save by khanfari on 2019_03_22-19.21.42; build Unofficial Packaging Version 2016_09_27-14.54.59 126836
